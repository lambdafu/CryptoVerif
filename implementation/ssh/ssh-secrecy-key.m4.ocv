set elsefindFactsInSimplify = true.
set mergeBranches = false.

proof {
      success;
      (*prove authentication*)
      show_game occ;
      insert 354 "let concat8(a1, a2, a3, a4, a5, a6, a7, a8) = x_2 in"; (* in OH, at the beginning *)
      show_game occ;
      insert 364 "let concat4(b1, b2, b3, b4) = x_2 in"; (* in the else branch of the "let" inserted above *) 
      crypto rom(h);
      crypto uf_cma(sign);
      success;

      (*secrecy of the key*)
      show_game occ;
      insert 218 "find w <= N suchthat defined(idCS[w], idSS[w], cookieCS[w], nsCS[w], cookieSS[w], eS[w], fS[w], r_15[w]) && ((idCC = idCS[w]) && ((idSC = idSS[w]) && (((cookieCC = cookieCS[w]) && (negotiation_string = nsCS[w])) && (((cookieSC = cookieSS[w]) && (nsSC = negotiation_string)) && ((eC = eS[w]) && ((fC = fS[w]))))))) then";
      insert 53 "find v <= N suchthat defined(eC[v]) && eC[v] = eS then";
      simplify;
      crypto cdh(exp);
      auto
}

param N.

type pad_rand [fixed]. (*size 255 bytes or less depending on how the padding is done*)
type cookie [fixed, large]. (* 16 bytes *)
type tag [bounded]. (* 1 byte *)
type uint32 [bounded]. (* 4 bytes *)
type D [fixed].
type hashkey [bounded].
type hash [fixed, large].
type signature [bounded].
type block [fixed].
type skeyseed [large, fixed].
type sskey [bounded, large].
type spkey [bounded, large].
type mkey [bounded, large].
type macinput [bounded].
type macres [large].
type iv [fixed, large].
type symkey [fixed, large].

fun skp(spkey,sskey): bitstring [data].

type Z [large, bounded]. (*mpint = ssh string (size+string payload). MSB. 8 bits per byte. where 0=empty string, >0=first bit=0, <0=first bit=1,at beginning no useless 00 or FF. *)
type G [large, bounded]. (*mpint*)

fun bitstring_of_G(G): bitstring [data].

fun padr(bitstring,pad_rand): bitstring.
letfun pad(m:bitstring) = r <-R pad_rand; padr(m, r).
fun unpad(bitstring): bitstringbot.

fun injbot(bitstring): bitstringbot [data].
equation forall x: bitstring; injbot (x) <> bottom.
equation forall x: bitstring, r: pad_rand;
       unpad(padr(x, r)) = injbot(x).

(* utils *)

fun get_size(bitstring): uint32.

fun concatm(tag, bitstring): bitstring [data].
fun concatKEXINIT(cookie, bitstring): bitstring [data].
fun concat8(bitstring, bitstring, bitstring, bitstring, spkey, G, G, G): bitstring [data].
fun concatKEXDHREPLY(spkey, G, signature): bitstring [data].
fun concat(bitstring, bitstring): bitstring.
fun check_algorithms(bitstring): bool.
fun block_of_hash(hash): block [data].

const negotiation_string: bitstring.
const tag_kexdh_init: tag.
const tag_kexdh_reply: tag.
const tag_kex_init: tag.
const tag_newkeys: tag.
const uint32_zero: uint32.
const null_string: bitstring. (*the string of length 0 *)

(*CDH*)

proba pCDH.

expand CDH(G, Z, g, exp, mult, pCDH).

letfun message(x: Z) = exp(g, x).

(*hash function *)

expand ROM_hash(hashkey, bitstring, hash, h, hashoracle, qH).

(* signature *)

proba Psign.
proba Psigncoll.

expand UF_CMA_proba_signature(skeyseed, spkey, sskey, block, signature, sskgen, spkgen, sign, check, Psign, Psigncoll).

letfun kgen_s () = r <-R skeyseed; skp(spkgen(r), sskgen(r)).

(* utils *)

const tag_IVC: tag.
const tag_IVS: tag.
const tag_EKC: tag.
const tag_EKS: tag.
const tag_MKC: tag.
const tag_MKS: tag.

fun iv_of_hash (hash): iv.
fun symkey_of_hash (hash): symkey.
fun mkey_of_hash (hash): mkey.

fun concat4(G, hash, tag, hash): bitstring [data].
letfun gen(hk:hashkey, k:G, h1:hash, c:tag, h2:hash) = h(hk, concat4(k, h1, c, h2)).
letfun genIVC(hk:hashkey, k:G, h1:hash, h2:hash) = iv_of_hash(gen(hk, k, h1, tag_IVC, h2)).
letfun genIVS(hk:hashkey, k:G, h1:hash, h2:hash) = iv_of_hash(gen(hk, k, h1, tag_IVS, h2)).
letfun genEKC(hk:hashkey, k:G, h1:hash, h2:hash) = symkey_of_hash(gen(hk, k, h1, tag_EKC, h2)).
letfun genEKS(hk:hashkey, k:G, h1:hash, h2:hash) = symkey_of_hash(gen(hk, k, h1, tag_EKS, h2)).
letfun genMKC(hk:hashkey, k:G, h1:hash, h2:hash) = mkey_of_hash(gen(hk, k, h1, tag_MKC, h2)).
letfun genMKS(hk:hashkey, k:G, h1:hash, h2:hash) = mkey_of_hash(gen(hk, k, h1, tag_MKS, h2)).

equation forall k: G, h1: hash, c: tag, h2: hash, x1: bitstring, x2: bitstring, x3: bitstring, x4: bitstring, x5: spkey, x6: G, x7: G, x8: G;
   concat4(k, h1, c, h2) <> concat8(x1, x2, x3, x4, x5, x6, x7, x8).

param Nsr.
equiv(hash_to_iv_random)
      foreach i <= Nsr do h <-R hash; O() := return (iv_of_hash (h))
        <=(0)=> 
      foreach i <= Nsr do s <-R iv; O() := return (s).

equiv(hash_to_symkey_random)
      foreach i <= Nsr do h <-R hash; O() := return (symkey_of_hash (h))
        <=(0)=> 
      foreach i <= Nsr do s <-R symkey; O() := return (s).

equiv(hash_to_mackey_random)
      foreach i <= Nsr do h <-R hash; O() := return (mkey_of_hash (h))
        <=(0)=> 
      foreach i <= Nsr do s <-R mkey; O() := return (s).

(* key table *)

table trusted_hosts(spkey).

(* Secret *)

query secret ONEKEY.

(* Authentication property *)

event endC(bitstring, bitstring, bitstring, bitstring, spkey, G, G, G, hash).
event endS(bitstring, bitstring, bitstring, bitstring, spkey, G, G, G, hash).

query idC: bitstring, idS: bitstring, initC: bitstring, initS: bitstring, pk: spkey, x: G, y: G, K: G, H: hash;
      inj-event(endC(idC, idS, initC, initS, pk, x, y, K, H)) ==> inj-event(endS(idC, idS, initC, initS, pk, x, y, K, H)).

query idC: bitstring, idS: bitstring, initC: bitstring, initS: bitstring, pk: spkey, x: G, y: G, K: G, H: hash, K': G, H': hash;
      event(endC(idC, idS, initC, initS, pk, x, y, K, H)) && event(endS(idC, idS, initC, initS, pk, x, y, K', H')) ==> K = K' && H = H'.

(* Server *)

let processS(hk: hashkey, pkS: spkey, skS: sskey) =
SSH_S {
      negotiationS() :=
	  (* Returning KEX_INIT to client *)
          cookieSS <-R cookie;
          initSS <- concatm(tag_kex_init, concatKEXINIT(cookieSS, negotiation_string));
          return (pad(initSS));

          key_exchange2S(idCS: bitstring, idSS: bitstring, m1: bitstring, m2: bitstring) :=
	  (* Expecting KEX_INIT and KEXDH_INIT from client, returning KEXDH_REPLY *)
          let injbot(initCS) = unpad(m1) in
          let concatm(=tag_kex_init, concatKEXINIT(cookieCS, nsCS)) = initCS in
          if (check_algorithms(nsCS)) then
          let injbot(concatm(=tag_kexdh_init, bitstring_of_G(eS))) = unpad(m2) in
          yS <-R Z;
          fS <- message(yS);
          KS: G <- exp(eS, yS);
          HS <- h(hk, concat8(idCS, idSS, initCS, initSS, pkS, eS, fS, KS));
	  event endS(idCS, idSS, initCS, initSS, pkS, eS, fS, KS, HS);
          sS <- sign(block_of_hash(HS), skS);
          return (pad(concatm(tag_kexdh_reply, concatKEXDHREPLY(pkS, fS, sS))));

	 key_exchange4S(m: bitstring) :=
	   (* Expecting NEW_KEYS from client, returning NEW_KEYS *)
	   let injbot(nkCS) = unpad(m) in
	   let concatm(=tag_newkeys, =null_string) = nkCS in
	   return (pad(concatm(tag_newkeys, null_string)));

         get_keysS() :=
 	   IVCS: iv <- genIVC(hk,KS,HS,HS);
 	   IVSS: iv <- genIVS(hk,KS,HS,HS);
	   EKCS: symkey <- genEKC(hk,KS,HS,HS);
	   EKSS: symkey <- genEKS(hk,KS,HS,HS);
	   MKCS: mkey <- genMKC(hk,KS,HS,HS);
	   MKSS: mkey <- genMKS(hk,KS,HS,HS).

(* Client *)

let processC(hk: hashkey) =
SSH_C {
        negotiationC() :=
	     (* Returning KEX_INIT to the server *)
             cookieCC <-R cookie;
             initCC <- concatm(tag_kex_init, concatKEXINIT (cookieCC, negotiation_string));
             return (pad(initCC));
        
        key_exchange1C(m: bitstring) :=
             (* Expecting KEX_INIT from the server, returning KEXDH_INIT *)
             let injbot(initSC) = unpad(m) in
             let concatm(=tag_kex_init, concatKEXINIT(cookieSC, nsSC)) = initSC in
             if (check_algorithms(initSC)) then
             xC <-R Z;
             eC <- message(xC);
             return (pad(concatm(tag_kexdh_init, bitstring_of_G(eC))));

        key_exchange3C(idCC: bitstring, idSC: bitstring, m: bitstring) :=
	     (* Expecting KEYDH_REPLY from the server, returning NEW_KEYS *)
             let injbot(concatm(=tag_kexdh_reply, concatKEXDHREPLY(pkSC, fC, sC))) = unpad(m) in
             get trusted_hosts(=pkSC) in
             KC:G <- exp(fC,xC);
             HC <- h(hk,concat8(idCC, idSC, initCC, initSC, pkSC, eC, fC, KC));
             if check(block_of_hash(HC),pkSC,sC) then
             event endC(idCC, idSC, initCC, initSC, pkSC, eC, fC, KC, HC);
	     return (pad(concatm(tag_newkeys, null_string)));
	
	get_keysC(m: bitstring) :=
	  (* Expecting NEW_KEYS from the server, then start the tunnel *)
  	  let injbot(nkSC) = unpad(m) in
	  let concatm(=tag_newkeys, =null_string) = nkSC in
          IVCC: iv <- genIVC(hk,KC,HC,HC);
	  IVSC: iv <- genIVS(hk,KC,HC,HC);
	  EKCC: symkey <- genEKC(hk,KC,HC,HC);
	  EKSC: symkey <- genEKS(hk,KC,HC,HC);
	  MKCC: mkey <- genMKC(hk,KC,HC,HC);
	  MKSC: mkey <- genMKS(hk,KC,HC,HC).

(* Key generation *)

process 
   SSH_Keygen [ hk0 > hk, pkS0 > pkS, skS0 > skS ] {
	Ostart() :=
	hk0 <-R hashkey;
        let skp(pkS0: spkey,skS0: sskey) = kgen_s() in
        insert trusted_hosts(pkS0);
        return (pkS0)};
        ((foreach iA <= N do run processS(hk0,pkS0,skS0)) | (foreach iB <= N do run processC(hk0)) | run hashoracle(hk0))

(* EXPECTED
All queries proved.
0.568s (user 0.552s + system 0.016s), max rss 101664K
END *)
