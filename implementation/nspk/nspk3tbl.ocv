(* Needham Schroeder public key protocol, fixed by Lowe.
   In this example, the host name is concatenated with the role (A or B)
   to create the identity. Hence we use different keys for each role,
   even if several roles are run on the same machine.
 *)

(* In order to determine the proof, use interactive mode: 
   set interactiveMode = true.
The proof is as follows: *)

proof {
show_game;
crypto uf_cma(sign) ks;
auto
}

param N.
param N2.
param N3.
param N4.

type nonce [fixed,large].
type host [bounded].
type pkey [bounded].
type skey [bounded].
type keyseed [large,fixed].
type spkey [bounded].
type sskey [bounded].
type skeyseed [large,fixed].
type signature [bounded].
type blocksize [fixed].
type blocksizebot [bounded].
type sblocksize [fixed].
type role [bounded].
type hostname [bounded].
type keypair [bounded].
type skeypair [bounded].


implementation type skeyseed=64;
               type keyseed=64;
               type nonce=64;
               type host="string" [serial = "id", "id"];
               type pkey="pkey" [serial = "pkey_to","pkey_from"];
               type skey="skey" [serial = "skey_to","skey_from"];
               type signature="string";
               type spkey="pkey" [serial = "pkey_to","pkey_from"];
               type sskey="skey" [serial = "skey_to","skey_from"].

table keytbl(host,pkey).
implementation table keytbl="keytbl".

(* The constants hostnameA and hostnameB may be equal or different *)

set diffConstants = false.
const hostnameA: hostname.
const hostnameB: hostname.

fun concat1(nonce, host):blocksize [data].
fun concat2(nonce, nonce, host):blocksize [data].
fun concat3(pkey, host):sblocksize [data].
fun concat4(hostname, role):host [data].
fun pad(nonce):blocksize [data].

fun kp(pkey,skey):keypair [data].
fun skp(spkey,sskey):skeypair [data].

equation forall z:nonce,t:nonce,u:host,y2:nonce,z2:host;
	concat2(z,t,u) <> concat1(y2,z2).
equation forall y:nonce,y2:nonce,z2:host;
	pad(y) <> concat1(y2,z2).
equation forall z:nonce,t:nonce,u:host,y2:nonce;
	concat2(z,t,u) <> pad(y2).

(* Public-key encryption (IND-CCA2) *)

proba Penc.
proba Penccoll.

expand IND_CCA2_public_key_enc(keyseed, pkey, skey, blocksize, bitstring, skgen, pkgen, enc, dec, injbot, Z, Penc, Penccoll).

const Zblocksize: blocksize.
equation forall x: blocksize; Z(x) = Zblocksize.

(* Signatures *)

proba Psign.
proba Psigncoll.

expand UF_CMA_proba_signature(skeyseed, spkey, sskey, sblocksize, signature, sskgen, spkgen, sign, check, Psign, Psigncoll).

(* Queries *)

event beginA(host, host, nonce, nonce).
event endA(host, host, nonce, nonce).
event beginB(host, host, nonce, nonce).
event endB(host, host, nonce, nonce).

query x:host, y:host, na:nonce, nb:nonce;
	event(endA(x,y,na,nb)) ==> event(beginB(x,y,na,nb)).
query x:host, y:host, na:nonce, nb:nonce;
	event(endB(x,y,na,nb)) ==> event(beginA(x,y,na,nb)).
query x:host, y:host, na:nonce, nb:nonce;
	inj-event(endA(x,y,na,nb)) ==> inj-event(beginB(x,y,na,nb)).
query x:host, y:host, na:nonce, nb:nonce;
	inj-event(endB(x,y,na,nb)) ==> inj-event(beginA(x,y,na,nb)).

const roleA:role.
const roleB:role.
equation roleA <> roleB.

(*implementation*)

letfun kgen() =  k <-R keyseed;  kp (pkgen(k) ,skgen(k) ).
letfun kgen_s() =  ks <-R skeyseed;  skp (spkgen(ks) ,sskgen(ks) ).

implementation fun concat1="concat_str_str" [inverse = "unconcat_str_str"];
               fun concat2="concat_str_str_str" [inverse =  "unconcat_str_str_str"];
               fun concat3="concat_pk_str" [inverse =  "unconcat_pk_str"];
               fun concat4="concat_str_str" [inverse =  "unconcat_str_str"];
	       fun kgen = "(pk_kgen 1024)";
	       fun kgen_s = "(pk_kgen 1024)";
               fun sign="(rsassa_pss_sign 8)";
               fun hostnameA="get_hostname";
               fun hostnameB="get_hostname";
               fun check="(rsassa_pss_verify 8)";
               fun enc="pk_enc";
               fun dec="pk_dec";
               fun injbot="injbot" [inverse =  "injbot_inv"];
               fun pad="(pad Cryptokit.Padding.length 64)" [inverse = "(pad_inv Cryptokit.Padding.length)"];
               fun kp="id" [inverse="id"];
               fun skp="id" [inverse="id"];
               const roleA="\"A\"";
               const roleB="\"B\"".



let processA(pkS: spkey) =
(* Key generation for A *)
ONS_AGenKey [ pkA > pkA, skA > skA, A > idA ] 
{
    OAGK () :=
        A:host <- concat4 (hostnameA,roleA);
        let kp (pkA:pkey,skA:skey) = kgen() in
        insert keytbl(A,pkA);
        return (pkA)};
foreach i <= N do
(* Role of A *)
ONS_A {
    OA1 (hostX: host) := (* hostX is A's interlocutor *)
        return (A, hostX);
    OA3 (pkX: pkey, =hostX, ms: signature) :=
	if check(concat3(pkX, hostX), pkS, ms) then
	(* Message 3 *)
        Na <-R nonce;
        return (enc(concat1(Na, A), pkX));
	(* Message 6 *)
    OA5 (m: bitstring) :=
	let injbot(concat2(=Na, Nb, =hostX)) = dec(m, skA) in
	event beginA(A, hostX, Na, Nb);
	(* Message 7 *)
	return (enc(pad(Nb), pkX))};
	(* OK *)
    OAFinish () := (*need to define B before using it*)
	if defined(B) && (hostX = B) then
	event endA(A, hostX, Na, Nb).

let processB(pkS: spkey) =
(* Key generation for B *)
ONS_BGenKey [ pkB > pkB, skB > skB, B > idB] 
{
    OBGK () :=
        B:host <- concat4 (hostnameB,roleB);
        let kp (pkB:pkey,skB:skey) = kgen() in
        insert keytbl(B,pkB);
        return (pkB)};
foreach i <= N do
(* Role of B *)
ONS_B {
	(* Message 3 *)
    OB7 (m:bitstring) :=
	let injbot(concat1(Na, hostY)) = dec(m, skB) in
	return (B, hostY);
    OB9 (pkY: pkey, =hostY, ms: signature) :=
	if check(concat3(pkY, hostY), pkS, ms) then
	(* Message 6 *)
	Nb <-R nonce;
	event beginB(hostY, B, Na, Nb);
	return (enc(concat2(Na, Nb, B), pkY));
	(* Message 7 *)
    OB11 (m3: bitstring) :=
	let injbot(pad(=Nb)) = dec(m3, skB) in
        return ()};
    OBFinish () :=
              	(* OK *)
	if  defined (A) && (hostY = A) then
	event endB(hostY, B, Na, Nb).

let processK =
    OK12 (Khost: host, Kkey: pkey) :=
           if defined (A,B,pkA,pkB) && (Khost <> A) && (Khost <> B) then 
                 insert keytbl(Khost,Kkey).

let processS(skS: sskey) =
(* The certificate server. It receives a pair of host names (h1,h2)
   and returns a certificate for h2. h1 is expected to be the host that
   asks for the certificate. *) 
ONS_S {  
    OS13 (h1: host, h2: host) :=
	get keytbl (Khost,Rkey) suchthat Khost=h2 in
	return (Rkey, h2, sign(concat3(Rkey, h2), skS))}.

process 
(* This module generates keys for the certificate server *)
ONS_Keygen [pkS0 > pkS, skS0 > skS ] {
    OStart() :=
        let skp (pkS0:spkey,skS0:sskey) = kgen_s () in
	return (pkS0)};
	(run processA(pkS0) |
	 run processB(pkS0) | 
         (foreach i <= N do run processS(skS0)) |
	 (foreach i <= N2 do run processK))

(* EXPECTED
All queries proved.
1.840s (user 1.832s + system 0.008s), max rss 103744K
END *)
