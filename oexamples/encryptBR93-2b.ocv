(* encryption scheme by Bellare and Rogaway, Random Oracles are
Practical: a Paradigm for Designing Efficient Protocols, CCS'93, 
section 3.2: 
	E(x) = f(r) || H(r) xor x || H2(r || x) 
(CCA2) -- in progress *)

set interactiveMode = true.

(* The proof is as follows:

show_game occ
insert 99 let concat(xh2',xh2'') = xh2 in 
crypto rom(hash2)
crypto rom(hash)
remove_assign binder pk
crypto ow(f) r x_74
crypto remove_xor(xor) @7_r_151

The game should be transformed into a game that does not depend on menc,
but there is still a dependency somewhere!

We can then easily show that if menc is defined by 
"in(c, (m1,m2); new b1:bool; let menc = if b1 then m1 else m2"
then the secrecy of b1 is preserved.
(The system fails to show that directly; see encryptBR93-2.)

*)

param nx, qD.

type pkey [bounded].
type skey [bounded].
type keyseed [large,fixed].
type hasht [large,fixed].
type hasht2 [large,fixed].
type seed [large,fixed]. 

(* One-way trapdoor permutation *)

proba POW.

expand OW_trapdoor_perm(keyseed, pkey, skey, seed, pkgen, skgen, f, invf, POW).

(* Hash function, random oracle model *)

type hashkey [fixed].

expand ROM_hash(hashkey, seed, hasht, hash).

param qH [noninteractive].
let hashoracle = foreach iH <= qH do OH(x:seed) := return(hash(hk,x)).

(* Another hash function, random oracle model *)

expand ROM_hash(hashkey, bitstring, hasht2, hash2).

fun concat(seed,hasht):bitstring [compos].

param qH2 [noninteractive].
let hashoracle2 =
	foreach iH2 <= qH2 do
	OH2(xh2: bitstring) :=
	return(hash2(hk2,xh2)).

(* Xor *)

expand Xor(hasht, xor).

(* Queries *)

query secret1 menc.

let processD =
	foreach iD <= qD do
	OD(a:seed, b: hasht, c:hasht2) :=
        (* The attacker cannot call the decryption oracle on the test ciphertext *)
	find suchthat defined(aT,bT,cT) && a = aT && b = bT && c = cT then end else
	x <- invf(sk,a);
	m <- xor(hash(hk,x), b);
	if c = hash2(hk2,concat(x,m)) then
	return(m).

let processT = 
	OT(menc:hasht) :=
	x <-R seed;
	aT:seed <- f(pk,x);
	bT:hasht <- xor(hash(hk,x), menc);
	cT:hasht2 <- hash2(hk2,concat(x,menc));
	return(aT,bT,cT).

process 
	Ohkgen() :=
	hk <-R hashkey;
	hk2 <-R hashkey;
	return;	
	(hashoracle | hashoracle2 | 
	Ogen() :=
	r <-R keyseed; 
	pk <- pkgen(r);
	sk <- skgen(r);
	return(pk);
	(processD | processT))

