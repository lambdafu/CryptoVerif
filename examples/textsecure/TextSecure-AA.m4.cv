(* Sessions Alice with herself.
Proves secrecy, forward secrecy, and message authenticity, including
absence of replays for 4DH, or with a replay cache.
*)

set useKnownEqualitiesWithFunctionsInMatching = true.

proof {
ifdef(`FS',`
crypto uf_cma_corrupt(sign);
out_game "g1.cv" occ;
(* Case distinction inserted before new ephSecBA1: Z in RecvAKE_Alice *)
insert ifdef(`REPLAY_PROT',`284',`261') "find j <= Nsend suchthat defined (sephPubAB1[j]) && pow8(sephPubAB_1) = pow8(sephPubAB1[j]) && pow8(x_pubB_1) = pow8(pubA) then";
(* Case distinction inserted between "in(ch5" and "let g1n1" in SendAKE_Bob *) 
insert 67 "if pow8(x_pubA_1) = pow8(pubA) then";
crypto rom(H5);
out_game "g2.cv" occ;
(* Case distinction inserted before new ephSecBA2: Z in RecvAKE_Alice_3DH *)
insert ifdef(`REPLAY_PROT',`3782',`3759') "find j2 <= Nsend suchthat defined (sephPubAB1[j2]) && pow8(sephPubAB_2) = pow8(sephPubAB1[j2]) && pow8(x_pubB_2) = pow8(pubA) then";
(* Case distinction inserted after "in(ch7" in SendAKE_Bob *) 
insert 1020 "if pow8(x_pubA_2) = pow8(pubA) then";
',`
crypto uf_cma(sign);
out_game "g1.cv" occ;
(* Case distinction inserted before new ephSecBA1: Z in RecvAKE_Alice *)
insert ifdef(`REPLAY_PROT',`330',`307') "find j <= Nsend suchthat defined (sephPubAB1[j]) && pow8(sephPubAB_1) = pow8(sephPubAB1[j]) && pow8(x_pubB_1) = pow8(pubA) then";
(* Case distinction inserted between "in(ch5" and "let g1n1" in SendAKE_Bob *) 
insert 66 "if pow8(x_pubA_1) = pow8(pubA) then";
crypto rom(H5);
out_game "g2.cv" occ;
(* Case distinction inserted before new ephSecBA2: Z in RecvAKE_Alice_3DH *)
insert ifdef(`REPLAY_PROT',`4088',`4065') "find j2 <= Nsend suchthat defined (sephPubAB1[j2]) && pow8(sephPubAB_2) = pow8(sephPubAB1[j2]) && pow8(x_pubB_2) = pow8(pubA) then";
(* Case distinction inserted after "in(ch7" in SendAKE_Bob *) 
insert 1187 "if pow8(x_pubA_2) = pow8(pubA) then";
')
crypto rom(H4);
out_game "g3.cv";
crypto use_subgroup(gexp) secA0 sephSecAB1 ephSecAB1 ephSecBA1_2 ephSecBA1'_2 ephSecBA2_2 ephSecBA2'_2;
crypto gdh(gexp) "variables: secA0 -> a, sephSecAB1 -> a, ephSecAB1 -> a, ephSecBA1_2 -> a, ephSecBA1'_2 -> a, ephSecBA2_2 -> a, ephSecBA2'_2 -> a.";
crypto int_ctxt(enc) *;
crypto ind_cpa(enc) *;
success
}


type emkey [fixed,large]. 

type Z [bounded,large]. (* Exponents *)
type G [bounded,large]. (* Diffie-Hellman group *)
type subG [bounded,large]. (* Diffie-Hellman group *)

(* Type of principals *)
type prin [bounded].

(* Honest principals *)
const alice, bob: prin.

(* Gap Diffie-Hellman - curve25519 *)

proba PCollKey1.
proba PCollKey2.
proba PCollKey3.
proba PCollKey4.
expand DH_prime_subgroup_secret_keys_not_multiple_k(G, Z, g, gexp, gexp', gexpblock, mult, subG, g_k, gexp_sub, gexp_sub', pow8, PCollKey1, PCollKey2, PCollKey3, PCollKey4).
proba pGDH.
proba pSQGDH.
expand square_GDH_subgroup(G, Z, g, gexp, gexp', gexpblock, mult, subG, g_k, gexp_sub, gexp_sub', pow8, pGDH, pSQGDH).

(* Generate enc key - 4DH *)

type hashkey2 [large,fixed].
expand ROM_hash_quint(hashkey2, G, G, G, G, G, emkey, H5, hashoracle2, qH2).

(* Generate enc key - 3DH *)

type hashkey3 [large,fixed].
expand ROM_hash_quad(hashkey3, G, G, G, G, emkey, H4, hashoracle3, qH3).

(* End of key derivation functions *)

(* Signatures *)

type keyseed [large, fixed].
type pkey [bounded].
type skey [bounded].
type t_sign.
proba Psign.
proba Psigncoll.
expand UF_CMA_proba_signature(keyseed, pkey, skey, G, t_sign, skgen, pkgen, sign, checksign, Psign, Psigncoll).

(* AEAD *)

type t_data.
proba Penc.
proba Pencctxt.

expand AEAD(emkey, bitstring, bitstring, t_data, enc, dec, injbot, Zero, Penc, Pencctxt).

(* test(b,x,y) returns x when b = true and y when b is false *)

fun test(bool, bitstring, bitstring): bitstring.
equation forall x:bitstring,y:bitstring; test(true,x,y) = x.
equation forall x:bitstring,y:bitstring; test(false,x,y) = y.
equation forall b0:bool,x:bitstring; test(b0,x,x) = x.
equation forall b0:bool,x:bitstring,y:bitstring; Zero(test(b0,x,y)) = test(b0,Zero(x),Zero(y)).

const const1: bitstring.
fun concat5(G,pkey,G,pkey,G):t_data [data].


param Nsend, Nrecv, Nrecv2, Nrecv3, Nrecv4, Nsignedprekey, Nsignedprekey2.
channel start, ch0, recprin, outprin, chprin, ch1, ch2, ch3, ch4, ch5, ch6, ch7, ch8, ch9, ch10, ch11, ch12, ch13, ch14, ch15, ch16, ch17, ch18, ch19, ch20, ch21, ch22, ch23, ch24, ch25, ch26, ch27, ch28, ch29, cCorrupt.

(* Replay cache *)

table replaycache(G, G).

(* Security properties *)

event Send(G, pkey, G, pkey, G, G, G, G, bitstring).
event Recv(G, pkey, G, pkey, G, G, G, G, bitstring).
event Send3(G, pkey, G, pkey, G, G, G, bitstring).
event Recv3(G, pkey, G, pkey, G, G, G, bitstring).
(* Arguments of events 
   - public keys of sender (DH and signature)
   - public keys of receiver (DH and signature)
   - signed ephemeral
   - one-time ephemeral [for 4DH only]
   - sender first ephemeral
   - sender second ephemeral
   - sent message
*)

ifdef(`FS',`',`
query a0:G,as:pkey,b0:G,bs:pkey,sb:G,ob:G,a1:G,ob2:G,a12:G,a2:G,m:bitstring;
      inj-event(Recv(a0,as,b0,bs,sb,ob,a1,a2,m)) ==> inj-event(Send(a0,as,b0,bs,sb,ob2,a12,a2,m)) && pow8(ob) = pow8(ob2) && pow8(a1) = pow8(a12)
      public_vars secb.
query a0:G,as:pkey,b0:G,bs:pkey,sb:G,a1:G,a12:G,a2:G,m:bitstring;
      event(Recv3(a0,as,b0,bs,sb,a1,a2,m)) ==> event(Send3(a0,as,b0,bs,sb,a12,a2,m)) && pow8(a1) = pow8(a12)
      public_vars secb.

(* Without the anti-replay countermeasure, CryptoVerif should not
   prove the following query, because there is a replay attack.
   With the countermeasure, the replay attack disappears,
   so CryptoVerif should prove this query *)
query a0:G,as:pkey,b0:G,bs:pkey,sb:G,a1:G,a12:G,a2:G,m:bitstring;
      inj-event(Recv3(a0,as,b0,bs,sb,a1,a2,m)) ==> inj-event(Send3(a0,as,b0,bs,sb,a12,a2,m)) && pow8(a1) = pow8(a12) 
      public_vars secb.
')

query secret secb.

(* Bob generating prekeys and running the protocol, with Alice
   or with any other participant *)

let SendAKE_Bob(hk2: hashkey2, hk3: hashkey3, pubA: G, secB: Z, pubB: G, secBsign: skey, pubBsign: pkey) =
   (* Signed prekey *)
   in(ch1, ());
   new sephSecAB1: Z;
   let sephPubAB1: G = gexp(g, sephSecAB1) in
   let signature = sign(sephPubAB1, secBsign) in
   out(ch2, (sephPubAB1,signature));
   ((
   ! Nsignedprekey
   (* One-time prekey *)
   in(ch3, ());
   new ephSecAB1: Z;
   let ephPubAB = gexp(g, ephSecAB1) in
   out(ch4, ephPubAB);
   (* 2nd part of key exchange, 
      using prekey ephPubAB and signed prekey sephPubAB1 *)
   in(ch5, (x_pubA: G,x_pubAsign: pkey, ephPubBA: G, ephPubBA': G, msgenc: bitstring));
   let g1n1 = gexp(x_pubA,sephSecAB1) in
   let g2n1 = gexp(ephPubBA, secB) in
   let g3n1 = gexp(ephPubBA, sephSecAB1) in
   let g4n1 = gexp(ephPubBA, ephSecAB1) in
   let sharedn1 = gexp(ephPubBA', sephSecAB1) in
   let kENC = H5(hk2, g1n1, g2n1, g3n1, g4n1, sharedn1) in

   let injbot(msg) = dec(msgenc, concat5(x_pubA, x_pubAsign, pubB, pubBsign, ephPubBA'), kENC) in
   if pubA = x_pubA then
     event Recv(x_pubA,x_pubAsign,pubB,pubBsign,sephPubAB1,ephPubAB,ephPubBA,ephPubBA',msg)
   else
     out(ch5, msg)
   )|(
   ! Nsignedprekey2
   (* Version without the optional one-time prekey *)
   in(ch7, (x_pubA: G,x_pubAsign: pkey, ephPubBA: G, ephPubBA2: G, msgenc: bitstring));
ifdef(`REPLAY_PROT',`
   (* Protection against replays 
     	It is important to use the ephemeral ephPubBA2 in the replay cache,
	and not ephPubBA. 
	With curve25519, there can be 8 ephemerals yielding the same 
	Diffie-Hellman shared value, so a replay might be possible
	with a different ephemeral. It is indeed possible with ephPubBA,
	but not with ephPubBA2, because ephPubBA2 appears in the additional
	data of authenticated by encryption, so a modified ephPubBA2
	is rejected. *)
   get replaycache(=x_pubA, =ephPubBA2) in yield else
   insert replaycache(x_pubA, ephPubBA2);
')
   let g1n3 = gexp(x_pubA,sephSecAB1) in
   let g2n3 = gexp(ephPubBA, secB) in
   let g3n3 = gexp(ephPubBA, sephSecAB1) in
   let sharedn3 = gexp(ephPubBA2, sephSecAB1) in
   let kENC = H4(hk3, g1n3, g2n3, g3n3,sharedn3) in
   let injbot(msg) = dec(msgenc, concat5(x_pubA, x_pubAsign, pubB, pubBsign, ephPubBA2), kENC) in
   if pubA = x_pubA then
     event Recv3(x_pubA,x_pubAsign,pubB,pubBsign,sephPubAB1,ephPubBA,ephPubBA2,msg)
   else
     out(ch8, msg)
   )).

(* Alice using prekeys and sending a message to a participant (Bob or other).
   The received arguments x_pubB:G, x_pubBsign:pkey choose Alice's interlocutor. *)

let RecvAKE_Alice(hk2: hashkey2, secA: Z, pubA: G, pubAsign: pkey, pubB: G, pubBsign: pkey, secb1: bool) =
   (* Key exchange + send message m1 or m2 *)
   in(ch9,(x_pubB:G, x_pubBsign:pkey, sephPubAB:G,signature:t_sign,ephPubAB:G,(m1: bitstring, m2:bitstring)));
ifdef(`FS',`
   if defined(corrupted) then 
      (* The adversary can simulate Alice *)
      out(ch10, ())
   else
')
          new ephSecBA1: Z;
      	  let ephPubBA = gexp(g, ephSecBA1) in
      	  let g1n5 = gexp(sephPubAB, secA) in
      	  let g2n5 = gexp(x_pubB, ephSecBA1) in
      	  let g3n5 = gexp(sephPubAB, ephSecBA1) in
      	  let g4n5 = gexp(ephPubAB, ephSecBA1) in
	  new ephSecBA1': Z;
      	  let ephPubBA' = gexp(g, ephSecBA1') in
      	  let sharedn5 = gexp(sephPubAB, ephSecBA1') in
      	  let kENC = H5(hk2, g1n5, g2n5, g3n5, g4n5,sharedn5) in
      
          if x_pubB = pubB && x_pubBsign = pubBsign then
      	  (
	      (* Alice talks to Bob (= Alice herself in this file) *)
              if checksign(sephPubAB, x_pubBsign, signature) then
              (* Check that m1 and m2 have the same length *)
              if Zero(m1) = Zero(m2) then
              (* Send either m1 or m2 depending on the value of b *)
              let msg = test(secb1, m1, m2) in
              let cipher = enc(msg, concat5(pubA, pubAsign, x_pubB, x_pubBsign, ephPubBA'), kENC) in
              event Send(pubA,pubAsign,x_pubB,x_pubBsign,sephPubAB,ephPubAB,ephPubBA,ephPubBA',msg);
              out(ch10,(pubA, pubAsign, ephPubBA, ephPubBA', cipher))
          )
          else
          (
              (* Alice talks to a dishonest participant *)
              if checksign(sephPubAB, x_pubBsign, signature) then
	      if m1 = m2 then
	      let msg = m1 in
              let cipher = enc(msg, concat5(pubA, pubAsign, x_pubB, x_pubBsign, ephPubBA'), kENC) in
              out(ch10,(pubA, pubAsign, ephPubBA, ephPubBA', cipher))
          ).


let RecvAKE_Alice_3DH(hk3: hashkey3, secA: Z, pubA: G, pubAsign: pkey, pubB: G, pubBsign: pkey, secb1: bool) =
   (* Key exchange + send message m1 or m2 *)
   in(ch11,(x_pubB:G, x_pubBsign:pkey, sephPubAB:G,signature:t_sign,(m1: bitstring, m2:bitstring)));
ifdef(`FS',`
   if defined(corrupted) then 
      (* The adversary can simulate Alice *)
      out(ch12, ())
   else
')
          new ephSecBA2: Z;
      	  let ephPubBA = gexp(g, ephSecBA2) in
      	  let g1n6 = gexp(sephPubAB, secA) in
      	  let g2n6 = gexp(x_pubB, ephSecBA2) in
      	  let g3n6 = gexp(sephPubAB, ephSecBA2) in

	  new ephSecBA2': Z;
      	  let ephPubBA' = gexp(g, ephSecBA2') in
      	  let sharedn6 = gexp(sephPubAB, ephSecBA2') in
      	  let kENC = H4(hk3, g1n6, g2n6, g3n6,sharedn6) in

	  if x_pubB = pubB && x_pubBsign = pubBsign then
      	  (
	      (* Alice talks to Bob (= Alice herself in this file) *)
      	      if checksign(sephPubAB, x_pubBsign, signature) then
              (* Check that m1 and m2 have the same length *)
      	      if Zero(m1) = Zero(m2) then
      	      (* Send either m1 or m2 depending on the value of b *)
      	      let msg = test(secb1, m1, m2) in
	      let cipher = enc(msg, concat5(pubA, pubAsign, x_pubB, x_pubBsign, ephPubBA'), kENC) in
	      event Send3(pubA,pubAsign,x_pubB,x_pubBsign,sephPubAB,ephPubBA,ephPubBA',msg);
      	      out(ch12,(pubA, ephPubBA, ephPubBA', cipher))
          )
          else
          (
              (* Alice talks to a dishonest participant *)
              if checksign(sephPubAB, x_pubBsign, signature) then
	      if m1 = m2 then
	      let msg = m1 in
	      let cipher = enc(msg, concat5(pubA, pubAsign, x_pubB, x_pubBsign, ephPubBA'), kENC) in
      	      out(ch12,(pubA, ephPubBA, ephPubBA', cipher))
          ).


(* Corruption for forward secrecy *)

let corrupt(secA: Z, secAsign: skey) =
  in(cCorrupt, ()); 
  let corrupted:bool = true in
  out(cCorrupt, (secA, secAsign)).

process
    in(start, ());
    new secb: bool;
    new hk2: hashkey2;
    new hk3: hashkey3;
    new secA0:Z;
    let pubA = gexp(g,secA0) in
    new signAseed: keyseed;
    let secAsign = skgen(signAseed) in
    let pubAsign = pkgen(signAseed) in
    out(outprin,(pubA, pubAsign));
    (
      (!Nsend SendAKE_Bob(hk2, hk3, pubA, secA0, pubA, secAsign, pubAsign))
    | (!Nrecv RecvAKE_Alice(hk2, secA0, pubA, pubAsign, pubA, pubAsign, secb))
    | (!Nrecv3 RecvAKE_Alice_3DH(hk3, secA0, pubA, pubAsign, pubA, pubAsign, secb))
ifdef(`FS',`
    | corrupt(secA0, secAsign)
')
    | hashoracle2(hk2) | hashoracle3(hk3))

ifdef(`REPLAY_PROT',`
ifdef(`STD',`
(* EXPECTED
All queries proved.
31.196s (user 30.940s + system 0.256s), max rss 1053776K
END *)
',`
(* EXPECTED
All queries proved.
73.888s (user 73.444s + system 0.444s), max rss 2430016K
END *)
')
',`
ifdef(`STD',`
(* EXPECTED
RESULT Could not prove inj-event(Recv3(a0, as, b0, bs, sb, a1, a2, m)) ==> (inj-event(Send3(a0, as, b0, bs, sb, a12, a2, m)) && (pow8(a1) = pow8(a12))) with public variables secb.
39.424s (user 39.080s + system 0.344s), max rss 1387136K
END *)
',`
(* EXPECTED
All queries proved.
75.108s (user 74.624s + system 0.484s), max rss 2466208K
END *)
')
')
