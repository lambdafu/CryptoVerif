(* Version in which the participants only talk to A and B 
   Using two series of function symbols to prevent repeated applications
   of the same cryptographic rule.
*)
set interactiveMode = true.

(* The proof is
      auto
      remove_assign binder x_700    or   remove_assign useless [should be automated]
      success
      auto
      quit
*)

param N.
param N2.
param N3.

type tag [bounded].
type nonce [large,fixed].
type host [bounded].
type mkey [bounded].
type mkeyseed [fixed].
type key [large,fixed].
type keyseed [fixed].
type seed [fixed].
type maxenc [bounded].
type maxencnotag [bounded].

const tag1: tag.
const tag2: tag.
const tag3: tag.
const tag4: tag.

fun concat1(nonce, nonce, host, host):maxencnotag [compos].
fun concat2(nonce, key):maxencnotag [compos].
fun tagf(tag, maxencnotag):maxenc [compos].

(* Shared-key encryption (CPA Stream cipher) *)

proba Penc.
proba Pencptxt.

fun enc(maxenc, key, seed): bitstring.
fun kgen(keyseed):key.
fun dec(bitstring, key): bitstringbot.

fun enc2(maxenc, key, seed): bitstring.
fun kgen2(keyseed):key.
fun dec2(bitstring, key): bitstringbot.

fun injbot(maxenc):bitstringbot [compos].
const bottom:bitstringbot.
forall x:maxenc; injbot(x) <> bottom.

(* The function Z returns for each bitstring, a bitstring
   of the same length, consisting only of zeroes. *)
fun Z(maxenc):maxenc.
const Z1:maxenc.
const Z2:maxenc.


forall m:maxenc, r:keyseed, r2:seed; 
	dec(enc(m, kgen(r), r2), kgen(r)) = injbot(m).
forall u:tag, x:nonce, y:nonce, z:host, t:host; 
	Z(tagf(u,concat1(x,y,z,t))) = Z1.
forall u:tag, x:nonce, y:key; 
	Z(tagf(u,concat2(x,y))) = Z2.

	(* IND-CCA2 *)

equiv  ! N2 new r: keyseed; ((x:maxenc) N -> new r2: seed; enc(x, kgen(r), r2),
                             (y:bitstring) N3 -> dec2(y,kgen(r)))
     <=(N2 * Penc(time, N))=> 
       ! N2 new r: keyseed; ((x:maxenc) N -> new r2: seed; enc2(Z(x), kgen2(r), r2),
			     (y:bitstring) N3 -> 
				find j <= N suchthat defined(x[j],r2[j]) && y = enc2(Z(x[j]), kgen2(r), r2[j]) then injbot(x[j]) else dec2(y, kgen2(r))).

	(* INT-PTXT *)

equiv ! N2 new r: keyseed; ((x:maxenc) N -> new r2: seed; enc(x, kgen(r), r2),
			    (y:bitstring) N3 -> dec(y,kgen(r))) 
     <=(N2 * Pencptxt(time, N, N3))=> 
      ! N2 new r: keyseed; ((x:maxenc) N -> new r2: seed; enc(x, kgen(r), r2),
			    (y:bitstring) N3 -> 
				let z = dec2(y, kgen(r)) in
                                find j <= N suchthat defined(x[j]) && z = injbot(x[j]) then injbot(x[j]) else bottom).

(* Note: the system applies first INT-PTXT, then IND-CCA2 on the same key.
   After these two transformations, we end up with three cases at each decryption:
	a) the ciphertext comes from an encryption -> we get the cleartext x[j]
	b) the ciphertext does not come from an encryption, but decrypts to some encrypted cleartext x[j]
	   -> the cleartext is x[j], but we still have a test dec2(y,kgen2(r)) = injbot(x[j]), which would
	   prevent showing the secrecy of x[j]. This case gets eliminated by simplification thanks to
	   a dependency analysis: x[j] contains a nonce which is used only in such equality
	   tests, so the adversary has no information on this nonce. y comes from the adversary, so
	   the equality test is always wrong
	c) the decryption fails -> we get bottom
  *)

(* Queries *)

query secret1 keyA.
query secret1 keyB.

query secret keyA.
query secret keyB.

channel c1, c2, c3, c4, c5, c6, c7, c8, c9, start, finish.
const A : host.
const B : host.

event endA(host, host, nonce, key).
event endB(host, host, nonce, key).
event beginA(host, host, nonce).
event beginB(host, host, nonce).

query x:host, y:host, n:nonce, k:key; 
	event endA(x,y,n,k) ==> beginB(x,y,n).
query x:host, y:host, n:nonce, k:key; 
	event endB(x,y,n,k) ==> beginA(x,y,n).
query x:host, y:host, n:nonce, k:key; 
	event inj:endA(x,y,n,k) ==> inj:beginB(x,y,n).
query x:host, y:host, n:nonce, k:key; 
	event inj:endB(x,y,n,k) ==> inj:beginA(x,y,n).


let processA = 
	in(start, ());
	new M : nonce;
	new Na : nonce;
	new s1 : seed;
	let ea1 = enc(tagf(tag1, concat1(Na, M, A, B)), Kas, s1) in
	event beginA(A, B, M);
	out(c1, (M, A, B, ea1));
	in(c2, (=M, ea2: bitstring));
	let injbot(tagf(=tag3, concat2(=Na, k))) = dec(ea2, Kas) in
	event endA(A, B, M, k);
	let keyA:key = k.

let processB =
	in(c3, (M: nonce, =A, =B, ea:bitstring));
	new Nb : nonce;
	new s2 : seed;
	let e2 = enc(tagf(tag2, concat1(Nb, M, A, B)), Kbs, s2) in
	event beginB(A, B, M);
	out(c4, (M, A, B, ea, e2));
	in(c5, (=M, ea2: bitstring, eb2: bitstring));
	let injbot(tagf(=tag4, concat2(=Nb, k))) = dec(eb2, Kbs) in
	out(c6, (M, ea2));
	in(finish, ());
	event endB(A, B, M, k);
	let keyB:key = k.

let processS =
	in(c7, (M: nonce, =A, =B, ea1: bitstring, eb1: bitstring));
	let injbot(tagf(=tag1, concat1(Na, =M, =A, =B))) = dec(ea1, Kas) in
	let injbot(tagf(=tag2, concat1(Nb, =M, =A, =B))) = dec(eb1, Kbs) in
	new k: key;
	new s3: seed;
	new s4: seed;
	let e1 = enc(tagf(tag3, concat2(Na, k)), Kas, s3) in
	let e2 = enc(tagf(tag4, concat2(Nb, k)), Kbs, s4) in
	out(c8, (M, e1, e2)).
	
process 
	in(start, ());
	new rKas: keyseed;
	let Kas = kgen(rKas) in
	new rKbs: keyseed;
	let Kbs = kgen(rKbs) in
	out(c9, ());
	((! N processA) |
	 (! N processB) | 
	 (! N processS))
