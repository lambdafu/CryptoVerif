(* Analysing the HPKE Standard - Supplementary Material
   Joël Alwen; Bruno Blanchet; Eduard Hauck; Eike Kiltz; Benjamin Lipp; 
   Doreen Riepel

This is supplementary material accompanying the paper:

Joël Alwen, Bruno Blanchet, Eduard Hauck, Eike Kiltz, Benjamin Lipp,
and Doreen Riepel. Analysing the HPKE Standard. In Anne Canteaut and
Francois-Xavier Standaert, editors, Eurocrypt 2021, Lecture Notes in
Computer Science, pages 87-116, Zagreb, Croatia, October 2021. Springer.
Long version: https://eprint.iacr.org/2020/1499 *)

proof {
  allowed_collisions default^4/large;
   (* We allow eliminating collisions with probability in power 4 of 
      N, Qeperuser, Qdperuser, Qcperuser times PCollKey, to allow q^2 * PCollKey,
      where q = N * (Qeperuser + Qdperuser + Qcperuser) *)
  (* start on the left side *)
  crypto exclude_weak_keys(Z_t) **;
  out_game "l.out.cv";

  (* Preliminary work on the right-hand side. *)
  start_from_other_end;
  crypto exclude_weak_keys(Z_t) **;
  out_game "r.out.cv";
  simplify;
  (* We move the deserialization of the ciphertext earlier, so that the
     whole computation in OADecap deals with a deserialized ciphertext *)
  insert after "OADecap" "let Serialize(pkE_10) = cd in";
  all_simplify;
  out_game "r1.out.cv";

  (* Now we work on the left-hand side *)
  start_from_other_end;
  (* We introduce in OADecap the structure we have on the right-hand side. *)
  insert after "let Serialize(pkE_3"
    "find ie1_1 = ie1 <= Qeperuser, i1_3 = i1_2 <= N suchthat
      defined(zz_2[ie1, i1_2], enc_1[ie1, i1_2], x_1[i1_2], pk_R[ie1, i1_2])
      && (expnw(g, x_1) = pk_R[ie1, i1_2])
      && (expnw(g, x_1[i1_2]) = pk_S)
      && (enc_1[ie1, i1_2] = enc_2) then
    orfind id1_1 = id1 <= Qdperuser suchthat
      defined(random_br[id1], zz_3[id1], enc_2[id1], pk_S[id1])
      && (pk_S[id1] = pk_S)
      && (enc_2[id1] = enc_2) then
    else
      find i1_1 = i1 <= N suchthat
          defined(x_1[i1])
          && (pk_S = expnw(g, x_1[i1])) then
        random_br <- true";
  simplify;
  out_game "l1occ.out.cv" occ;
  (* Use correctness of the KEM: Replace the result of OADecap with a
     cleartext generated in OAEncap, in the first branch of the first
     find introduced above. *)
  replace
    at_nth 1 3 "return{[0-9]*}({[0-9]*}AuthDecap_Some({[0-9]*}zz_3))"
    "zz_2[ie1_1, i1_4]";
  remove_assign useless;
  out_game "l2occ.out.cv" occ;
  (* Replace the result of OADecap with the result of a previous call to
     OADecap, in the second branch of the first find introduced above *)
  replace
    at_nth 1 3 "return{[0-9]*}({[0-9]*}AuthDecap_Some({[0-9]*}zz_3))"
    "zz_3[id1_1]";
  (* Use unique names for the assignments of the following variables
     that are currently not unique *)
  SArename zz_3;
  SArename kemContext_3;
  remove_assign binder dh1_3;
  remove_assign binder dh2_3;
  remove_assign useless;
  (* In OAEncap, distinguish whether pk_R is an honest key or not *)
  insert after "OAEncap(pk_R"
    "find i1 <= N suchthat
      defined(x_1[i1])
      && pk_R = expnw(g, x_1[i1]) then";
  out_game "l3.out.cv";
  (* Use unique names for the assignments of the following variables
     that are currently not unique *)
  SArename x;
  SArename enc_1;
  SArename zz_2;
  SArename kemContext_2;
  remove_assign binder dh1_2;
  remove_assign binder dh2_2;
  out_game "l4.out.cv";
  crypto prf_odh(prf) x_1 x_4 .;
  all_simplify;
  crypto prf_convert(prf) **;
  crypto prf(prf2) **;
  all_simplify;
  SArename encoded_j'_2;
  SArename encoded_j'_1;
  all_simplify;
  out_game "l5.out.cv" occ;
  

  start_from_other_end;
  (* Now we work on the right-hand side *)
  remove_assign binder E_5;
  (* In OAEncap, distinguish whether pk_R is an honest key or not *)
  insert after "OAEncap(pk_R_1"
    "find i1 <= N suchthat
      defined(x_3[i1])
      && pk_R_1 = expnw(g, x_3[i1]) then";
  out_game "r1.out.cv";
  (* Use unique names for the assignments of the following variables
     that are currently not unique *)
  SArename x_2;
  SArename enc_6;
  SArename kemContext_7;
  SArename zz_7;
  remove_assign binder dh1_7;
  remove_assign binder dh2_7;
  remove_assign binder dh1_8;
  remove_assign binder dh2_8;
  out_game "r2.out.cv";
  crypto prf_odh(prf) x_3 x_11 .;
  all_simplify;
  crypto prf_convert(prf) **;
  crypto prf(prf2) **;
  all_simplify;
  SArename encoded_j'_18;
  SArename encoded_j'_17;
  all_simplify;
  out_game "r3.out.cv" occ;
  success
}

define(`square')
include(`common.dhkem.ocvl')

event AuthEncap_does_not_fail.

param N, Qeperuser, Qdperuser.

table E(G_t, G_t, bitstring, eae_output_t).

equivalence
      foreach i <= N do Osetup() := sk <-R Z_t; return(); (
        foreach ie <= Qeperuser do (
	  OAEncap(pk_R: G_t) :=
            return(AuthEncap(pk_R, skgen(sk)))) |
        foreach id <= Qdperuser do (
	  OADecap(pk_S: G_t, enc: bitstring) :=
            return(AuthDecap(enc, skgen(sk), pk_S))) |
	(* The next oracle gives the public key to the adversary *)
        Opk() := return(pkgen(sk))
	)

      foreach i <= N do Osetup() := sk <-R Z_t; return(); (
        foreach ie <= Qeperuser do (
	  OAEncap(pk_R: G_t) :=
            let AuthEncap_tuple(k: eae_output_t, ce: bitstring) = AuthEncap(pk_R, skgen(sk)) in (
	      insert E(pkgen(sk), pk_R, ce, k);
              return(AuthEncap_tuple(k, ce))
            ) else (
              (* Never happens because AuthEncap always returns AuthEncap_tuple(...) *)
              return(AuthEncap_None)
            )) |
        foreach id <= Qdperuser do (
	  OADecap(pk_S: G_t, cd: bitstring) :=
	    get E(=pk_S, =pkgen(sk), =cd, k'') in (
              return(AuthDecap_Some(k''))
            ) else (
	        (* This "find" checks whether pk_S is among the honest public keys pk_i *)
                find i1 <= N suchthat defined(sk[i1]) && pk_S = pkgen(sk[i1]) then (
                  let AuthDecap_Some(k0) = AuthDecap(cd, skgen(sk), pk_S) in ( 
                    k' <-R eae_output_t;
		    insert E(pk_S, pkgen(sk), cd, k');
                    return(AuthDecap_Some(k'))
                  ) else (
                    return(AuthDecap_None)
                  )
                ) else (
                  return(AuthDecap(cd, skgen(sk), pk_S))
                )
          )) |
        Opk() := return(pkgen(sk))
        )

(* EXPECTED FILENAME: examples/hpke/PRFODH/dhkem.auth.outsider-auth-lr.m4.ocv TAG: 1
All queries proved.
0.924s (user 0.916s + system 0.008s), max rss 30176K
END *)
