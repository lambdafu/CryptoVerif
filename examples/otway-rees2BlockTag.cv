(* Version in which the participants only talk to A and B *)

param N.
param N2.
param N3.

(* Bitstrings of size exactly the block size *)
type blocksize [large,fixed].
type blocksizeltag [fixed].

type tag [bounded].
type nonce [large,fixed].
type host [bounded].
type key [large,fixed].
type keyseed [fixed].

const tag1: tag.
const tag2: tag.
const tag3: tag.
const tag4: tag.

(* Concat1 and concat2 already include the necessary padding to reach the block size *)
fun concat1(nonce, nonce, host, host):blocksizeltag [compos].
fun concat2(nonce, key):blocksizeltag [compos].
fun tagf(tag, blocksizeltag):blocksize [compos].

(* Shared-key encryption (Block cipher) *)

proba Penc.

expand SPRP_cipher(keyseed, key, blocksize, kgen, enc, dec, Penc).

(* Queries *)

query secret1 keyA.
query secret1 keyB.
query secret keyA.
query secret keyB.

channel c1, c2, c3, c4, c5, c6, c7, c8, c9, start, finish.
const A : host.
const B : host.

event endA(host, host, nonce, key).
event endB(host, host, nonce, key).
event beginA(host, host, nonce).
event beginB(host, host, nonce).

query x:host, y:host, n:nonce, k:key; 
	event endA(x,y,n,k) ==> beginB(x,y,n).
query x:host, y:host, n:nonce, k:key; 
	event endB(x,y,n,k) ==> beginA(x,y,n).
query x:host, y:host, n:nonce, k:key; 
	event inj:endA(x,y,n,k) ==> inj:beginB(x,y,n).
query x:host, y:host, n:nonce, k:key; 
	event inj:endB(x,y,n,k) ==> inj:beginA(x,y,n).


let processA = 
	in(start, ());
	new M : nonce;
	new Na : nonce;
	event beginA(A, B, M);
	let ea1 = enc(tagf(tag1, concat1(Na, M, A, B)), Kas) in
	out(c1, (M, A, B, ea1));
	in(c2, (=M, ea2: blocksize));
	let tagf(=tag3, concat2(=Na, k)) = dec(ea2, Kas) in
	event endA(A, B, M, k);
	let keyA:key = k.

let processB =
	in(c3, (M: nonce, =A, =B, ea:blocksize));
	new Nb : nonce;
	event beginB(A, B, M);
	let e2 = enc(tagf(tag2, concat1(Nb, M, A, B)), Kbs) in
	out(c4, (M, A, B, ea, e2));
	in(c5, (=M, ea2: blocksize, eb2: blocksize));
	let tagf(=tag4, concat2(=Nb, k)) = dec(eb2, Kbs) in
	out(c6, (M, ea2));
	in(finish, ());
	event endB(A, B, M, k);
	let keyB:key = k.

let processS =
	in(c7, (M: nonce, =A, =B, ea1: blocksize, eb1: blocksize));
	let tagf(=tag1, concat1(Na, =M, =A, =B)) = dec(ea1, Kas) in
	let tagf(=tag2, concat1(Nb, =M, =A, =B)) = dec(eb1, Kbs) in
	new k: key;
	let e1 = enc(tagf(tag3, concat2(Na, k)), Kas) in
	let e2 = enc(tagf(tag4, concat2(Nb, k)), Kbs) in
	out(c8, (M, e1, e2)).
	
process 
	in(start, ());
	new rKas: keyseed;
	let Kas = kgen(rKas) in
	new rKbs: keyseed;
	let Kbs = kgen(rKbs) in
	out(c9, ());
	((! N processA) |
	 (! N processB) | 
	 (! N processS))

(* EXPECTED
RESULT Could not prove event inj:endB(x, y, n, k) ==> inj:beginA(x, y, n).
0.090s (user 0.070s + system 0.020s), max rss 32176K
END *)
