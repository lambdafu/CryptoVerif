(* Needham Schroeder public key protocol. *)

set backtrackOnCrypto = true.
(* set interactiveMode = true. *)

(* The proof is found automatically thanks to backtracking, but that's
very slow. A faster version with manual indications is in
needham-schroeder-pkcorr3BlockHash *)

param N.
param N2.
param N3.
param N4.

type nonce [large,fixed].
type host [bounded].
type pkey [bounded].
type skey [bounded].
type keyseed [large,fixed].
type seed [fixed].
type spkey [bounded].
type sskey [bounded].
type skeyseed [large,fixed].
type sseed [fixed].
type signature [bounded].
type blocksize [fixed].
type blocksizebot [bounded].
type sblocksize [fixed].
type shkey [fixed].

fun concat1(nonce, host):blocksize [compos].
fun concat2(nonce, nonce, host):blocksize [compos].
fun concat3(pkey, host):sblocksize [compos].
fun pad(nonce):blocksize [compos].

forall z:nonce,t:nonce,u:host,y2:nonce,z2:host;
	concat2(z,t,u) <> concat1(y2,z2).
forall y:nonce,y2:nonce,z2:host;
	pad(y) <> concat1(y2,z2).
forall z:nonce,t:nonce,u:host,y2:nonce;
	concat2(z,t,u) <> pad(y2).

(* Public-key encryption (CCA2) *)

proba Penc.
proba Penccoll.

expand IND_CCA2_public_key_enc(keyseed, pkey, skey, blocksize, bitstring, seed, skgen, pkgen, enc, dec, injbot, Z, Penc, Penccoll).

(* Signatures *)

proba Psign.
proba Psigncoll.

expand UF_CMA_signature(skeyseed, spkey, sskey, sblocksize, signature, sseed, sskgen, spkgen, sign, check, Psign, Psigncoll).

(* Hash function, random oracle model *)

type hashkey [fixed].

expand ROM_hash(hashkey, bitstring, shkey, hash).

param qH [noninteractive].
channel hc1, hc2.
let hashoracle = ! qH in(hc1, x: bitstring); out(hc2, hash(hk,x)).

(* Queries *)

query secret1 keyA.
query secret1 keyB.
query secret keyA.
query secret keyB.

channel c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, 
	c15, c16, c17, c18, c19, start, finish.
const A : host.
const B : host.

let processA =
	in(c1, hostX: host);
	out(c2, (A, hostX));
	in(c3, (pkX: pkey, =hostX, ms: signature));
	if check(concat3(pkX, hostX), pkS, ms) then
	(* Message 3 *)
        new Na: nonce;
	new r3: seed;
        out(c4, enc(concat1(Na, A), pkX, r3));
	(* Message 6 *)
        in(c5, m: bitstring);
	let injbot(concat2(=Na, Nb, =hostX)) = dec(m, skA) in
	(* Message 7 *)
	new r4: seed;
	out(c6, enc(pad(Nb), pkX, r4));
	(* OK *)
	in(finish, ());
	let k = hash(hk, (Na,Nb)) in
	if hostX = B then
	(
	let keyA:shkey = k
	)
	else out(c16, k).

let processB =
	(* Message 3 *)
	in(c7, m:bitstring);
	let injbot(concat1(Na, hostY)) = dec(m, skB) in
	out(c8, (B, hostY));
	in(c9, (pkY: pkey, =hostY, ms: signature));
	if check(concat3(pkY, hostY), pkS, ms) then
	(* Message 6 *)
	new Nb: nonce;
	new r5: seed;
	out(c10, enc(concat2(Na, Nb, B), pkY, r5));
	(* Message 7 *)
	in(c11, m3: bitstring);
	let injbot(pad(=Nb)) = dec(m3, skB) in
	(* OK *)
	let k = hash(hk, (Na,Nb)) in
	if hostY = A then
	(
	let keyB: shkey = k
	)
	else out(c17, k).

let processK =
	in(c12, (Khost: host, Kkey: pkey));
	let Rkey:pkey = 
		if Khost = A then pkA else
		if Khost = B then pkB else
		Kkey.

let processS = 
	in(c13, (h1: host, h2: host));
	find j2 <= N2 suchthat defined(Khost[j2],Rkey[j2]) && (Khost[j2] = h2) then
	new r3: sseed;
	out(c14, (Rkey[j2], h2, sign(concat3(Rkey[j2], h2), skS, r3))).

process 
	in(start, ());
	new hk: hashkey;
	new rkA: keyseed;
	let pkA = pkgen(rkA) in
	let skA = skgen(rkA) in
	new rkB: keyseed;
	let pkB = pkgen(rkB) in
	let skB = skgen(rkB) in
	new rkS: skeyseed;
	let pkS = spkgen(rkS) in
	let skS = sskgen(rkS) in
	out(c15, (pkA, pkB, pkS));
	((! N processA) |
	 (! N processB) | 
	 (! N processS) |
	 (! N2 processK) | hashoracle)


(* EXPECTED
All queries proved.
196.970s (user 196.710s + system 0.260s), max rss 876368K
END *)
