(* One-Encryption Key Exchange - forward secrecy

   We obtain the probability:
   (NU + NS)/|passwd| + pGDH(time_1, 3(qH1 + qH0)) + O(t_A^2)/|hash1| + O(t_A^2)/|G|,
   where t_A is the runtime of the adversary
   This is optimal except for the constants in O(t_A^2) and possibly the arguments of pGDH.

   The hash, encryption, and decryption queries are performed by the adversary,
   so qH0, qH1, qE, qD \in O(t_A).

   NP is the number of sessions of the protocol the adversary passively observes,
   NP << t_A

   NS and NU are the number of sessions of the server/user the adversary
   actively interferes with. NS, NU << NP.

   |Z| = |G| = p-1 where the Diffie-Hellman group has prime order p.
   (G excludes the neutral element, Z excludes 0.) *)

(* Proof indications *)

proof {
set autoMove = false;
allowed_collisions noninteractive^2/large;
   (* Allow eliminating collisions of probability q^2 / |Z|, q^2 / |G|, q^2 / |hash1|,
   where q is a number of queries (qH0, qH1, qE, qD, NS, NU, NP):
   |G|, |Z|, |hash1| are considered to be large
   q^3/|G| or q/|passwd| are not allowed.

   Since q \in O(t_A) and |Z| = |G|, we will get terms for probabilities of collisions
   O(t_A^2)/|hash1| + O(t_A^2)/|G|.

   *)
success; (* proof of event(acceptU(x,X,y,Ystar,a,k,u)) && event(acceptU(x,X,y,Ystar,a,k',u')) ==> u = u' *)
show_game;
insert after "OH(" "let concat(x01,x02,x03,x04,x05) = x1 in"; (* just after OH(..) := *)
crypto rom(h0);
insert after "OH_1" "let concat(x11,x12,x13,x14,x15) = x1_1 in"; (* just after OH_1(..):= *)
crypto rom(h1);
insert after "OS2" "if defined(xcorrupt) then else find j <= NU suchthat defined(X[j]) && X[j] = X_s then else find jh <= qH1 suchthat defined(x11[jh], x12[jh], x13[jh], x14[jh], r_6[jh]) && (U = x11[jh]) && (S = x12[jh]) && (X_s = x13[jh]) && (Y = x14[jh]) && (auth_s = r_6[jh]) then event_abort Auth"; (* just after OS2(..):= , in else branch of "if defined(xcorrupt) then" *)
simplify;
insert after "OC2" "if defined(xcorrupt) then";
crypto icm(enc);
show_game;
insert_event Encrypt after_nth 2 "pw0 = ke\\["; (* beginning of the branch "find ... && (pw0 = ke[..]) then .." in OC2, in else branch of "if defined(xcorrupt) then" *)
show_game;
crypto group_to_exp_strict(exp) *;
(* We rewrite the "find" at the beginning of OH_1, to capture exactly the
conditions that can be eliminated by CDH. The conditions are of the form: 
i,j suchthat defined(x[i], y[j]) && (x14 = exp(g, x[i])) && (x13 = exp(g, y[j])) && (x12 = S) && (x11 = U) && (x15 = exp(g, mult(x[i], y[j])))
for some exponents x,y. That allows eliminating similar conditions in the rest of the game.
- We test x15 = exp(g, mult(x[i], y[j])) as last condition, so that the test is executed only when x13 and x14 are the right public keys. CryptoVerif then realizes that the test is made for a single i,j for each hash query.
 *)
show_game;
insert before "find \\[unique\\] u_23 "
  "          find ri_7 <= NU, ri_8 <= NU suchthat defined(x[ri_7], X[ri_7], x_3[ri_8]) && (x14 = exp(g, x_3[ri_8])) && (x13 = X[ri_7]) && (x12 = S) && (x11 = U) && (x15 = exp(g, mult(x_3[ri_8], x[ri_7]))) then
            event_abort cdh
          orfind ri_7 <= NU, ri_8 <= NU suchthat defined(x[ri_7], X[ri_7], x_4[ri_8]) && (x14 = exp(g, x_4[ri_8])) && (x13 = X[ri_7]) && (x12 = S) && (x11 = U) && (x15 = exp(g, mult(x_4[ri_8], x[ri_7]))) then
            event_abort cdh
          orfind ri_7 <= NU, ri_9 <= qD suchthat defined(x[ri_7], X[ri_7], x_2[ri_9]) && (x14 = exp(g, x_2[ri_9])) && (x13 = X[ri_7]) && (x12 = S) && (x11 = U) && (x15 = exp(g, mult(x_2[ri_9], x[ri_7]))) then
            event_abort cdh
          orfind ri_7 <= NU, ri_10 <= NS suchthat defined(x[ri_7], y[ri_10], X[ri_7], Y[ri_10]) && (x14 = Y[ri_10]) && (x13 = X[ri_7]) && (x12 = S) && (x11 = U) && (x15 = exp(g, mult(y[ri_10], x[ri_7]))) then
            event_abort cdh
          orfind ri_7 <= NU, ri_11 <= NP suchthat defined(x[ri_7], yp[ri_11], X[ri_7], Yp[ri_11]) && (x14 = Yp[ri_11]) && (x13 = X[ri_7]) && (x12 = S) && (x11 = U) && (x15 = exp(g, mult(yp[ri_11], x[ri_7]))) then
            event_abort cdh
          orfind ri_6 <= NP suchthat defined(yp[ri_6], xp[ri_6], Xp[ri_6], Yp[ri_6]) && (x14 = Yp[ri_6]) && (x13 = Xp[ri_6]) && (x12 = S) && (x11 = U) && (x15 = exp(g, mult(xp[ri_6], yp[ri_6]))) then
            event_abort cdh";
(* We rewrite the "find" at the beginning of OH in a similar way *)
insert before "find \\[unique\\] u_7 "
  "          find ri_69 <= NU, ri_70 <= NU suchthat defined(X[ri_69], x[ri_69], x_3[ri_70]) && (x04 = exp(g, x_3[ri_70])) && (x03 = X[ri_69]) && (x02 = S) && (x01 = U) && (x05 = exp(g, mult(x_3[ri_70], x[ri_69]))) then
            event_abort cdh
          orfind ri_69 <= NU, ri_70 <= NU suchthat defined(X[ri_69], x[ri_69], x_4[ri_70]) && (x04 = exp(g, x_4[ri_70])) && (x03 = X[ri_69]) && (x02 = S) && (x01 = U) && (x05 = exp(g, mult(x_4[ri_70], x[ri_69]))) then
            event_abort cdh
          orfind ri_67 <= NU, ri_71 <= qD suchthat defined(X[ri_67], x[ri_67], x_2[ri_71]) && (x04 = exp(g, x_2[ri_71])) && (x03 = X[ri_67]) && (x02 = S) && (x01 = U) && (x05 = exp(g, mult(x_2[ri_71], x[ri_67]))) then
            event_abort cdh
          orfind ri_65 <= NU, ri_92 <= NS suchthat defined(X[ri_65], Y[ri_92], x[ri_65], y[ri_92]) && (x04 = Y[ri_92]) && (x03 = X[ri_65]) && (x02 = S) && (x01 = U) && (x05 = exp(g, mult(y[ri_92], x[ri_65]))) then
            event_abort cdh
          orfind ri_63 <= NU, ri_73 <= NP suchthat defined(X[ri_63], Yp[ri_73], x[ri_63], yp[ri_73]) && (x04 = Yp[ri_73]) && (x03 = X[ri_63]) && (x02 = S) && (x01 = U) && (x05 = exp(g, mult(yp[ri_73], x[ri_63]))) then
            event_abort cdh";
simplify;
success; (* Prove secrecy and authentication, the probabilities of events cdh, Auth, Encrypt are still to bound. However, the probabilities that follow will not be multiplied by 2 for secrecy *)

crypto gdh(exp);
success; (* Bound event cdh *)
success simplify; (* Remove compromise, since after compromise, the adversary cannot execute Auth nor Encrypt *)

crypto exp'_to_group(exp) *;
SArename r_4;
show_game;
move array X_5; (* variable chosen at the end of OC2 and not used immediately *)
merge_arrays X_1 Y_1;
merge_branches;
move array X_2; (* variable chosen in OP and not used immediately *)
(*show_game;
merge_arrays X_1 Y_...;
merge_branches;*)
move array X_4; (* variable chosen in OS1 and not used immediately *)
(*show_game;
merge_arrays X_1 Y_1;*)
show_game;
insert before "find jh" "find jh' <= qH1, jd <= qD suchthat defined(x11[jh'], x12[jh'], x13[jh'], x14[jh'], r_6[jh'], m[jd], kd[jd], X_1[jd]) && (m[jd] = md_O_enc) && (U = x11[jh']) && (S = x12[jh']) && (X_s = x13[jh']) && (x14[jh'] = X_1[jd]) && (auth_s = r_6[jh'])  && (kd[jd] = pw0) then event_abort Auth2";
simplify;
merge_branches;
allowed_collisions noninteractive^2/large, small/password;
(* Allow eliminating collisions with probability 
   (NU + NS)/|passwd| since NU and NS are small and |passwd| is of size password.
   These collisions are not eliminated automatically because |passwd| is too small,
   they need to be explicitly requested by simplify coll_elim(variables: pw0) below.
 *)
simplify coll_elim(variables: pw0);
success
}

(* Parameter and type declarations *)

param NU, NS [small].
param NP [passive].

type Z [large, bounded].
type G [large, bounded].
type passwd [password, bounded].

type hash0 [fixed].
type hash1 [fixed,large].
type host [bounded].

(* Computational Diffie-Hellman *)

expand DH_good_group(G, Z, g, exp, exp', mult).
proba pGDH.
letproba pZero = 0.
expand GDH_RSR(G, Z, g, exp, exp', mult, pGDH, pZero).

(* Ideal cipher model *)

type cipherkey [fixed].

expand ICM_cipher(cipherkey, passwd, G, enc, dec, enc_dec_oracle, qE, qD).

(* Hash functions in the random oracle model *)

type hashkey [fixed].

fun concat(host, host, G, G, G): bitstring [data].

expand ROM_hash(hashkey, bitstring, hash0, h0, hashoracle0, qH0).

expand ROM_hash_large(hashkey, bitstring, hash1, h1, hashoracle1, qH1).

(* Host names *)

const U : host.
const S : host.

(* Acceptation results *)

const AcceptHonest: bitstring.
fun AcceptAttacker(hash0): bitstring [data].

(* Queries *)

query secret sk_u_secret.

event termS(host, G, host, G, hash1, hash0).
event acceptU(host, G, host, G, hash1, hash0, NU).
event corrupt.

query x:host, X:G, y:host, Ystar:G, a: hash1, k:hash0, u <= NU;
	inj-event(termS(x,X,y,Ystar,a,k)) ==> inj-event(acceptU(x,X,y,Ystar,a,k,u)) || event(corrupt)
	public_vars sk_u_secret.
query x:host, X:G, y:host, Ystar:G, a: hash1, k:hash0, k':hash0, u <= NU, u' <= NU;
	event(acceptU(x,X,y,Ystar,a,k,u)) && event(acceptU(x,X,y,Ystar,a,k',u')) ==> u = u'
	public_vars sk_u_secret.

(* Client *)

let processU(hk0: hashkey, hk1: hashkey, ck: cipherkey, pw: passwd) =
	foreach iU <= NU do 
	OC1() :=
	x <-R Z;
	X:G <- exp(g,x);
	return(U, X);
	OC2(=S, Ystar_u: G) :=
	Y_u <- dec(ck, Ystar_u, pw);
	K_u <- exp(Y_u, x);
	auth_u: hash1 <- h1(hk1,concat(U,S,X,Y_u,K_u));
	sk_u: hash0 <- h0(hk0,concat(U,S,X,Y_u,K_u));
	event acceptU(U, X, S, Ystar_u, auth_u, sk_u, iU);
	return(auth_u);
	OC3() := 
	if defined(xcorrupt) then 
	  return(sk_u)
	else
	  sk_u_secret: hash0 <- sk_u.

(* Server *)

let processS(hk0: hashkey, hk1: hashkey, ck: cipherkey, pw: passwd) =
	foreach iS <= NS do 
	OS1(=U, X_s: G) :=
	y <-R Z;
	Y <- exp(g,y);
	Ystar <- enc(ck, Y, pw);
	return(S, Ystar);
	OS2(auth_s: hash1) :=
	K_s <- exp(X_s, y);
	if auth_s = h1(hk1,concat(U,S,X_s,Y,K_s)) then
	sk_s: hash0 <- h0(hk0,concat(U,S,X_s,Y,K_s));
	event termS(U, X_s, S, Ystar, auth_s, sk_s);
	find j <= NU suchthat defined(X[j], Ystar_u[j], auth_u[j], sk_u[j]) &&
	  X[j] = X_s && Ystar_u[j] = Ystar && auth_u[j] = auth_s && sk_u[j] = sk_s then
	  return(AcceptHonest)
	else
	  (* if defined(xcorrupt) then *) return(AcceptAttacker(sk_s)).


(* Sessions that are subject only to a passive attack.
   We send a transcript of the session *)

let processPassive(hk0: hashkey, hk1: hashkey, ck: cipherkey, pw: passwd) =
	foreach iP <= NP do 
	OP() :=
	xp <-R Z;
	Xp <- exp(g, xp);
	yp <-R Z;
	Yp <- exp(g, yp);
	Kp <- exp(g, mult(xp,yp));
	Ystarp <- enc(ck, Yp, pw);
	authp <- h1(hk1, concat(U, S, Xp, Yp, Kp));
	sk_p: hash0 <- h0(hk0, concat(U, S, Xp, Yp, Kp));
	return(U, Xp, S, Ystarp, authp).


(* Corruption *)

let processCorrupt(pw: passwd) =
        Ocorrupt() :=
	event corrupt();
	xcorrupt: bool <- true;
	return(pw).

process 
	Ostart() :=
	hk0 <-R hashkey;
	hk1 <-R hashkey;
	ck <-R cipherkey;
	pw0 <-R passwd;
	return;
	(run processU(hk0, hk1, ck, pw0) |
	 run processS(hk0, hk1, ck, pw0) |
	 run processPassive(hk0, hk1, ck, pw0) |
	 run processCorrupt(pw0) |
	 run enc_dec_oracle(ck) | run hashoracle0(hk0) | run hashoracle1(hk1))

(* Results

Let q = qE + qD + qH0 + qH1 + NS + NU + NP = O(t_A). 
I can overapproximate the probabilities as follows:
Proved 
event(acceptU(x,X,y,Ystar,a,k,u)) && event(acceptU(x,X,y,Ystar,a,k',u')) ==> u = u'
with public variable sk_u_secret up to probability NU^2/2|G|

Proved
inj-event(termS(x,X,y,Ystar,a,k)) ==> inj-event(acceptU(x,X,y,Ystar,a,k,u)) || event(corrupt)
with public variable sk_u_secret up to probability 
(NU + NS) / |passwd| + pGDH(time_1, 3(qH1 + qH0)) + K q^2 / |G| + (qH1^2 + NS + 2 NU) / |hash1| 
Proved secrecy of sk_u_secret up to probability 
(NU + NS) / |passwd| + pGDH(time_1, 3(qH1 + qH0)) + 2K q^2 / |G| + (qH1^2 + 2 NS + 4 NU) / |hash1| 

*)


(* EXPECTED
All queries proved.
8.404s (user 8.384s + system 0.020s), max rss 72876K
END *)
