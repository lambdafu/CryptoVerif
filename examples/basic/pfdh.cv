(* PFDH signature scheme
   The prover finds the same probability as for FDH, not the better
   reduction by J.S.Coron. This is ok, because we do not give the
   hypothesis of random self-reducibility.
 *)

(* Example updated from CV 1.28 by Benjamin Beurdouche *)

(*
set interactiveMode = true.

Proof:

crypto hash
crypto mf r r_35 r_38
crypto f r
success

The prover finds the proof automatically, like for fdh, but is unable to find
the better reduction which exists for this scheme...
*)

param qS.

type pkey [bounded].
type skey [bounded].
type keyseed [large,fixed].
type seed [(*large,*)fixed].
type D [large,fixed].

(* One-way trapdoor permutation *)
proba pOW.
expand OW_trapdoor_perm(keyseed, pkey, skey, D, pkgen, skgen, f, mf, pOW).

(* Hash function, random oracle model *)

type hashkey [fixed].
expand ROM_hash_large(hashkey, bitstring, D, hash, hashoracle, qH).

(* Queries *)
event bad.
query event(bad) ==> false.

(* Channels and Processes *)
channel c0, c1, c2, c3, c4, c5, start.

let processS(hk:hashkey, sk:skey) =
	! qS
	in(c1, m:bitstring);
	new sr:seed;
	out(c2, (sr,mf(sk, hash(hk, (m,sr))))).

let processT(hk:hashkey, pk:pkey) =
	in(c3, (m2:bitstring, sr:seed, s:D));
	if f(pk, s) = hash(hk, (m2,sr)) then
	find j <= qS suchthat defined(m[j]) && (m2 = m[j]) then yield else
	event bad.

process
	(in(start, ());
	new hk: hashkey;
	new r:keyseed;
	let sk = skgen(r) in
	let pk = pkgen(r) in
	out(c0, pk);
	(hashoracle(hk) | processS(hk,sk) | processT(hk,pk)))

(* EXPECTED
All queries proved.
0.080s (user 0.072s + system 0.008s), max rss 17520K
END *)
