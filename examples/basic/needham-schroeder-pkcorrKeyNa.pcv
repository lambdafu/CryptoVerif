(* Needham Schroeder public key protocol. *)

ifdef(`ProVerif',`
(* Parameter required to prove the second and third queries. *)
set preciseActions = true.
')

(* Example updated from CV 1.28 by Benjamin Beurdouche *)

proof {
crypto uf_cma(sign) rkS;
success; (* proves event(fullB(A, k, x)) && event(fullA(B, k', x)) ==> (k = k') *)
restart;
out_game "g0.cv";
(* The next transformations execute a "bad" event in case the authentication property fullB ==> fullA fails. 
   The main goal of these transformations is to remove the initial events fullA and fullB, which contain Na.
   After these transformations, Na no longer occurs in events and that allows CryptoVerif
   to delay the generation of Na and to prove that equalities Na = ... cannot hold. *)
insert before "event fullB" "if hostY = A then find jA <= NA suchthat defined(hostX[jA], Na_1[jA], m1[jA], m_6[jA], m3_1[jA]) && hostX[jA] = B && Na_1[jA] = Na_2 && m1[jA] = m_8 && m_6[jA] = m2 && m3_1[jA] = m3_2 then else event_abort bad_auth_full";
simplify;
success; (* proves inj-event(fullB(A, k, x)) ==> inj-event(fullA(B, k, x)) public_vars keyA, but requires proving event(bad_auth_full) ==> false *)
(* Use the cryptographic assumptions *)
crypto uf_cma(sign) rkS;
crypto ind_cca2(enc) rkA;
crypto ind_cca2(enc) rkB;
simplify;
success
}

(* The simpler proof:
proof {
crypto uf_cma(sign) rkS;
crypto ind_cca2(enc) rkA;
crypto ind_cca2(enc) rkB;
success;
auto
}
fails (it proves no property at all).
*)

param NA, NB, NS, NK.

type nonce [large,fixed].
type host [bounded].
type pkey [bounded].
type skey [bounded].
type keyseed [large,fixed].
type spkey [bounded].
type sskey [bounded].
type skeyseed [large,fixed].
type signature [bounded].
type blocksize [fixed].
type blocksizebot [bounded].
type sblocksize [bounded].

(* Concatenation and Padding functions *)
fun concat1(nonce, host):blocksize [data].
fun concat2(nonce, nonce, host):blocksize [data].
fun concat3(pkey, host):sblocksize [data].
fun pad(nonce):blocksize [data].

equation forall z:nonce,t:nonce,u:host,y2:nonce,z2:host;
	concat2(z,t,u) <> concat1(y2,z2).
equation forall y:nonce,y2:nonce,z2:host;
	pad(y) <> concat1(y2,z2).
equation forall z:nonce,t:nonce,u:host,y2:nonce;
	concat2(z,t,u) <> pad(y2).

(* Public-key encryption (CCA2) *)
proba Penc.
proba Penccoll.
expand IND_CCA2_public_key_enc(keyseed, pkey, skey, blocksize, bitstring, skgen, pkgen, enc, dec, injbot, Z, Penc, Penccoll).

const Zblocksize: blocksize.
equation forall x: blocksize; Z(x) = Zblocksize.

(* Signatures *)
proba Psign.
proba Psigncoll.
expand UF_CMA_proba_signature(skeyseed, spkey, sskey, sblocksize, signature, sskgen, spkgen, sign, check, Psign, Psigncoll).

table keys(host, pkey).

(* Peers *)
const A : host.
const B : host.
fun acceptA(host):bitstring.
fun acceptB(host):bitstring.

(* Queries and Events *)
event fullA(host, nonce, bitstring).
event partA(host, bitstring).
event fullB(host, nonce, bitstring).
event partB(host, bitstring).

query secret keyA.
query x:bitstring; inj-event(partA(B, x)) ==> inj-event(partB(A, x)) public_vars keyA.
query x:bitstring, k:nonce; inj-event(fullB(A, k, x)) ==> inj-event(fullA(B, k, x)) public_vars keyA.
query x:bitstring, k:nonce, k':nonce;
	event(fullB(A, k, x)) && event(fullA(B, k', x)) ==> (k = k') public_vars keyA.

(* Channel and Processes *)
channel c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14,
	c15, c16, c17, c18, c19, start, finish.

let processA(skA:skey, pkS:spkey) =
	in(c1, hostX: host);
	out(c2, (A, hostX));
	in(c3, (pkX: pkey, =hostX, ms: signature));
	if check(concat3(pkX, hostX), pkS, ms) then
	(* Message 3 *)
	new Na: nonce;
	let m1 = enc(concat1(Na, A), pkX) in
        out(c4, m1);
	(* Message 6 *)
        in(c5, m: bitstring);
	let injbot(concat2(=Na, Nb, =hostX)) = dec(m, skA) in
	(* Message 7 *)
	let m3 = enc(pad(Nb), pkX) in
	event partA(hostX, (m1, m));
	event fullA(hostX, Na, (m1, m, m3));
	if hostX = B then
	   let keyA:nonce = Na in out(c6, (m3, acceptA(hostX)))
	else
	   out(c6, (m3, acceptA(hostX))); in(c18, =()); out(c18, Na).

let processB(skB:skey, pkS:spkey) =
	(* Message 3 *)
	in(c7, m:bitstring);
	let injbot(concat1(Na, hostY)) = dec(m, skB) in
	out(c8, (B, hostY));
	in(c9, (pkY: pkey, =hostY, ms: signature));
	if check(concat3(pkY, hostY), pkS, ms) then
	(* Message 6 *)
	new Nb: nonce;
	let m2 = enc(concat2(Na, Nb, B), pkY) in
	event partB(hostY, (m, m2));
	out(c10, m2);
	(* Message 7 *)
	in(c11, m3: bitstring);
	let injbot(pad(=Nb)) = dec(m3, skB) in
	(* OK *)
	event fullB(hostY, Na, (m, m2, m3));
	if hostY = A then
	   out(c17, acceptB(hostY))
	else
      out(c17, acceptB(hostY)); in(c19, =()); out(c19, Na).

let processK(pkA:pkey, pkB:pkey) =
	in(c12, (Khost: host, Kkey: pkey));
	if Khost = A then insert keys(A, pkA) else
	if Khost = B then insert keys(B, pkB) else
	insert keys(Khost, Kkey).

let processS(skS:sskey) =
	in(c13, (h1: host, h2: host));
	get keys(=h2, pk2) in
	out(c14, (pk2, h2, sign(concat3(pk2, h2), skS))).

process
	in(start, ());
	new rkA: keyseed;
	let pkA = pkgen(rkA) in
	let skA = skgen(rkA) in
	new rkB: keyseed;
	let pkB = pkgen(rkB) in
	let skB = skgen(rkB) in
	new rkS: skeyseed;
	let pkS = spkgen(rkS) in
	let skS = sskgen(rkS) in
	out(c15, (pkA, pkB, pkS));
	((! iA <= NA processA(skA,pkS)) |
	 (! iB <= NB processB(skB,pkS)) |
	 (! iS <= NS processS(skS)) |
	 (! iK <= NK processK(pkA,pkB)))

(* EXPECTED
All queries proved.
2.664s (user 2.652s + system 0.012s), max rss 33132K
END *)

(* EXPECTPV
RESULT secret keyA is true.
RESULT inj-event(partA(B,x)) ==> inj-event(partB(A,x)) public_vars keyA is true.
RESULT inj-event(fullB(A,k,x)) ==> inj-event(fullA(B,k,x)) public_vars keyA is true.
RESULT event(fullB(A,k,x)) && event(fullA(B,k',x)) ==> k = k' public_vars keyA is true.
0.120s (user 0.116s + system 0.004s), max rss 13512K
END *)
