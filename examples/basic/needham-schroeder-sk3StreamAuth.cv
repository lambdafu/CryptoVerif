(* Needham Schroeder shared key protocol.
   Corrected version.
   With messages of key confirmation, in order to prove correspondence
   properties.
 *)

param N.
param N2.
param N3.

type nonce [large,fixed].
type host [bounded].
type mkey [bounded].
type mkeyseed [fixed].
type key [fixed].
type keyseed [fixed].
type seed [fixed].
type macs [fixed].

(* Key generation *)
expand keygen(keyseed, key, kgen).

(* Shared-key encryption (CPA Stream cipher) *)
proba Penc.
proba Pencctxt.
(* expand IND_CPA_sym_enc(keyseed, key, bitstring, bitstring, seed, kgen, enc, dec, injbot, Z, Penc). *)
expand IND_CPA_INT_CTXT_sym_enc(key, bitstring, bitstring, enc, dec, injbot, Z, Penc, Pencctxt).

(* Mac *)
(* proba Pmac. *)
(* expand UF_CMA_mac(mkeyseed, mkey, bitstring, macs, mkgen, mac, check, Pmac). *)

(* Concatenation functions *)
fun concat1(nonce, host, (*mkey,*) key, (*macs,*) bitstring):bitstring [compos].
fun concat2(host, nonce):bitstring [compos].
fun concat3((*mkey,*) key, host):bitstring [compos].

equation forall (*m:mkey,*)y:key,z:host,(*m2:mkey, *)y2:nonce,z2:host,t2:key,(*u2:macs,*)v2:bitstring;
	concat3((*m,*)y,z) <> concat1(y2,z2,(*m2,*)t2,(*u2,*)v2).
equation forall z:host,t:nonce,y2:nonce,z2:host,(*m2:mkey,*)t2:key,(*u2:macs,*)v2:bitstring;
	concat2(z,t) <> concat1(y2,z2,(*m2,*)t2,(*u2,*)v2).
equation forall z:host,t:nonce,(*m2:mkey,*)y2:key,z2:host;
	concat2(z,t) <> concat3((*m2,*)y2,z2).

fun minusone(nonce):nonce [compos].
equation forall x:nonce; minusone(x) <> x.

fun nonceToBitstring(nonce):bitstring [compos].

(* The function Z returns for each bitstring, a bitstring
   of the same length, consisting only of zeroes. *)
fun Zconcat1(bitstring):bitstring.
const Zconcat2:bitstring.
const Zconcat3:bitstring.
equation forall y:nonce,z:host,(*m:mkey,*)t:key,(*v:macs,*)u:bitstring;
	Z(concat1(y,z,(*m,*)t,(*v,*)u)) = Zconcat1(Z(u)).
equation forall y:host,z:nonce;
	Z(concat2(y,z)) = Zconcat2.
equation forall (*m:mkey,*)y:key,z:host;
	Z(concat3((*m,*)y,z)) = Zconcat3.
equation forall m:bitstring, r:keyseed;
	Z(enc(m, kgen(r))) = Z(m).

(* Peers *)
const A : host.
const B : host.
fun acceptA(host):bitstring.
fun acceptB(host):bitstring.

(* Queries and Events *)
event partA(host, bitstring).
event fullA(host, bitstring).
event partB(host, bitstring).
event fullB(host, bitstring).

query x:bitstring; inj-event(partA(B,x)) ==> inj-event(partB(A,x)).
query x:bitstring; inj-event(fullB(A,x)) ==> inj-event(fullA(B,x)).

(* Channels and Processes *)
channel c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14,
	c15, c16, c17, start, finish.

let processA(Kas:key) =
	in(c1, (h: host));
        new Na: nonce;
        out(c3, (A, h, Na)); (* To server *)
        in(c4, (m2: bitstring(*, mac2: macs*))); (* From server *)
	(* if check(m2, mKas, mac2) then *)
        let injbot(concat1(=Na, =h, (*mk,*) k, (*mac3,*) m)) = dec(m2, Kas) in
	out(c5, (m(*, mac3*))); (* To B *)
	in(c15, (e4:bitstring(*, m4:macs*))); (* From B *)
	(* if check(e4, mk, m4) then *)
	let injbot(nonceToBitstring(Nb)) = dec(e4, k) in
	(* new r4:seed;*)
	let e5 = enc(nonceToBitstring(minusone(Nb)), k(*, r4*)) in
	(* let m5 = mac(e5,mk) in *)
	event partA(h, (m,e4));
	event fullA(h, (m,e4,e5));
	out(c16, (e5, (*m5,*) acceptA(h))).

let processB(Kbs:key) =
	in(c8, (m4: bitstring(*, mac4: macs*)));
	(*if check(m4, mKbs, mac4) then *)
	let injbot(concat3((*mk,*) k, h)) = dec(m4, Kbs) in
	new Nb:nonce;
	(* new r3:seed; *)
	let e3 = enc(nonceToBitstring(Nb), k(*, r3*)) in
	(* let m3 = mac(e3,mk) in *)
	event partB(h, ((*m4,*)e3));
	out(c14, (e3(*, m3*)));
	in(c17, (e6:bitstring(*, m6:macs*)));
	(* if check(e6, mk, m6) then *)
	if injbot(nonceToBitstring(minusone(Nb))) = dec(e6, k) then
	event fullB(h, ((*m4,*)e3,e6));
	out(c13, acceptB(h)).

let processK(Kas:key, Kbs:key) =
	in(c9, (Khost: host, Kkey: key(*, Kmkey: mkey*)));
	let Rkey:key =
		if Khost = A then Kas else
		if Khost = B then Kbs else
		Kkey.
	(*in
	let Rmkey:mkey =
		if Khost = A then mKas else
		if Khost = B then mKbs else
		Kmkey.*)

let processS =
	in(c10, (h1: host, h2: host, n: nonce));
	find j1 <= N2 suchthat defined(Khost[j1],(*Rmkey[j1],*)Rkey[j1]) && (Khost[j1] = h1) then
	find j2 <= N2 suchthat defined(Khost[j2],(*Rmkey[j2],*)Rkey[j2]) && (Khost[j2] = h2) then
	new kseed: keyseed;
	let k = kgen(kseed) in
	(* new mkseed: mkeyseed;*)
	(* let mk = mkgen(mkseed) in *)
	(* new r3: seed; *)
	let e3 = enc(concat3((*mk,*) k, h1), Rkey[j2](*, r3*)) in
	(* let mac3 = mac(e3, Rmkey[j2]) in *)
	(* new r4: seed; *)
	let e4 = enc(concat1(n, h2, (*mk,*) k, (*mac3,*) e3), Rkey[j1](*, r4*)) in
	out(c11, (e4(*, mac(e4, Rmkey[j1])*))).

process
	in(start, ());
	new rKas: keyseed;
	let Kas = kgen(rKas) in
	(* new rmKas: mkeyseed; *)
	(* let mKas = mkgen(rmKas) in *)
	new rKbs: keyseed;
	let Kbs = kgen(rKbs) in
	(* new rmKbs: mkeyseed; *)
	(* let mKbs = mkgen(rmKbs) in *)
	out(start, ());
	((! N processA(Kas)) |
	 (! N processB(Kbs)) |
	 (! N processS) |
	 (! N2 processK(Kas,Kbs)))


(* EXPECTED
All queries proved.
3.360s (user 3.340s + system 0.020s), max rss 120640K
END *)
