(* Example updated from CV 1.28 by Benjamin Beurdouche *)

(* Trivial running example for conference paper. *)
param NA, NB.

type mkey [bounded].
type mkeyseed [fixed].
type key [fixed].
type keyseed [fixed].
type seed [fixed].
type macs [bounded].

fun keyToBitstring(key):bitstring [data].

(* Shared-key generation *)
expand keygen(keyseed, key, kgen).

(* Shared-key encryption (CPA Stream cipher) *)
proba Penc.
expand IND_CPA_sym_enc(key, bitstring, bitstring, enc, dec, injbot, Z, Penc).

(* The function Z returns for each bitstring, a bitstring
   of the same length, consisting only of zeroes. *)
const Zkey : bitstring.
equation forall y:key;
	Z(keyToBitstring(y)) = Zkey.

(* Mac key generation *)
expand keygen(mkeyseed, mkey, mkgen).

(* Mac *)
proba Pmac.
expand SUF_CMA_proba_mac(mkey, bitstring, macs, mac, check, Pmac).

(* Queries *)
query secret k2 [cv_onesession].
query secret k3 [cv_onesession].

query secret k2.
query secret k3.

(* Channels and Processes *)
channel cA, cB, start, c.

let processA(Kab:key, mKab:mkey) =
	in(cA, ());
	new k2 : key;
	let ea1 = enc(keyToBitstring(k2), Kab) in
	out(cA, (ea1, mac(ea1, mKab))).

let processB(Kab:key, mKab:mkey) =
	in(cB, (ea:bitstring, ma:macs));
	if check(ea, mKab, ma) then
	let injbot(keyToBitstring(k3:key)) = dec(ea, Kab) in
	out(cB, ()).

process
	in(start, ());
	new rKab: keyseed;
	let Kab = kgen(rKab) in
	new rmKab: mkeyseed;
	let mKab = mkgen(rmKab) in
	out(c, ());
	((! NA processA(Kab,mKab)) |
	 (! NB processB(Kab,mKab)))

(* EXPECTED
RESULT Could not prove secrecy of k3.
0.064s (user 0.064s + system 0.000s), max rss 16840K
END *)
