(* ARINC 823 
AMS protocol using a shared secret key
described in Attachment 8 of the ARINC specification 823 Part I. 

CryptoVerif model. *)

(**** Declarations of types, constants, and function symbols ****)

(* Type for session ids, used internally in the model to distinguish
   each session of the protocol. *)

type session_ids [large, fixed].

(* Type of 32 bits numbers *)

type t_Rand32 [large, fixed]. 

(* Ids 
U = aircraft
V = ground entity *)

type t_id [fixed]. (* 8 bytes = 64 bits entity type, AMS_EntityType *)
const U, V: t_id.

(* AMS Message elements *)

type t_AMS_elem.
type t_software_part_number.
type t_policy_id.
type t_algo_bits [fixed].

fun buildAMS10_s_init_info(t_software_part_number, t_policy_id, t_id, t_id): t_AMS_elem [data].
fun buildAMS40_entity_id(t_id, t_id): t_AMS_elem [data].
fun buildAMS41_comp_algo_id(t_algo_bits): t_AMS_elem [data].
fun buildAMS42_comp_algo_sel(t_algo_bits): t_AMS_elem [data].
    (* The first bit is 1 when DMC level 0 is supported.
       The second bit is 1 when DMC level 1 is supported.
       The third bit is 1 when DEFLATE is supported.
       We ignore algorithms reserved for future use. *)

fun payload_with_1_element(t_AMS_elem): bitstring [data].
fun concat_AMS_element(t_AMS_elem, bitstring): bitstring [data].

(* Encoding algorithms *)

type t_encode_algo [fixed]. (* 2 bits *)

const encode_OFF, encode_B64, encode_B64PAD, encode_B128: t_encode_algo.

fun encode(t_encode_algo, bitstring): bitstring.
fun decode(t_encode_algo, bitstring): bitstring.

equation forall encode_algo: t_encode_algo, payload:bitstring; 
      decode(encode_algo, encode(encode_algo, payload)) = payload.

(* encode is injective *)
equation forall encode_algo: t_encode_algo, payload1:bitstring, payload2:bitstring; 
      (encode(encode_algo, payload1) = encode(encode_algo, payload2)) = (payload1 = payload2).

(* Compression *)

type t_comp_algo [fixed]. (* 4 bits, Value of the CompMode field *)

const comp_OFF, comp_DMC0, comp_DMC1, comp_DEFLATE: t_comp_algo.

fun compress(t_comp_algo, bitstring): bitstring.
fun decompress(t_comp_algo, bitstring): bitstring.

equation forall comp_algo: t_comp_algo, payload:bitstring; 
      decompress(comp_algo, compress(comp_algo, payload)) = payload.

fun bool_and(t_algo_bits, t_algo_bits): t_algo_bits.
fun select_common_compression(t_AMS_elem, t_comp_algo): t_comp_algo.

(* Algorithms *)

type t_AMS_AlgID [bounded]. (* 16 bits *)
type t_MAClen [bounded]. (* 4 bits *)
type t_AuthAlgo [bounded]. (* 4 bits *)
type t_EncAlgo [bounded]. (* 8 bits *)

fun algo(t_MAClen, t_AuthAlgo, t_EncAlgo): t_AMS_AlgID [data].

const MAClen32, MAClen64, MAClen128: t_MAClen.
const HMAC_SHA256: t_AuthAlgo.
const NULL_enc, AES128_CFB128: t_EncAlgo.

fun get_common_enc_algo(t_EncAlgo): t_EncAlgo.
(* The protocol satisfies authentication independently of the definition of this function.
   letfun get_common_enc_algo(enc_algo: t_EncAlgo) = 
      if enc_algo = AES128_CFB128 then AES128_CFB128 else NULL_enc. *)

(* Policy types *)

type t_AMS_Policy [fixed]. (* 2 bits *)

const NONE, AUTH, BOTH: t_AMS_Policy.

fun get_policy(t_policy_id, bitstring): t_AMS_Policy.
     (* The definition of the policy is left implicit in this model.
     	get_policy(policy_id, msg) is supposed to 
	determine the expected policy to apply to the message msg 
	from the message msg itself and the policy identifier policy_id. *)

fun get_protect_mode(t_AMS_Policy, t_EncAlgo): t_AMS_Policy.
(* The protocol satisfies authentication independently of the definition of this function.
   letfun get_protect_mode(policy: t_AMS_Policy, enc_algo: t_EncAlgo) =
       if enc_algo = NULL_enc && policy = BOTH then AUTH else policy.

   If the security policy specifies the BOTH protection mode
   and the selected encryption is NULL, then ProtectMode is set to AUTH.
   In all other cases, ProtectMode is the protection mode
   specified in the security policy. *)

(* Protocol ids *)

type t_AMS_PID [bounded]. (* 1 byte, "1" or "2" *)

const ams_pid1 (* public-key protocol *), ams_pid2 (* shared-key protocol *): t_AMS_PID.

(* Commands *)

type t_Cmd [fixed]. (* 4 bits *)

const Data_IND, Info_IND, DataCnf_IND, Release_REQ, Release_RSP_Minus, 
      Release_RSP_Plus, Init_IND, Init_REQ, Init_RSP_Minus, Init_RSP_Plus,
      Abort_IND: t_Cmd.

fun ok_tunnel(t_Cmd): bool.
equation ok_tunnel(Init_IND) = false.
equation ok_tunnel(Init_REQ) = false.
equation ok_tunnel(Init_RSP_Minus) = false.
equation ok_tunnel(Init_RSP_Plus) = false.

(* Counter *)

type t_Count [fixed].

const Count1: t_Count.
const Count_unspecified: t_Count. 
      (* Used as a dummy value to fill the count argument
      	 of event recv_msg when the message is sent unprotected. *)

(* MAC *)

type mac_key [large, fixed].

proba PPRF. 
      (* PPRF(t, qMAC, l, qKDF256, qKDF128) is the probability of 
         distinguishing MAC, KDF256, and KDF128 from independent pseudo-random
	 functions in time t, with qMAC, qKDF256, qKDF128 queries to
	 MAC, KDF256, and KDF128 respectively, with MAC queries of length
	 at most l. *)

(* sessionMAC is SUF-CMA for each of the 3 lengths *)

expand SUF_CMA_MAC_3lengths(t_MAClen, MAClen32, MAClen64, MAClen128,
       mac_key, sessionMAC, PPRF).

(* Encryption *)

type enc_key [large, fixed]. (* 128 bits *)
type t_IVdata [fixed].

type byte [fixed]. (* 1 byte = 8 bits *)
const CstDN: byte. (* 0x00 *)
const CstUP: byte. (* 0x01 *)
fun buildIVdata(byte, t_Count): t_IVdata [data].

expand encryption_IV_no_hyp(enc_key, t_IVdata, E', D').

(* encryption is IND-CPA provided IVdata is distinct
   for each encryption --- This property is needed only for
   secrecy. *)

(* Hash function HASH is collision resistant *)

type t_SHA256_out [large, fixed]. (* 256 bits, output of SHA256 *)

type hash_key [large,fixed].
proba Phash.
expand CollisionResistant_hash(hash_key, bitstring, t_SHA256_out, HASH, hashoracle, Phash).

type t_AMS_Appendix.
fun concat_hash(t_AMS_Appendix, t_Rand32): bitstring [data].

(* KDF256, KDF128 are independent random oracles *)
type hash_key1 [large,fixed].
expand ROM_hash_4(hash_key1, mac_key, t_SHA256_out, t_id, t_id, mac_key, KDF256, KDF256_oracle, qH1).

type hash_key2 [large,fixed].
expand ROM_hash_4(hash_key2, mac_key, t_SHA256_out, t_id, t_id, enc_key, KDF128, KDF128_oracle, qH2).

(* MAC is HMAC_SHA256, it is collision resistant *)

fun MAC(mac_key, bitstring): t_SHA256_out.

param qMAC, qColl.
fun MAC2(mac_key, bitstring): t_SHA256_out.
fun MAC2collision(mac_key, bitstring, bitstring): bool.

(* This equality allows simplification to automatically transform
   x = y into MAC2collision(k,m1,m2) when x = MAC2(k,m1) and y = MAC2(k,m2).
   Without this equality, the transformation of x = y into MAC2(k, m1)
   = MAC2(k, m2) is not automatically done by the cryptographic
   transformation because x = y can (apparently) be discharged without
   doing anything since it does not contain k. *)
equation forall k: mac_key, m1: bitstring, m2: bitstring;
       (MAC2(k, m1) = MAC2(k, m2)) = MAC2collision(k,m1,m2).

param N.

equiv
	! N new k: mac_key;
	(! qMAC O_mac(m: bitstring) := return(MAC2(k, m)) |
	 ! qColl O_coll(m1: bitstring, m2: bitstring) [useful_change] := return(MAC2collision(k, m1, m2)))
<=(N * ((12 * qColl + 4 * qColl * qColl * N + 4 * qColl * N * qMAC + qMAC * qMAC * N) / |t_SHA256_out| + 
        2 * PPRF(time + (N-1) * (qMAC + 2 * qColl) * time(MAC, max(maxlength(m), maxlength(m2), maxlength(m1))),
	         qMAC + 2 * qColl, max(maxlength(m), maxlength(m2), maxlength(m1)), 0, 0)))=>
	! N new k: mac_key;
	(! qMAC O_mac(m: bitstring) := return(MAC2(k, m)) |
	 ! qColl O_coll(m1: bitstring, m2: bitstring) := return(m1 = m2)).
	

(* Time *)

type t_AMS_Time [fixed].

fun check_time(t_AMS_Time, t_AMS_Time): bool.
     (* check_time(tU, tV) is supposed to check that 
     	tV - 60 seconds <= tU <= tV + 120 seconds. *)

table table_timesU(t_id, t_AMS_Time).
      (* table used to remember all times tU at which the
      	 aircraft started a session, to prevent it from	
	 starting two sessions with the same tU. *)
table table_timesV(t_id, t_AMS_Time).
      (* table used to remember all times tV at which the
      	 ground entity sent a trigger, to prevent it from	
	 sending two triggers with the same tV. *)

(* Tables for replay protection for Init_IND and Init_REQ messages *)

table received_Init_IND_table(t_id, t_AMS_Time).
table received_Init_REQ_table(t_id, t_AMS_Time).

(* Table for keys K_UV *)

table key_table(t_id, t_id, mac_key).

(* Supplementary address type *)

type t_AMS_SuppAddr.

(* Session identifiers *)

type t_SID [fixed]. (* 3 bits *)
const SID0, SID1, SID2, SID3, SID4, SID5: t_SID.

(* Building AMS messages *)

type t_AMS_IMI. (* empty or "PM1." *)
type t_AMS_ID.

(* t_AMS_SuppAddr has variable length, but starts with / and ends with .
   so it can be distinguished from the PID, and its length can be determined. *)
fun buildAMS_id1(t_AMS_SuppAddr, t_AMS_IMI, t_AMS_PID): t_AMS_ID [data].
fun buildAMS_id2(t_AMS_PID): t_AMS_ID [data].

type t_AMS_Header. (* 2 bytes = 16 bits *)

fun buildAMS_Header(bool (*R1 parameter, ignored*), t_AMS_Policy, t_encode_algo, t_SID, t_comp_algo, t_Cmd): t_AMS_Header [data].

fun buildAMS_msg_prefix1(t_AMS_ID, t_AMS_Header, bitstring): bitstring [data].
fun buildAMS_msg_prefix_Init(bitstring, t_AMS_AlgID, t_AMS_Time): bitstring [data].
fun buildAMS_msg_prefix_RSP(bitstring, t_AMS_AlgID, t_AMS_Time, t_Rand32, t_Count): bitstring [data].
fun buildAMS_msg_prefix_TBP_RSP(bitstring, t_AMS_AlgID, t_AMS_Time, t_Rand32, t_Count, t_AMS_Appendix): bitstring [data].
fun buildAMS_msg_prefix_Rest(bitstring, t_Count): bitstring [data].

fun buildMAC_arg(t_id, t_id, bitstring): bitstring [data].
fun build_msg_Init(bitstring, t_SHA256_out): bitstring [data].
fun buildAMS_appendix_Init(t_AMS_AlgID, t_AMS_Time, t_SHA256_out): t_AMS_Appendix [data].
fun concat(bitstring, bitstring): bitstring. (* concatenation; it is NOT data, because the
    		      		  	     	lengths of the two concatenated bitstrings is not known. *)
fun split_message(t_MAClen, bitstring): bitstring.
    			    		(* split_message(l, m) returns a pair (m1, m2) such that
					   m is the concatenation of m1 and m2, and m2 has length l.
					   In this protocol, m2 is the MAC, m1 is the rest of the message. *)

(* Tables of message counters
   We simulate a distinct table for each session by
   adding a unique session identifier as first argument. *)

table received_count_table(session_ids, t_Count).
table sent_count_table(session_ids, t_Count).

(**** Security properties ****)

(* Authenticity of the payload messages, when the policy is not NONE *)

event send_msg(t_id, t_id, t_AMS_Time, t_Rand32, t_policy_id, t_AMS_Policy, t_EncAlgo, t_Count, bitstring).
event recv_msg(t_id, t_id, t_AMS_Time, t_Rand32, t_policy_id, t_AMS_Policy, t_EncAlgo, t_Count, bitstring).

(* Freshness of the AMS_Init_REQ message; 
   authentication of the aircraft to the ground entity *)

event send_Init_REQ(t_id, t_id, bitstring, t_AMS_Time).
event recv_Init_REQ(t_id, t_id, bitstring, t_AMS_Time, t_AMS_Time).

(* Authentication of the ground entity to the aircraft *)

event send_Init_RSP(t_id, t_id, bitstring, bitstring, t_Rand32, t_AMS_Time, t_AMS_Time, mac_key, enc_key).
event recv_Init_RSP(t_id, t_id, bitstring, bitstring, t_Rand32, t_AMS_Time, mac_key, enc_key).

(* Freshness of the AMS_Init_IND message (ground-initiated trigger) *)

event send_Init_IND(t_id, t_id, bitstring, t_AMS_Time).
event recv_Init_IND(t_id, t_id, bitstring, t_AMS_Time, t_AMS_Time).

(* Detection of bilateral UKS attacks *)

query Ux: t_id, Vx: t_id, x: bitstring, mac: bitstring, RandV: t_Rand32, tU: t_AMS_Time, tV: t_AMS_Time, KMAC_UV: mac_key, KENC_UV: enc_key,
      Ux2: t_id, Vx2: t_id, x2: bitstring, mac2: bitstring, RandV2: t_Rand32, tU2: t_AMS_Time, KMAC_UV2: mac_key;
      event(send_Init_RSP(Vx, Ux, x, mac, RandV, tU, tV, KMAC_UV, KENC_UV)) &&
      event(recv_Init_RSP(Ux2, Vx2, x2, mac2, RandV2, tU2, KMAC_UV2, KENC_UV)) ==> Ux = Ux2 && Vx = Vx2.

query Ux: t_id, Vx: t_id, x: bitstring, mac: bitstring, RandV: t_Rand32, tU: t_AMS_Time, tV: t_AMS_Time, KMAC_UV: mac_key, KENC_UV: enc_key,
      Ux2: t_id, Vx2: t_id, x2: bitstring, mac2: bitstring, RandV2: t_Rand32, tU2: t_AMS_Time, KENC_UV2: enc_key;
      event(send_Init_RSP(Vx, Ux, x, mac, RandV, tU, tV, KMAC_UV, KENC_UV)) &&
      event(recv_Init_RSP(Ux2, Vx2, x2, mac2, RandV2, tU2, KMAC_UV, KENC_UV2)) ==> Ux = Ux2 && Vx = Vx2.

(* NOTE: In the correspondence above, the Init_RSP message is split into
   two arguments: the message prefix (message without its MAC), x, and the MAC, m.
   As mentioned in the file arinc823-secret-key.AUTHENTICATION.m4.cv, 
   this change facilitates the proof of authentication in CryptoVerif because we 
   do not need to express that the concatenation of the prefix and 
   the MAC is injective once the length of the MAC is known.
   We use the same arguments as in that file for uniformity. *)

(* Secrecy -- see arinc823-secret-key.SECRECY.cv *)

(**** The protocol ****)

param Nentity, Nmessage, Nk.
channel c_gen1, c_gen2, c_entity0, c_entity0', c_aircraft1, c_aircraft2, c_aircraft3, c_aircraft4, 
	c_ground1, c_ground2, c_ground_initiated_trigger1, c_ground_initiated_trigger2,
	c_aircraft_react_ground_initiated_trigger1, c_aircraft_react_ground_initiated_trigger2,
	choicechannel, pub, ck.

(* The process tunnel_protocol models the secure session data exchange
   (Attachment 8, Section 8.3) *)

let tunnel_protocol(current_session_id: session_ids,
    		    ams_pid: t_AMS_PID, common_comp_algo_id: t_AMS_elem, policy_id: t_policy_id,
    	            tU: t_AMS_Time, RandV: t_Rand32, KMAC_UV: mac_key, KENC_UV: enc_key,
    	            MAClen: t_MAClen, common_enc_algo: t_EncAlgo, sid: t_SID, 
		    dir_send: byte, dir_recv: byte,
		    my_id: t_id, other_id: t_id) =
(
    (* Sender side *)
    ! Nmessage
    in(choicechannel, (AMS_payload: bitstring, 
    		       encode_alg: t_encode_algo, comp_algo: t_comp_algo,
		       ams_dstaddr: t_AMS_SuppAddr, ams_imi: t_AMS_IMI, 
		       count: t_Count, cmd: t_Cmd));
		       (* cmd can be
		       	  - Data_IND / DataCnf_IND in case D04
			  - Info_IND in case X04
			  - Release_REQ in case R03 (Confirmed release)
			  - Release_RSP+ / Release_RSP- in case R12 (reply to a confirmed release request)
			  - Abort_IND in case A03 (Abort) *)
    if ok_tunnel(cmd) then
    (* We never send two messages with the same count, in the same session. *)
    get sent_count_table(=current_session_id, =count) in yield else
    let policy_req = get_policy(policy_id, AMS_payload) in
    event send_msg(my_id, other_id, tU, RandV, policy_id, policy_req, common_enc_algo, count, AMS_payload);
    (* D01 *)
    if policy_req = NONE then
       out(pub, AMS_payload)
    else
    (* D/X02 *)
    let encoded_payload = encode(encode_alg, AMS_payload) in
    let actual_comp_algo = select_common_compression(common_comp_algo_id, comp_algo) in
    let compressed_payload = compress(actual_comp_algo, encoded_payload) in
    insert sent_count_table(current_session_id, count);
    (* D/X03 *)
    let protect_mode = get_protect_mode(policy_req, common_enc_algo) in
    let encrypted_AMS_payload =
       if protect_mode = AUTH then
          compressed_payload
       else 
          E'(KENC_UV, buildIVdata(dir_send, count), compressed_payload)
    in
    (* D/X04 *)
    let ams_id = buildAMS_id1(ams_dstaddr, ams_imi, ams_pid) in
    let ams_header = buildAMS_Header(false, protect_mode, encode_alg, sid, actual_comp_algo, cmd) in
    let AMS_Data_IND_prefix = buildAMS_msg_prefix1(ams_id, ams_header, buildAMS_msg_prefix_Rest(encrypted_AMS_payload, count)) in
    let TBP_AMS_Data_IND = buildMAC_arg(my_id, other_id, AMS_Data_IND_prefix) in
    let mac = sessionMAC(MAClen, KMAC_UV, TBP_AMS_Data_IND) in
    let AMS_Data_IND = concat(AMS_Data_IND_prefix, mac) in
    (* D/X05 *)
    out(pub, AMS_Data_IND)
)
|
(
    (* Receiver side *)
    ! Nmessage
    in(pub, (clear:bool, AMS_Data_IND: bitstring));
    	    (* clear is true when the received message is not AMS-protected.
	       This is determined using the ACARS label:
	       there are specific Px ACARS labels for AMS protected messages (cf p. 58) *)
    if clear then
    (
      (* Policy check not explicit in the description of the protocol p 135, but
         mentioned  p 29-30, and essential for security *)
      if get_policy(policy_id, AMS_Data_IND) = NONE then
      event recv_msg(my_id, other_id, tU, RandV, policy_id, NONE, common_enc_algo, Count_unspecified, AMS_Data_IND)
    )
    else
    (* D/X06 *)
    let (AMS_Data_IND_prefix: bitstring, mac: bitstring) = split_message(MAClen, AMS_Data_IND) in
    (* The MAC checking of step D/X08 is moved here to facilitate verification *)
    let TBP_AMS_Data_IND = buildMAC_arg(other_id, my_id, AMS_Data_IND_prefix) in
    if mac = sessionMAC(MAClen, KMAC_UV, TBP_AMS_Data_IND) then
    let buildAMS_msg_prefix1(ams_id, ams_header, buildAMS_msg_prefix_Rest(encrypted_AMS_payload, MsgCount)) = AMS_Data_IND_prefix in
    let buildAMS_Header(R1, protect_mode, encode_alg, sid, compression, cmd) = ams_header in
    if ok_tunnel(cmd) then
    (* D/X07 *)
    (* D/X08 *)
    (* Check on the message count is slightly weaker than the check
       given in the specification: we just discard the message if a message
       with the same count has already been received in the same session. *)
    get received_count_table(=current_session_id, =MsgCount) in yield else
    insert received_count_table(current_session_id, MsgCount);
    (* Message accepted *)
    (* D/X09 *)
    let compressed_payload = 
    	if protect_mode = AUTH then
           encrypted_AMS_payload
        else
	   D'(KENC_UV, buildIVdata(dir_recv, MsgCount), encrypted_AMS_payload)
    in
    (* D/X10 *)
    let encoded_payload = decompress(compression, compressed_payload) in
    let AMS_payload = decode(encode_alg, encoded_payload) in
    (* Policy check not explicit in the description of the protocol p 137, but
       mentioned  p 29-30 *)
    let policy_req = get_policy(policy_id, AMS_payload) in
    if protect_mode = get_protect_mode(policy_req, common_enc_algo) then
    event recv_msg(my_id, other_id, tU, RandV, policy_id, policy_req, common_enc_algo, MsgCount, AMS_payload)
).


(* Secure session initiation, aircraft-initiated (Attachement 8, Section 8.2.1) *)

(* Aircraft U talking to ground entity Vx with key K_UV and MAC length MAClen *)

let aircraft_fixed_MAClen(hk: hash_key, hk1: hash_key1, hk2: hash_key2, Vx: t_id, K_UV: mac_key, MAClen: t_MAClen) =
    in(c_aircraft1, (software_part_number: t_software_part_number, policy_id: t_policy_id, 
    	      algo_bits: t_algo_bits, encode_alg: t_encode_algo, 
	      ams_dstaddr: t_AMS_SuppAddr, ams_imi: t_AMS_IMI, sid: t_SID, 
	      tU: t_AMS_Time, enc_algo: t_EncAlgo (* either NULL_enc or AES128_CFB128, depending on whether the aircraft supports encryption *)));
ifdef(`ORIGINAL',`',`
    (* Refuse to run the aircraft session twice with the same tU.
       This is necessary to prove secrecy. It models the recommendation
       that the aircraft should never run two sessions with the same tU. *)
    get table_timesU(=Vx, =tU) in yield else
    insert table_timesU(Vx, tU);
')
    (* Choose a session id *)
    new current_session_id: session_ids;
    (* Message 1, N01 *)
    let s_init_info = buildAMS10_s_init_info(software_part_number, policy_id, U, Vx) in
    let comp_algo_id = buildAMS41_comp_algo_id(algo_bits) in 
    let ams_payload = concat_AMS_element(s_init_info, payload_with_1_element(comp_algo_id)) in
    let encoded_payload = encode(encode_alg, ams_payload) in
    (* N02 *)
    let ams_id = buildAMS_id1(ams_dstaddr, ams_imi, ams_pid2) in
    let ams_header = buildAMS_Header(false, AUTH, encode_alg, sid, comp_OFF, Init_REQ) in
    let alg_ID_U = algo(MAClen, HMAC_SHA256, enc_algo) in
    let AMS_Init_REQ_prefix = buildAMS_msg_prefix1(ams_id, ams_header, buildAMS_msg_prefix_Init(encoded_payload, alg_ID_U, tU)) in
    let TBP_AMS_Init_REQ = buildMAC_arg(U, Vx, AMS_Init_REQ_prefix) in
    let MAC0_U = MAC(K_UV, TBP_AMS_Init_REQ) in
    let AMS_Appendix = buildAMS_appendix_Init(alg_ID_U, tU, MAC0_U) in
    let AMS_Init_REQ = build_msg_Init(AMS_Init_REQ_prefix, MAC0_U) in
    (* N03 *)
    event send_Init_REQ(U, Vx, AMS_Init_REQ, tU);
    out(c_aircraft2, AMS_Init_REQ);
    (* Message 2, N12 *)
    in(c_aircraft3, AMS_Init_RSP: bitstring);
    let (AMS_Init_RSP_prefix: bitstring, mac2: bitstring) = split_message(MAClen, AMS_Init_RSP) in
    let buildAMS_msg_prefix1(ams_id2, ams_header2, buildAMS_msg_prefix_RSP(compressed_payload2, AlgSel, =tU, RandV, MsgCount)) = AMS_Init_RSP_prefix in
    let buildAMS_Header(R1, =AUTH, encode_alg2, sid2, compression2, cmd2) = ams_header2 in
    let encoded_payload2 = decompress(compression2, compressed_payload2) in
    let AMS_payload2 = decode(encode_alg2, encoded_payload2) in
    let concat_AMS_element(common_comp_algo_id, app_data2) = AMS_payload2 in
    (* N13 *)
    let X_UV = HASH(hk, concat_hash(AMS_Appendix, RandV)) in
    (* N14 *)
    let algo(MAClen', =HMAC_SHA256, common_enc_algo) = AlgSel in
             (* We use the MAC length initially chosen by the aircraft,
	     	and ignore the MAC length included in AlgSel. *)             
    let KMAC_UV = KDF256(hk1, K_UV, X_UV, U, Vx) in
    (* N15 - This should be done only if the encryption is not NULL,
       but doing it anyway does not hurt. *)
    let KENC_UV = KDF128(hk2, K_UV, X_UV, U, Vx) in
    (* N16 *)
    let TBP_AMS_Init_RSP = buildMAC_arg(Vx, U, buildAMS_msg_prefix1(ams_id2, ams_header2, buildAMS_msg_prefix_TBP_RSP(compressed_payload2, AlgSel, tU, RandV, MsgCount, AMS_Appendix))) in
    (* N17 *)
    if MsgCount = Count1 then
    if mac2 = sessionMAC(MAClen, KMAC_UV, TBP_AMS_Init_RSP) then
    if cmd2 = Init_RSP_Plus then
    insert received_count_table(current_session_id, Count1);
    (* When the command is Init_RSP- instead of Init_RSP_Plus, 
       the aircraft entity executes an airline configurable unavailable action,
       which is ignored here. *)
    (* Message accepted, secure session established *)
    event recv_Init_RSP(U, Vx, AMS_Init_RSP_prefix, mac2, RandV, tU, KMAC_UV, KENC_UV);
    out(c_aircraft4, ());
    tunnel_protocol(current_session_id, ams_pid2, common_comp_algo_id, policy_id,
         tU, RandV, KMAC_UV, KENC_UV, MAClen, common_enc_algo, sid, CstDN, CstUP, U, Vx).

(* Ground entity V talking to aircraft Ux with key K_UV *)

let ground(hk: hash_key, hk1: hash_key1, hk2: hash_key2, Ux: t_id, K_UV: mac_key) = 
    in(c_ground1, (gd_algo_bits: t_algo_bits, tV: t_AMS_Time, 
            app_data: bitstring, encode_alg: t_encode_algo, comp_algo: t_comp_algo,
            AMS_Init_REQ: bitstring));
    (* Choose a session id *)
    new current_session_id: session_ids;
    (* Message 1, N04 *)
    let build_msg_Init(AMS_Init_REQ_prefix, MAC0_U) = AMS_Init_REQ in
    let buildAMS_msg_prefix1(ams_id, ams_header, buildAMS_msg_prefix_Init(encoded_payload, alg_ID_U, tU)) = AMS_Init_REQ_prefix in
    let AMS_Appendix = buildAMS_appendix_Init(alg_ID_U, tU, MAC0_U) in
    if check_time(tU, tV) then
    let buildAMS_Header(R1, =AUTH, encode_alg: t_encode_algo, sid: t_SID, compression: t_comp_algo, =Init_REQ) = ams_header in
    let ams_payload = decode(encode_alg, encoded_payload) in
    let algo(MAClen, =HMAC_SHA256, enc_algo) = alg_ID_U in
    let common_enc_algo = get_common_enc_algo(enc_algo) in
    let concat_AMS_element(s_init_info, payload_with_1_element(comp_algo_id)) = ams_payload in
    let buildAMS10_s_init_info(software_part_number, policy_id, =Ux, =V) = s_init_info in
    (* The MAC checking of step N05 is moved here to facilitate verification *)
    let TBP_AMS_Init_REQ = buildMAC_arg(Ux, V, AMS_Init_REQ_prefix) in
    if MAC0_U = MAC(K_UV, TBP_AMS_Init_REQ) then
    let buildAMS41_comp_algo_id(algo_bits) = comp_algo_id in
    let gd_comp_algo_id = buildAMS41_comp_algo_id(gd_algo_bits) in
    let common_comp_algo_id = buildAMS42_comp_algo_sel(bool_and(algo_bits, gd_algo_bits)) in
    (* N05 *)
ifdef(`REPLAY_PROT',`
    (* Replay protection. This check is stronger than the one in the specification! *)
    get received_Init_REQ_table(=Ux, =tU) in yield else
    insert received_Init_REQ_table(Ux, tU);
',`
    (* Uniqueness check of AMS_Appendix not modeled *)
')
    (* N06 - Message 1 accepted *)
    (* Termination of another session with the same peer aircraft not modeled *)
    new RandV: t_Rand32;
    let X_UV = HASH(hk, concat_hash(AMS_Appendix, RandV)) in
    (* event recv_Init_REQ put after some variable definitions to help prove injectivity *)
    event recv_Init_REQ(V, Ux, AMS_Init_REQ, tU, tV);
    (* N07 *)
    let KMAC_UV = KDF256(hk1, K_UV, X_UV, Ux, V) in
    (* N08 - This should be done only if the encryption is not NULL,
       but doing it anyway does not hurt. *)
    let KENC_UV = KDF128(hk2, K_UV, X_UV, Ux, V) in
    (* Message 2, N09 *)
    (* I consider the optional Query and Ping as application data, 
       whose content does not need to be detailed. *)
    let AMS_payload = concat_AMS_element(common_comp_algo_id, app_data) in
    let encoded_payload = encode(encode_alg, AMS_payload) in
    let actual_comp_algo = select_common_compression(common_comp_algo_id, comp_algo) in
    let compressed_payload = compress(actual_comp_algo, encoded_payload) in
    insert sent_count_table(current_session_id, Count1);
    (* N10 *)
    let ams_id = buildAMS_id2(ams_pid2) in
    let ams_header = buildAMS_Header(false, AUTH, encode_alg, sid, actual_comp_algo, Init_RSP_Plus) in
    let AlgSel = algo(MAClen, HMAC_SHA256, common_enc_algo) in
    let AMS_Init_RSP_prefix = buildAMS_msg_prefix1(ams_id, ams_header, buildAMS_msg_prefix_RSP(compressed_payload, AlgSel, tU, RandV, Count1)) in
    let TBP_AMS_Init_RSP = buildMAC_arg(V, Ux, buildAMS_msg_prefix1(ams_id, ams_header, buildAMS_msg_prefix_TBP_RSP(compressed_payload, AlgSel, tU, RandV, Count1, AMS_Appendix))) in
    let mac = sessionMAC(MAClen, KMAC_UV, TBP_AMS_Init_RSP) in
    let AMS_Init_RSP = concat(AMS_Init_RSP_prefix, mac) in
    (* N11 *)
    event send_Init_RSP(V, Ux, AMS_Init_RSP_prefix, mac, RandV, tU, tV, KMAC_UV, KENC_UV);
    out(c_ground2, AMS_Init_RSP);
    tunnel_protocol(current_session_id, ams_pid2, common_comp_algo_id, policy_id,
      tU, RandV, KMAC_UV, KENC_UV, MAClen, common_enc_algo, sid, CstUP, CstDN, V, Ux).

(* Ground-initiated trigger (Attachment 8, Section 8.2.2).
   Ground entity V talking to aircraft Ux with key K_UV *)

let ground_initiated_trigger(Ux: t_id, K_UV: mac_key) =
    in(c_ground_initiated_trigger1, (encode_alg: t_encode_algo, MAClen: t_MAClen, tV: t_AMS_Time));
ifdef(`REPLAY_PROT',`
    (* Refuse to run the ground initiated trigger twice with the same tV.
       To protect against replays. *)
    get table_timesV(=Ux, =tV) in yield else
    insert table_timesV(Ux, tV);
')
    (* G01 *)
    let ams_payload = payload_with_1_element(buildAMS40_entity_id(Ux,V)) in 
    let encoded_payload = encode(encode_alg, ams_payload) in
    (* G02 *)
    let ams_id = buildAMS_id2(ams_pid2) in
    let ams_header = buildAMS_Header(false, AUTH, encode_alg, SID0, comp_OFF, Init_IND) in
    let alg_ID_V = algo(MAClen, HMAC_SHA256, AES128_CFB128) in
    let AMS_Init_IND_prefix = buildAMS_msg_prefix1(ams_id, ams_header, buildAMS_msg_prefix_Init(encoded_payload, alg_ID_V, tV)) in
    let TBP_AMS_Init_IND = buildMAC_arg(V, Ux, AMS_Init_IND_prefix) in
    let MAC0_V = MAC(K_UV, TBP_AMS_Init_IND) in
    let AMS_Init_IND = build_msg_Init(AMS_Init_IND_prefix, MAC0_V) in
    (* G03 *)
    event send_Init_IND(V, Ux, AMS_Init_IND, tV);
    out(c_ground_initiated_trigger2, AMS_Init_IND).

(* Aircraft U reacting to ground initiated trigger from ground entity Vx,
   with key K_UV *)

let aircraft_react_ground_initiated_trigger(Vx: t_id, K_UV: mac_key) =
    (* G04 *)
    in(c_aircraft_react_ground_initiated_trigger1, (tU: t_AMS_Time, AMS_Init_IND: bitstring));
    let build_msg_Init(AMS_Init_IND_prefix, MAC0_V) = AMS_Init_IND in
    let buildAMS_msg_prefix1(ams_id, ams_header, buildAMS_msg_prefix_Init(encoded_payload, alg_ID_V, tV)) = AMS_Init_IND_prefix in
    if check_time(tV, tU) then
    let buildAMS_Header(R1, =AUTH, encode_alg: t_encode_algo, sid: t_SID, compression: t_comp_algo, =Init_IND) = ams_header in
    let ams_payload = decode(encode_alg, encoded_payload) in
    let payload_with_1_element(buildAMS40_entity_id(=U,=Vx)) = ams_payload in
    (* G05 *)
    let TBP_AMS_Init_IND = buildMAC_arg(Vx, U, AMS_Init_IND_prefix) in
    if MAC0_V = MAC(K_UV, TBP_AMS_Init_IND) then
ifdef(`REPLAY_PROT',`
    (* Replay protection. This check is not present in the specification! *)
    get received_Init_IND_table(=Vx, =tV) in yield else
    insert received_Init_IND_table(Vx, tV);
')
    (* G06 - Message accepted *)
    event recv_Init_IND(U, Vx, AMS_Init_IND, tV, tU);
    out(c_aircraft_react_ground_initiated_trigger1, ()).
    (* We let the adversary schedule the aircraft;
       no need to put it explicitly here. *)

type t_step.
const trigger, normal: t_step.

let entity(hk: hash_key, hk1: hash_key1, hk2: hash_key2) =
    in(c_entity0, (my_id: t_id, other_id: t_id, step: t_step, MAClen: t_MAClen));
    if my_id = U then
    (
        get key_table(=U, =other_id, K_UV) in
	if step = trigger then
       	    out(c_entity0', ());
	    aircraft_react_ground_initiated_trigger(other_id, K_UV)
	else
	    if MAClen = MAClen32 || MAClen = MAClen64 || MAClen = MAClen128 then 
       	    out(c_entity0', ());
       	    aircraft_fixed_MAClen(hk, hk1, hk2, other_id, K_UV, MAClen)
    )
    else if my_id = V then
    (
        get key_table(=other_id, =V, K_UV) in
	if step = trigger then
       	    out(c_entity0', ());
            ground_initiated_trigger(other_id, K_UV)
	else
       	    out(c_entity0', ());
	    ground(hk, hk1, hk2, other_id, K_UV)
    ).

(* Key distribution *)

let keys =
    ! Nk
    in(ck, (Ux: t_id, Vx: t_id, k: mac_key));
    insert key_table(Ux, Vx, k).

(* Putting the whole system together *)

process 
	in(c_gen1, ()); new hk: hash_key; new hk1: hash_key1; new hk2: hash_key2; out(c_gen2, ());
	((! Nentity entity(hk, hk1, hk2)) | 
	 keys | hashoracle(hk) | KDF256_oracle(hk1) | KDF128_oracle(hk2))

ifdef(`ORIGINAL',`
(* EXPECTED
All queries proved.
28.370s (user 28.342s + system 0.028s), max rss 262912K
END *)
')
ifdef(`SINGLE_TU',`
(* EXPECTED
All queries proved.
40.407s (user 40.391s + system 0.016s), max rss 267328K
END *)
')
ifdef(`REPLAY_PROT',`
(* EXPECTED
All queries proved.
42.851s (user 42.811s + system 0.040s), max rss 267008K
END *)
')
