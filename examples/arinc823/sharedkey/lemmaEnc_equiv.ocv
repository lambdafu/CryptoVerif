(* This file shows that AES128-CFB128 is IND-CPA, when the IV is
computed as IV = E(k, 0; IVdata) provided the IVdata arguments are
pairwise distinct. *)

(* Do not assume by default that all constants are 
   different. We shall say it explicitly when they are different *)

set diffConstants = false.

type enc_key [fixed]. (* 128 bits AES key *)
type blocksize [fixed, large]. (* 128 bits AES block *)

(* AES is a pseuso-random permutation.
   We model it as a PRF. *)
proba P_AES.
expand PRF(enc_key, blocksize, blocksize, AES, P_AES).

(* Properties of XOR *)
expand Xor(blocksize, xor, Zero).

type len. (* len is the type of the length of the last block *)
fun truncate(blocksize, len): bitstring.

event repeatedIV.

let enc1(k: enc_key, IV0: blocksize) =
    Oenc1(IVdata1: blocksize, m1: blocksize, l:len) :=
    if defined(IVdata2) && IVdata1 = IVdata2 then event_abort repeatedIV else 
    if defined(IVdata3) && IVdata1 = IVdata3 then event_abort repeatedIV else 
    let IV1 = xor(IV0, IVdata1) in
    let c1 = xor(AES(k, IV1), m1) in
    return(truncate(c1, l)).

let enc2(k: enc_key, IV0: blocksize) = 
    Oenc2(IVdata2: blocksize, m21: blocksize, m22: blocksize, l:len) :=
    if defined(IVdata1) && IVdata2 = IVdata1 then event_abort repeatedIV else 
    if defined(IVdata3) && IVdata2 = IVdata3 then event_abort repeatedIV else 
    let IV2 = xor(IV0, IVdata2) in
    let c21 = xor(AES(k, IV2), m21) in
    let c22 = xor(AES(k, c21), m22) in
    return(c21, truncate(c22, l)).

let enc3(k: enc_key, IV0: blocksize) = 
    Oenc3(IVdata3: blocksize, m31: blocksize, m32: blocksize, m33: blocksize, l:len) :=
    if defined(IVdata1) && IVdata3 = IVdata1 then event_abort repeatedIV else 
    if defined(IVdata2) && IVdata3 = IVdata2 then event_abort repeatedIV else 
    let IV3 = xor(IV0, IVdata3) in
    let c31 = xor(AES(k, IV3), m31) in
    let c32 = xor(AES(k, c31), m32) in
    let c33 = xor(AES(k, c32), m33) in
    return(c31, c32, truncate(c33, l)).

equivalence
	Ogen() :=
	k <-R enc_key;
	let IV0 = AES(k, Zero) in
	return();
	(run enc1(k, IV0) | run enc2(k, IV0) | run enc3(k, IV0))

        Ogen() :=
        return();
        ((
          Oenc1(IVdata1: blocksize, m1: blocksize, l: len) :=
	  if defined(IVdata2) && IVdata1 = IVdata2 then event_abort repeatedIV else 
    	  if defined(IVdata3) && IVdata1 = IVdata3 then event_abort repeatedIV else 
          c1 <-R blocksize;
          return(truncate(c1, l))
        ) | (
          Oenc2(IVdata2: blocksize, m21: blocksize, m22: blocksize, l: len) :=
    	  if defined(IVdata1) && IVdata2 = IVdata1 then event_abort repeatedIV else 
          if defined(IVdata3) && IVdata2 = IVdata3 then event_abort repeatedIV else 
          c21 <-R blocksize;
          c22 <-R blocksize;
          return(c21, truncate(c22, l))
        ) | (
          Oenc3(IVdata3: blocksize, m31: blocksize, m32: blocksize, m33: blocksize, l: len) :=
	  if defined(IVdata1) && IVdata3 = IVdata1 then event_abort repeatedIV else 
    	  if defined(IVdata2) && IVdata3 = IVdata2 then event_abort repeatedIV else 
          c31 <-R blocksize;
          c32 <-R blocksize;
          c33 <-R blocksize;
          return(c31, c32, truncate(c33, l))
        ))

(* EXPECTED
All queries proved.
8.636s (user 8.612s + system 0.024s), max rss 41084K
END *)
