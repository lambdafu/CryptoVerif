(* Joint assumption:
   - Gap Diffie-Hellman
   - SUF-CMA signatures, with collision-resistance
*)

def joint_GDH_SUFCMA_collresistance(G, Z, g, exp, mult, pGDH, PCollKey1, PCollKey2,
  signature, seed, sign, ver, Psign, Psigncoll)
{
const g: G.
fun exp(G, Z): G.

(* ECDSA Signatures, modified to avoid malleability *)

fun sign(Z, bitstring, seed): signature.
fun ver(G, signature, bitstring): bool.
fun sign'(Z, bitstring, seed): signature.

(* I need a joint security assumption on DH (GDH) and signatures,
   because they use the same secret keys

First, let us define GDH, with allowed signature oracles *)

fun mult(Z,Z): Z. 
equation builtin commut(mult).

(* exponents multiply *)

equation forall a: G, x: Z, y: Z; exp(exp(a,x), y) = exp(a, mult(x,y)).

collision x <-R Z; forall Y: G;
	  return(exp(g, x) = Y) <=(PCollKey1)=> return(false) if Y independent-of x.
collision x <-R Z; y <-R Z; forall Y: G;
	  return(exp(g, mult(x,y)) = Y) <=(PCollKey2)=> return(false) if Y independent-of x || Y independent-of y.


(* the GDH assumption
    This equivalence says that, when exp(g,a[i]) and exp(g,b[j]) are known to the
    adversary, the adversary can compute exp(g, mult(a[i], b[j])) only with
    negligible probability, even in the presence of a DDH oracle
    DDH(G,A,B,C) tells whether A = G^a, B = G^b, and C = G^{ab} for some a,b,
    that is DDH(G,A,B,C) is (log_G(A) * log_G(B) = log_G(C)). *) 

const mark: bitstring.

param na, naDDH, naDDH1, naDDH2, naDDH3, naDDH4, naDDH5, naDDH6, naDDH7, naDDH8, naSign, naSign2,
      nb, nbDDH, nbDDH1, nbDDH2, nbDDH3, nbDDH4, nbDDH5, nbDDH6, nbDDH7, nbDDH8, nbSign, nbSign2.

equiv(gdh(exp))
  ! na new a: Z; (
    OA() := return(exp(g,a)) |
    ! naDDH1 ODDHa1(m: G, m': G) := return(m = exp(m', a)) |
    ! naDDH2 ODDHa2(m: G, m': G, j <= nb) := return(exp(m, b[j]) = exp(m',a)) |
    ! naDDH3 ODDHa3(m: G, m': G, j <= na) := return(exp(m, a[j]) = exp(m',a)) |
    ! naDDH4 ODDHa4(m: G, j' <= nb, j <= nb) := return(exp(m, b[j]) = exp(g,mult(b[j'],a))) |
    ! naDDH5 ODDHa5(m: G, j' <= nb, j <= na) := return(exp(m, a[j]) = exp(g,mult(b[j'],a))) |
    ! naDDH6 ODDHa6(m: G, j' <= na, j <= nb) := return(exp(m, b[j]) = exp(g,mult(a[j'],a))) |
    ! naDDH7 ODDHa7(m: G, j' <= na, j <= na) := return(exp(m, a[j]) = exp(g,mult(a[j'],a))) |
    ! naDDH ODDHa(m: G, j <= nb) [useful_change] := return(m = exp(g, mult(b[j], a))) |
    ! naDDH8 ODDHa8(m: G, j <= na) [3] := return(m = exp(g,mult(a[j], a))) |
    ! naSign new r: seed; OSigna(m: bitstring) := return(sign(a, m, r)) |
    ! naSign2 new r: seed; OSigna2(m: bitstring) := return(sign'(a, m, r)))|
  ! nb new b: Z; (
    OB() := return(exp(g,b)) |
    ! nbDDH1 ODDHb1(m: G, m': G) := return(m = exp(m', b)) |
    ! nbDDH2 ODDHb2(m: G, m': G, j <= nb) := return(exp(m, b[j]) = exp(m',b)) |
    ! nbDDH3 ODDHb3(m: G, m': G, j <= na) := return(exp(m, a[j]) = exp(m',b)) |
    ! nbDDH4 ODDHb4(m: G, j' <= nb, j <= nb) := return(exp(m, b[j]) = exp(g,mult(b[j'],b))) |
    ! nbDDH5 ODDHb5(m: G, j' <= nb, j <= na) := return(exp(m, a[j]) = exp(g,mult(b[j'],b))) |
    ! nbDDH6 ODDHb6(m: G, j' <= na, j <= nb) := return(exp(m, b[j]) = exp(g,mult(a[j'],b))) |
    ! nbDDH7 ODDHb7(m: G, j' <= na, j <= na) := return(exp(m, a[j]) = exp(g,mult(a[j'],b))) |
    ! nbDDH ODDHb(m: G, j <= na) := return(m = exp(g, mult(a[j], b))) |
    ! nbDDH8 ODDHb8(m: G, j <= nb) [3] := return(m = exp(g,mult(b[j], b))) |
    ! nbSign new r: seed; OSignb(m: bitstring) := return(sign(b, m, r)) |
    ! nbSign2 new r: seed; OSignb2(m: bitstring) := return(sign'(b, m, r)))
    (* This probability formula uses random self reducibility.
       So we assume that the secret keys are chosen uniformly in Z/qZ, 
       where q is the order of g. *)
<=((#ODDHa + #ODDHb) * 
	   pGDH(time + (na + nb + #ODDHa + #ODDHb) * time(exp),
	   #ODDHa1 + #ODDHa2 + #ODDHa3 + #ODDHa4 + #ODDHa5 + #ODDHa6 + #ODDHa7 + #ODDHa8 +
	   #ODDHb1 + #ODDHb2 + #ODDHb3 + #ODDHb4 + #ODDHb5 + #ODDHb6 + #ODDHb7 + #ODDHb8))=> [computational]
  ! na new a: Z [unchanged]; (
    OA() := return(exp(g,a)) |
    ! naDDH1 ODDHa1(m: G, m': G) := return(m = exp(m', a)) |
    ! naDDH2 ODDHa2(m: G, m': G, j <= nb) := return(exp(m, b[j]) = exp(m',a)) |
    ! naDDH3 ODDHa3(m: G, m': G, j <= na) := return(exp(m, a[j]) = exp(m',a)) |
    ! naDDH4 ODDHa4(m: G, j' <= nb, j <= nb) := return(exp(m, b[j]) = exp(g,mult(b[j'],a))) |
    ! naDDH5 ODDHa5(m: G, j' <= nb, j <= na) := return(exp(m, a[j]) = exp(g,mult(b[j'],a))) |
    ! naDDH6 ODDHa6(m: G, j' <= na, j <= nb) := return(exp(m, b[j]) = exp(g,mult(a[j'],a))) |
    ! naDDH7 ODDHa7(m: G, j' <= na, j <= na) := return(exp(m, a[j]) = exp(g,mult(a[j'],a))) |
    ! naDDH ODDHa(m: G, j <= nb) := return(false) |
    ! naDDH8 ODDHa8(m: G, j <= na) := return(m = exp(g,mult(a[j], a))) |
    ! naSign OSigna(m: bitstring) := new r: seed; return(sign(a, m, r)) |
    ! naSign2 OSigna2(m: bitstring) := new r: seed; return(sign'(a, m, r)))|
  ! nb new b: Z [unchanged]; (
    OB() := return(exp(g,b)) |
    ! nbDDH1 ODDHb1(m: G, m': G) := return(m = exp(m', b)) |
    ! nbDDH2 ODDHb2(m: G, m': G, j <= nb) := return(exp(m, b[j]) = exp(m',b)) |
    ! nbDDH3 ODDHb3(m: G, m': G, j <= na) := return(exp(m, a[j]) = exp(m',b)) |
    ! nbDDH4 ODDHb4(m: G, j' <= nb, j <= nb) := return(exp(m, b[j]) = exp(g,mult(b[j'],b))) |
    ! nbDDH5 ODDHb5(m: G, j' <= nb, j <= na) := return(exp(m, a[j]) = exp(g,mult(b[j'],b))) |
    ! nbDDH6 ODDHb6(m: G, j' <= na, j <= nb) := return(exp(m, b[j]) = exp(g,mult(a[j'],b))) |
    ! nbDDH7 ODDHb7(m: G, j' <= na, j <= na) := return(exp(m, a[j]) = exp(g,mult(a[j'],b))) |
    ! nbDDH ODDHb(m: G, j <= na) := return(false) |
    ! nbDDH8 ODDHb8(m: G, j <= nb) := return(m = exp(g,mult(b[j], b))) |
    ! nbSign OSignb(m: bitstring) := new r: seed; return(sign(b, m, r)) |
    ! nbSign2 OSignb2(m: bitstring) := new r: seed; return(sign'(b, m, r))).

    (* We need to consider both forms m = exp(m', a) and m = exp(g,
    mult(b[j], a)) in the equivalence, because, when m' is known to be
    exp(g, b[j]), CryptoVerif is going to simplify m = exp(m', a) into
    m = exp(g, mult(b[j], a)), and the procedure that tests whether a
    term in the game matches a term in the equivalence would not
    recognize that m = exp(g, mult(b[j], a)) in the game matches m =
    exp(m', a) in the equivalence. *)

(* Now, SUF-CMA signatures *)

equation forall m: bitstring, r: Z, r2: seed; ver(exp(g,r), sign(r, m, r2), m) = true.

param N, N2, N3, N4, NDDH1, NDDH2, NDDH3, NDDH4.

equiv(suf_cma(sign))
  ! N3 new r: Z; (
    Opk() [2] := return(exp(g,r)) |
    ! N2 new r2: seed; Osign(x: bitstring) := return(sign(r, x, r2)) |
    ! N Ocheck(m1: bitstring, si1: signature) := return(ver(exp(g,r), si1, m1)) |
    ! NDDH1 ODDH1(m2: G, m3: G) := return(m2 = exp(m3, r)) |
    ! NDDH2 ODDH2(m2: G, m3: Z) := return(m2 = exp(g, mult(m3, r))) |
    ! NDDH3 ODDH3(m2: G) := return(m2 = exp(g, mult(r,r))) |
    ! NDDH4 ODDH4(m2: G, m3: G) := return(exp(m2, r) = exp(m3, r))) |
  ! N4 Ocheck2(m: bitstring, y: G, si: signature) [3] := return(ver(y, si, m)) [all]
<=(N3 * Psign(time + (N4+N-1) * time(ver, max(maxlength(m1), maxlength(m))) + (N3-1)*(time(exp) + N2 * time(sign, maxlength(x)) + N * time(ver, maxlength(m1))), N2, maxlength(x)))=> [manual, computational]
  ! N3 new r: Z [unchanged]; (
    Opk() := return(exp(g,r)) |
    ! N2 new r2: seed [unchanged]; Osign(x: bitstring) := let s: signature = sign'(r, x, r2) in return(s) |
    ! N Ocheck(m1: bitstring, si1: signature) := find j <= N2 suchthat defined(x[j], s[j]) && m1 = x[j] && si1 = s[j] then return(true) else return(false) |
    ! NDDH1 ODDH1(m2: G, m3: G) := return(m2 = exp(m3, r)) |
    ! NDDH2 ODDH2(m2: G, m3: Z) := return(m2 = exp(g, mult(m3, r))) |
    ! NDDH3 ODDH3(m2: G) := return(m2 = exp(g, mult(r,r))) |
    ! NDDH4 ODDH4(m2: G, m3: G) := return(exp(m2, r) = exp(m3, r))) |
  ! N4 Ocheck2(m: bitstring, y: G, si: signature) := find j <= N2, k <= N3 suchthat defined(x[j, k], s[j, k], r[k]) && y = exp(g,r[k]) && m = x[j,k] && si = s[j,k] then return(true) else find k <= N3 suchthat defined(r[k]) && (y = exp(g,r[k])) then return(false) else return(ver(y,si,m)).

(* Collision resistance property
   This property holds for ECDSA signatures
   sign(k, m1, r1) = sign(k, m2, r2) implies that r1.G and r2.G have 
   the same first coordinate modulo n (the prime order of G), which has a negligible
   probability of happening for independent random r1 and r2. *)

collision new k: Z; new r1: seed; new r2: seed; forall m1: bitstring, m2: bitstring; return(sign'(k, m1, r1) = sign'(k, m2, r2)) <=(Psigncoll)=> return(false).

}

(* Joint assumption:
   - Gap Diffie-Hellman
   - UF-CMA signatures, with collision-resistance
*)

def joint_GDH_UFCMA_collresistance(G, Z, g, exp, mult, pGDH, PCollKey1, PCollKey2,
  signature, seed, sign, ver, Psign, Psigncoll)
{
const g: G.
fun exp(G, Z): G.

(* ECDSA Signatures *)

fun sign(Z, bitstring, seed): signature.
fun ver(G, signature, bitstring): bool.
fun sign'(Z, bitstring, seed): signature.
fun ver'(G, signature, signature, bitstring): bool.
    (* Intuitively, ver'(pk, s1, s2, m) means that 
       - s2 is a good signature for m, that is, ver(pk, s2, m), 
       - and furthermore s2 has been obtained by malleability of s1, 
         which in the case of ECDSA signatures means that either s2 = s1
         or s1 = (r,s) and s2 = (r, -s mod n).  *)

(* I need a joint security assumption on DH (GDH) and signatures,
   because they use the same secret keys

First, let us define GDH, with allowed signature oracles *)

fun mult(Z,Z): Z. 
equation builtin commut(mult).

(* exponents multiply *)

equation forall a: G, x: Z, y: Z; exp(exp(a,x), y) = exp(a, mult(x,y)).

collision x <-R Z; forall Y: G;
	  return(exp(g, x) = Y) <=(PCollKey1)=> return(false) if Y independent-of x.
collision x <-R Z; y <-R Z; forall Y: G;
	  return(exp(g, mult(x,y)) = Y) <=(PCollKey2)=> return(false) if Y independent-of x || Y independent-of y.

(* the GDH assumption
    This equivalence says that, when exp(g,a[i]) and exp(g,b[j]) are known to the
    adversary, the adversary can compute exp(g, mult(a[i], b[j])) only with
    negligible probability, even in the presence of a DDH oracle
    DDH(G,A,B,C) tells whether A = G^a, B = G^b, and C = G^{ab} for some a,b,
    that is DDH(G,A,B,C) is (log_G(A) * log_G(B) = log_G(C)). *) 

const mark: bitstring.

param na, naDDH, naDDH1, naDDH2, naDDH3, naDDH4, naDDH5, naDDH6, naDDH7, naDDH8, naSign, naSign2,
      nb, nbDDH, nbDDH1, nbDDH2, nbDDH3, nbDDH4, nbDDH5, nbDDH6, nbDDH7, nbDDH8, nbSign, nbSign2.

equiv(gdh(exp))
  ! na new a: Z; (
    OA() := return(exp(g,a)) |
    ! naDDH1 ODDHa1(m: G, m': G) := return(m = exp(m', a)) |
    ! naDDH2 ODDHa2(m: G, m': G, j <= nb) := return(exp(m, b[j]) = exp(m',a)) |
    ! naDDH3 ODDHa3(m: G, m': G, j <= na) := return(exp(m, a[j]) = exp(m',a)) |
    ! naDDH4 ODDHa4(m: G, j' <= nb, j <= nb) := return(exp(m, b[j]) = exp(g,mult(b[j'],a))) |
    ! naDDH5 ODDHa5(m: G, j' <= nb, j <= na) := return(exp(m, a[j]) = exp(g,mult(b[j'],a))) |
    ! naDDH6 ODDHa6(m: G, j' <= na, j <= nb) := return(exp(m, b[j]) = exp(g,mult(a[j'],a))) |
    ! naDDH7 ODDHa7(m: G, j' <= na, j <= na) := return(exp(m, a[j]) = exp(g,mult(a[j'],a))) |
    ! naDDH ODDHa(m: G, j <= nb) [useful_change] := return(m = exp(g, mult(b[j], a))) |
    ! naDDH8 ODDHa8(m: G, j <= na) [3] := return(m = exp(g,mult(a[j], a))) |
    ! naSign new r: seed; OSigna(m: bitstring) := return(sign(a, m, r)) |
    ! naSign2 new r: seed; OSigna2(m: bitstring) := return(sign'(a, m, r)))|
  ! nb new b: Z; (
    OB() := return(exp(g,b)) |
    ! nbDDH1 ODDHb1(m: G, m': G) := return(m = exp(m', b)) |
    ! nbDDH2 ODDHb2(m: G, m': G, j <= nb) := return(exp(m, b[j]) = exp(m',b)) |
    ! nbDDH3 ODDHb3(m: G, m': G, j <= na) := return(exp(m, a[j]) = exp(m',b)) |
    ! nbDDH4 ODDHb4(m: G, j' <= nb, j <= nb) := return(exp(m, b[j]) = exp(g,mult(b[j'],b))) |
    ! nbDDH5 ODDHb5(m: G, j' <= nb, j <= na) := return(exp(m, a[j]) = exp(g,mult(b[j'],b))) |
    ! nbDDH6 ODDHb6(m: G, j' <= na, j <= nb) := return(exp(m, b[j]) = exp(g,mult(a[j'],b))) |
    ! nbDDH7 ODDHb7(m: G, j' <= na, j <= na) := return(exp(m, a[j]) = exp(g,mult(a[j'],b))) |
    ! nbDDH ODDHb(m: G, j <= na) := return(m = exp(g, mult(a[j], b))) |
    ! nbDDH8 ODDHb8(m: G, j <= nb) [3] := return(m = exp(g,mult(b[j], b))) |
    ! nbSign new r: seed; OSignb(m: bitstring) := return(sign(b, m, r)) |
    ! nbSign2 new r: seed; OSignb2(m: bitstring) := return(sign'(b, m, r)))
    (* This probability formula uses random self reducibility.
       So we assume that the secret keys are chosen uniformly in Z/qZ, 
       where q is the order of g. *)
<=((#ODDHa + #ODDHb) * 
	   pGDH(time + (na + nb + #ODDHa + #ODDHb) * time(exp),
	   #ODDHa1 + #ODDHa2 + #ODDHa3 + #ODDHa4 + #ODDHa5 + #ODDHa6 + #ODDHa7 + #ODDHa8 +
	   #ODDHb1 + #ODDHb2 + #ODDHb3 + #ODDHb4 + #ODDHb5 + #ODDHb6 + #ODDHb7 + #ODDHb8))=> [computational]
  ! na new a: Z [unchanged]; (
    OA() := return(exp(g,a)) |
    ! naDDH1 ODDHa1(m: G, m': G) := return(m = exp(m', a)) |
    ! naDDH2 ODDHa2(m: G, m': G, j <= nb) := return(exp(m, b[j]) = exp(m',a)) |
    ! naDDH3 ODDHa3(m: G, m': G, j <= na) := return(exp(m, a[j]) = exp(m',a)) |
    ! naDDH4 ODDHa4(m: G, j' <= nb, j <= nb) := return(exp(m, b[j]) = exp(g,mult(b[j'],a))) |
    ! naDDH5 ODDHa5(m: G, j' <= nb, j <= na) := return(exp(m, a[j]) = exp(g,mult(b[j'],a))) |
    ! naDDH6 ODDHa6(m: G, j' <= na, j <= nb) := return(exp(m, b[j]) = exp(g,mult(a[j'],a))) |
    ! naDDH7 ODDHa7(m: G, j' <= na, j <= na) := return(exp(m, a[j]) = exp(g,mult(a[j'],a))) |
    ! naDDH ODDHa(m: G, j <= nb) := return(false) |
    ! naDDH8 ODDHa8(m: G, j <= na) := return(m = exp(g,mult(a[j], a))) |
    ! naSign OSigna(m: bitstring) := new r: seed; return(sign(a, m, r)) |
    ! naSign2 OSigna2(m: bitstring) := new r: seed; return(sign'(a, m, r)))|
  ! nb new b: Z [unchanged]; (
    OB() := return(exp(g,b)) |
    ! nbDDH1 ODDHb1(m: G, m': G) := return(m = exp(m', b)) |
    ! nbDDH2 ODDHb2(m: G, m': G, j <= nb) := return(exp(m, b[j]) = exp(m',b)) |
    ! nbDDH3 ODDHb3(m: G, m': G, j <= na) := return(exp(m, a[j]) = exp(m',b)) |
    ! nbDDH4 ODDHb4(m: G, j' <= nb, j <= nb) := return(exp(m, b[j]) = exp(g,mult(b[j'],b))) |
    ! nbDDH5 ODDHb5(m: G, j' <= nb, j <= na) := return(exp(m, a[j]) = exp(g,mult(b[j'],b))) |
    ! nbDDH6 ODDHb6(m: G, j' <= na, j <= nb) := return(exp(m, b[j]) = exp(g,mult(a[j'],b))) |
    ! nbDDH7 ODDHb7(m: G, j' <= na, j <= na) := return(exp(m, a[j]) = exp(g,mult(a[j'],b))) |
    ! nbDDH ODDHb(m: G, j <= na) := return(false) |
    ! nbDDH8 ODDHb8(m: G, j <= nb) := return(m = exp(g,mult(b[j], b))) |
    ! nbSign OSignb(m: bitstring) := new r: seed; return(sign(b, m, r)) |
    ! nbSign2 OSignb2(m: bitstring) := new r: seed; return(sign'(b, m, r))).

    (* We need to consider both forms m = exp(m', a) and m = exp(g,
    mult(b[j], a)) in the equivalence, because, when m' is known to be
    exp(g, b[j]), CryptoVerif is going to simplify m = exp(m', a) into
    m = exp(g, mult(b[j], a)), and the procedure that tests whether a
    term in the game matches a term in the equivalence would not
    recognize that m = exp(g, mult(b[j], a)) in the game matches m =
    exp(m', a) in the equivalence. *)

(* Now, UF-CMA signatures *)

equation forall m: bitstring, r: Z, r2: seed; ver(exp(g,r), sign(r, m, r2), m) = true.
equation forall m: bitstring, r: Z, r2: seed; ver'(exp(g,r), sign'(r, m, r2), sign'(r, m, r2), m) = true.
    (* The first signature is the initial one -
       the second signature is the received one,
       possibly altered since signatures are malleable *)

param N, N2, N3, N4, NDDH1, NDDH2, NDDH3, NDDH4.

equiv(uf_cma(sign))
  ! N3 new r: Z; (
    Opk() [2] := return(exp(g,r)) |
    ! N2 new r2: seed; Osign(x: bitstring) := return(sign(r, x, r2)) |
    ! N Ocheck(m1: bitstring, si1: signature) := return(ver(exp(g,r), si1, m1)) |
    ! NDDH1 ODDH1(m2: G, m3: G) := return(m2 = exp(m3, r)) |
    ! NDDH2 ODDH2(m2: G, m3: Z) := return(m2 = exp(g, mult(m3, r))) |
    ! NDDH3 ODDH3(m2: G) := return(m2 = exp(g, mult(r,r))) |
    ! NDDH4 ODDH4(m2: G, m3: G) := return(exp(m2, r) = exp(m3, r))) |
  ! N4 Ocheck2(m: bitstring, y: G, si: signature) [3] := return(ver(y, si, m)) [all]
<=(N3 * Psign(time + (N4+N-1) * time(ver, max(maxlength(m1), maxlength(m))) + (N3-1)*(time(exp) + N2 * time(sign, maxlength(x)) + N * time(ver, maxlength(m1))), N2, maxlength(x)))=> [manual, computational]
  ! N3 new r: Z [unchanged]; (
    Opk() := return(exp(g,r)) |
    ! N2 new r2: seed [unchanged]; Osign(x: bitstring) := let s: signature = sign'(r, x, r2) in return(s) |
    ! N Ocheck(m1: bitstring, si1: signature) := find j <= N2 suchthat defined(x[j], s[j]) && m1 = x[j] && ver'(exp(g,r), s[j], si1, m1) then return(true) else return(false) |
    ! NDDH1 ODDH1(m2: G, m3: G) := return(m2 = exp(m3, r)) |
    ! NDDH2 ODDH2(m2: G, m3: Z) := return(m2 = exp(g, mult(m3, r))) |
    ! NDDH3 ODDH3(m2: G) := return(m2 = exp(g, mult(r,r))) |
    ! NDDH4 ODDH4(m2: G, m3: G) := return(exp(m2, r) = exp(m3, r))) |
  ! N4 Ocheck2(m: bitstring, y: G, si: signature) := find j <= N2, k <= N3 suchthat defined(x[j, k], s[j, k], r[k]) && y = exp(g,r[k]) && m = x[j,k] && ver'(y, s[j,k], si, m) then return(true) else find k <= N3 suchthat defined(r[k]) && (y = exp(g,r[k])) then return(false) else return(ver(y,si,m)).

(* Collision resistance property
   This property holds for ECDSA signatures
   sign(k, m1, r1) = sign(k, m2, r2) implies that r1.G and r2.G have 
   the same first coordinate modulo n (the prime order of G), which has a negligible
   probability of happening for independent random r1 and r2. *)

collision new k: Z; new r1: seed; new r2: seed; forall m1: bitstring, m2: bitstring; return(sign'(k, m1, r1) = sign'(k, m2, r2)) <=(Psigncoll)=> return(false).


(* Given the intuitive meaning of ver' mentioned at its declaration,
   ver'(exp(g,k), sign'(k, m1, r1), sign'(k, m2, r2), m)
   implies that 
   sign'(k, m1, r1) = sign'(k, m2, r2) or
   sign'(k, m1, r1) = (r,s) and sign'(k, m2, r2) = (r, -s mod n).
   These two signatures have the same first component, so as above
   r1.G and r2.G have the same first coordinate modulo n, which has a negligible
   probability of happening for independent random r1 and r2. *)

collision new k: Z; new r1: seed; new r2: seed; forall m1: bitstring, m2: bitstring, m: bitstring; return(ver'(exp(g,k), sign'(k, m1, r1), sign'(k, m2, r2), m)) <=(Psigncoll)=> return(false).

}

(* SUF-CMA assumption, with keys generated by exponentiation *)

def SUFCMA_EC(G, Z, g, exp, 
  signature, seed, sign, ver, Psign, Psigncoll) {

const g: G.
fun exp(G, Z): G.

fun sign(Z, bitstring, seed): signature.
fun ver(G, signature, bitstring): bool.
fun sign'(Z, bitstring, seed): signature.
fun ver'(G, signature, bitstring): bool.

equation forall m: bitstring, r: Z, r2: seed; ver(exp(g,r), sign(r, m, r2), m) = true.
equation forall m: bitstring, r: Z, r2: seed; ver'(exp(g,r), sign'(r, m, r2), m) = true.

param N, N2, N3, N4.

equiv(suf_cma(sign))
  ! N3 new r: Z; (
    Opk() [2] := return(exp(g,r)) |
    ! N2 new r2: seed; Osign(x: bitstring) := return(sign(r, x, r2)) |
    ! N Ocheck(m1: bitstring, si1: signature) := return(ver(exp(g,r), si1, m1)))|
  ! N4 Ocheck2(m: bitstring, y: G, si: signature) [3] := return(ver(y, si, m)) [all]
<=(N3 * Psign(time + (N4+N-1) * time(ver, max(maxlength(m1), maxlength(m))) + (N3-1)*(time(exp) + N2 * time(sign, maxlength(x)) + N * time(ver, maxlength(m1))), N2, maxlength(x)))=> [manual, computational]
  ! N3 new r: Z [unchanged]; (
    Opk() := return(exp(g,r)) |
    ! N2 new r2: seed [unchanged]; Osign(x: bitstring) := let s: signature = sign'(r, x, r2) in return(s) |
    ! N Ocheck(m1: bitstring, si1: signature) := find j <= N2 suchthat defined(x[j], s[j]) && m1 = x[j] && si1 = s[j] then return(true) else return(false))|
  ! N4 Ocheck2(m: bitstring, y: G, si: signature) := find j <= N2, k <= N3 suchthat defined(x[j, k], s[j, k], r[k]) && y = exp(g,r[k]) && m = x[j,k] && si = s[j,k] then return(true) else find k <= N3 suchthat defined(r[k]) && (y = exp(g,r[k])) then return(false) else return(ver(y,si,m)).

const mark: bitstring.

equiv(suf_cma_corrupt(sign))
  ! N3 new r: Z; (
    Opk() [2] := return(exp(g,r)) |
    ! N2 new r2: seed; Osign(x: bitstring) := return(sign(r, x, r2)) |
    ! N Ocheck(m1: bitstring, si1: signature) := return(ver(exp(g,r), si1, m1)) |
    Ocorrupt() [10] := return(r))|
  ! N4 Ocheck2(m: bitstring, y: G, si: signature) [3] := return(ver(y, si, m)) [all]
<=(N3 * Psign(time + (N4+N-1) * time(ver, max(maxlength(m1), maxlength(m))) + (N3-1)*(time(exp) + N2 * time(sign, maxlength(x)) + N * time(ver, maxlength(m1))), N2, maxlength(x)))=> [manual, computational]
  ! N3 new r: Z [unchanged]; (
    Opk() := return(exp(g,r)) |
    ! N2 new r2: seed [unchanged]; Osign(x: bitstring) := let s: signature = sign'(r, x, r2) in return(s) |
    ! N Ocheck(m1: bitstring, si1: signature) := if defined(corrupt) then return(ver'(exp(g,r), si1, m1)) else find j <= N2 suchthat defined(x[j], s[j]) && m1 = x[j] && si1 = s[j] then return(true) else return(false) |
    Ocorrupt() := let corrupt: bitstring = mark in return(r))|
  ! N4 Ocheck2(m: bitstring, y: G, si: signature) := find k <= N3 suchthat defined(r[k], corrupt[k]) && (y = exp(g,r[k])) then return(ver'(y,si,m)) else find j <= N2, k <= N3 suchthat defined(x[j, k], s[j, k], r[k]) && y = exp(g,r[k]) && m = x[j,k] && si = s[j,k] then return(true) else find k <= N3 suchthat defined(r[k]) && (y = exp(g,r[k])) then return(false) else return(ver(y,si,m)).

}

(* PRF MAC truncated to 3 different lengths: 32, 64, 128 bits *)

def SUF_CMA_MAC_3lengths(t_MAClen, MAClen32, MAClen64, MAClen128,
       mac_key, sessionMAC, PPRF) {

fun sessionMAC(t_MAClen, mac_key, bitstring): bitstring.

(* sessionMAC is SUF-CMA for each of the 3 lengths *)

fun sessionMAC2(t_MAClen, mac_key, bitstring): bitstring.
param N, N2, N3.
type mac_32bits [fixed].
type mac_64bits [fixed].
type mac_128bits [fixed].

equiv(suf_cma_truncated32_mac )
  ! N3 new k: mac_key; (
    ! N Omac(x: bitstring) := return(sessionMAC(MAClen32, k, x)) |
    ! N2 Ocheck(m: bitstring, ma: bitstring) := return(ma = sessionMAC(MAClen32, k, m)))
<=(N3 * (4*N2/|mac_32bits| + 2*PPRF(time + (N3-1)*(N+N2)*time(sessionMAC,maxlength(x)), N + N2, max(maxlength(x), maxlength(m)), 0, 0)))=> [computational]
  ! N3 new k: mac_key [unchanged]; (
    ! N Omac(x: bitstring) := return(sessionMAC2(MAClen32, k, x)) |
    ! N2 Ocheck(m: bitstring, ma: bitstring) := find j <= N suchthat defined(x[j]) && (m = x[j]) && ma = sessionMAC2(MAClen32, k, m) then return(true) else return(false)).

equiv(suf_cma_truncated64_mac )
  ! N3 new k: mac_key; (
    ! N Omac(x: bitstring) := return(sessionMAC(MAClen64, k, x)) |
    ! N2 Ocheck(m: bitstring, ma: bitstring) := return(ma = sessionMAC(MAClen64, k, m)))
<=(N3 * (4*N2/|mac_64bits| + 2*PPRF(time + (N3-1)*(N+N2)*time(sessionMAC,maxlength(x)), N + N2, max(maxlength(x), maxlength(m)), 0, 0)))=> [computational]
  ! N3 new k: mac_key [unchanged]; (
    ! N Omac(x: bitstring) := return(sessionMAC2(MAClen64, k, x)) |
    ! N2 Ocheck(m: bitstring, ma: bitstring) := find j <= N suchthat defined(x[j]) && (m = x[j]) && ma = sessionMAC2(MAClen64, k, m) then return(true) else return(false)).

equiv(suf_cma_truncated128_mac )
  ! N3 new k: mac_key; (
    ! N Omac(x: bitstring) := return(sessionMAC(MAClen128, k, x)) |
    ! N2 Ocheck(m: bitstring, ma: bitstring) := return(ma = sessionMAC(MAClen128, k, m)))
<=(N3 * (4*N2/|mac_128bits| + 2*PPRF(time + (N3-1)*(N+N2)*time(sessionMAC,maxlength(x)), N + N2, max(maxlength(x), maxlength(m)), 0, 0)))=> [computational]
  ! N3 new k: mac_key [unchanged]; (
    ! N Omac(x: bitstring) := return(sessionMAC2(MAClen128, k, x)) |
    ! N2 Ocheck(m: bitstring, ma: bitstring) := find j <= N suchthat defined(x[j]) && (m = x[j]) && ma = sessionMAC2(MAClen128, k, m) then return(true) else return(false)).

}

(* Encryption 
   First, version without security assumption, sufficient for authentication and key secrecy *)

def encryption_IV_no_hyp(enc_key, t_IVdata, E', D') {

fun E'(enc_key, t_IVdata, bitstring): bitstring.
fun D'(enc_key, t_IVdata, bitstring): bitstring.

equation forall k: enc_key, IVdata: t_IVdata, msg: bitstring; D'(k, IVdata, E'(k, IVdata, msg)) = msg.

}

(* Second, version with IND-CPA assumtion, provided IVdata is distinct
   for each encryption. For secrecy of messages. *)

def encryption_IV_IND_CPA(enc_key, t_IVdata, E', D', Zero, Penc) {

expand encryption_IV_no_hyp(enc_key, t_IVdata, E', D').

(* encryption is IND-CPA provided IVdata is distinct
   for each encryption *)

(* Zero(x) is a bitstring of the same length as x, containing only zeroes *)
fun Zero(bitstring): bitstring.

fun E''(enc_key, t_IVdata, bitstring): bitstring.

event repeated_IVdata.
param N, N2.

equiv
  ! N2 new k: enc_key; ! N Oenc(IVdata: t_IVdata, msg: bitstring) := return(E'(k, IVdata, msg))
<=(N2 * Penc(time + (N2-1)*(N*time(E', maxlength(msg)) + N*time(Zero, maxlength(msg))), N, maxlength(msg)))=>
  ! N2 new k: enc_key; ! N Oenc(IVdata: t_IVdata, msg: bitstring) := find i <= N suchthat defined(IVdata[i], r[i]) && (IVdata = IVdata[i]) then event_abort repeated_IVdata else let r: bitstring = E''(k, IVdata, Zero(msg)) in return(r).

}

(* MAC is HMAC_SHA256, it is SUF-CMA and collision-resistant;
   KDF256, KDF128 are PRFs, even when they share the same key as the MAC *)

def MAC_KDF(mac_key, enc_key, t_SHA256_out, t_id, MAC, KDF256, KDF128, PPRF) {

fun MAC(mac_key, bitstring): t_SHA256_out.
fun KDF256(mac_key, t_SHA256_out, t_id, t_id): mac_key.
fun KDF128(mac_key, t_SHA256_out, t_id, t_id): enc_key.

(* MAC is HMAC_SHA256, it is SUF-CMA;
   KDF256, KDF128 are PRFs, even when they share the same key as the MAC *)

param N, qMAC, qVer, qKDF256, qKDF128, qColl.
fun MAC2(mac_key, bitstring): t_SHA256_out.

equiv
  ! N new k: mac_key; (
    ! qMAC O_mac(m: bitstring) := return(MAC(k, m)) |
    ! qVer O_Ver(mv: bitstring, mac: t_SHA256_out) := return(mac = MAC(k, mv)) |
    ! qKDF256 O_KDF256(X2: t_SHA256_out, U2: t_id, V2: t_id) := return(KDF256(k, X2, U2, V2)) |
    ! qKDF128 O_KDF128(X3: t_SHA256_out, U3: t_id, V3: t_id) := return(KDF128(k, X3, U3, V3)))
<=(N * (4 * qVer / |t_SHA256_out| + 
        2 * PPRF(time + (N-1)*((qMAC + qVer) * time(MAC, max(maxlength(m), maxlength(mv))) + qKDF256 * time(KDF256) + qKDF128 * time(KDF128)), qMAC + qVer, max(maxlength(m), maxlength(mv)), qKDF256, qKDF128)))=>
  ! N new k: mac_key; (
    ! qMAC O_mac(m: bitstring) := return(MAC2(k, m)) |
    ! qVer O_Ver(mv: bitstring, mac: t_SHA256_out) := find j <= qMAC suchthat defined(m[j]) && mv = m[j] && mac = MAC2(k, mv) then return(true) else return(false) |
    ! qKDF256 O_KDF256(X2: t_SHA256_out, U2: t_id, V2: t_id) := find [unique] j2 <= qKDF256 suchthat defined(X2[j2], U2[j2], V2[j2], r2[j2]) && X2 = X2[j2] && U2 = U2[j2] && V2 = V2[j2] then return(r2[j2]) else new r2: mac_key; return(r2) |
    ! qKDF128 O_KDF128(X3: t_SHA256_out, U3: t_id, V3: t_id) := find [unique] j3 <= qKDF128 suchthat defined(X3[j3], U3[j3], V3[j3], r3[j3]) && X3 = X3[j3] && U3 = U3[j3] && V3 = V3[j3] then return(r3[j3]) else new r3: enc_key; return(r3)).

(* MAC is HMAC_SHA256, it is collision resistant *)

fun MAC2collision(mac_key, bitstring, bitstring): bool.

(* This equality allows simplification to automatically transform
   x = y into MAC2collision(k,m1,m2) when x = MAC2(k,m1) and y = MAC2(k,m2).
   Without this equality, the transformation of x = y into MAC2(k, m1)
   = MAC2(k, m2) is not automatically done by the cryptographic
   transformation because x = y can (apparently) be discharged without
   doing anything since it does not contain k. *)
equation forall k: mac_key, m1: bitstring, m2: bitstring; (MAC2(k, m1) = MAC2(k, m2)) = MAC2collision(k,m1,m2).

equiv
  ! N new k: mac_key; (
    ! qMAC O_mac(m: bitstring) := return(MAC2(k, m)) |
    ! qColl O_coll(m1: bitstring, m2: bitstring) [useful_change] := return(MAC2collision(k, m1, m2)))
<=(N * ((12 * qColl + 4 * qColl * qColl * N + 4 * qColl * N * qMAC + qMAC * qMAC * N) / |t_SHA256_out| + 
        2 * PPRF(time + (N-1) * (qMAC + 2 * qColl) * time(MAC, max(maxlength(m), maxlength(m2), maxlength(m1))),
	         qMAC + 2 * qColl, max(maxlength(m), maxlength(m2), maxlength(m1)), 0, 0)))=>
  ! N new k: mac_key; (
    ! qMAC O_mac(m: bitstring) := return(MAC2(k, m)) |
    ! qColl O_coll(m1: bitstring, m2: bitstring) := return(m1 = m2)).
	
}
