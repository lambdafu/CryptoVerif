param N.

type G [bounded,large].
type Z [bounded,large].

proba pCDH.
proba pSqCDH.
expand DH_basic(G, Z, g, exp, exp', mult).
expand square_CDH(G, Z, g, exp, exp', mult, pCDH, pSqCDH).

type hashkey [fixed].
type T.
type T' [bounded,large].
expand ROM_hash_2(hashkey, G, T, T', F, hashoracle, qF).

proof {
    auto;
    start_from_other_end;
    auto;
    success }

equivalence
    Ogen() :=
    hk <-R hashkey;
    a <-R Z;
    return();
    ((OA() := return(exp(g,a))) |
     (foreach i <= N do OPRFDH(x : T) := return(F(hk, exp(g, mult(a,a)), x))) |
     run hashoracle(hk))

    Ogen() :=
    hk <-R hashkey;
    a <-R Z;
    return();
    ((OA() := return(exp'(g,a))) |
     (foreach i <= N do OPRFDH(x : T) :=
        find[unique] j <= N suchthat defined(x[j],r[j]) && x = x[j] then return(r[j])
	else r <-R T'; return(r)) |
     run hashoracle(hk))
