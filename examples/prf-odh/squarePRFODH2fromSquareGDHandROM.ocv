param N, N2, N3.

type G [bounded,large].
type Z [bounded,large].

proba pGDH.
proba pSqGDH.
expand DH_basic(G, Z, g, exp, exp', mult).
expand square_GDH(G, Z, g, exp, exp', mult, pGDH, pSqGDH).


equation forall x:G, x':G, y:Z; (exp(x,y) = exp(x',y)) = (x = x').
equation forall x:G, x':G, y:Z; (exp'(x,y) = exp'(x',y)) = (x = x').

equation forall x:G, x':Z, y:Z; (exp(x,y) = exp(g, mult(x',y))) = (x = exp(g,x')).
equation forall x:G, x':Z, y:Z; (exp'(x,y) = exp'(g, mult(x',y))) = (x = exp'(g,x')).

type hashkey [fixed].
type T. 
type T' [bounded,large].
expand ROM_hash_large_2(hashkey, G, T, T', F, hashoracle, qF).

expand ROM_hash_large(hashkey, T, T', H, hashoracle', qH).

proof {
    auto;
    
    start_from_other_end;
    auto;
    show_game;
    remove_assign binder "x_O_[0-9]*";
    simplify;
    remove_assign useless;
    success }

equivalence
    Ogen() :=
    hk <-R hashkey;
    a <-R Z;
    let A = exp(g,a) in
    return();
    ((OA() := return(A)) |
     (foreach i <= N do OPRFDH(x : T) := return(F(hk, exp(g, mult(a,a)), x))) |
     (foreach i <= N2 do OPRFDHa(x : T, Y: G) := if Y = A then return(bottom) else return(F(hk, exp(Y,a), x))) |
     run hashoracle(hk))

    Ogen() :=
    hk <-R hashkey;
    hk' <-R hashkey;
    a <-R Z;
    let A = exp'(g,a) in
    return();
    ((OA() := return(A)) |
     (foreach i <= N do OPRFDH(x : T) := return(H(hk', x))) |
     (foreach i <= N2 do OPRFDHa(x : T, Y: G) :=
        if Y = A then
	  return(bottom)
	else
	  return(F(hk, exp'(Y,a), x))) |
     run hashoracle(hk))

(* EXPECTED
All queries proved.
0.108s (user 0.100s + system 0.008s), max rss 17908K
END *)
