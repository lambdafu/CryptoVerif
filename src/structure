parsing_helper.ml: functions for error messages

lexer.ml: lexer (for the "channel" front-end)
parser.ml: parser

olexer.ml: lexer for the "oracles" front-end 
oparser.ml: parser

ptree.mli: type declarations for the syntax tree, as output by
the lexer/parser

types.ml: type declarations for the internal representation of games

stringmap.ml: defines a map from strings to values, used in syntax.ml
  and insertinstruct.ml
syntax.ml: translates the syntax tree as output by the parser (type
  defined in ptree.mli) into internal games (type defined in types.ml).
  For instance, links identifiers to variables.
check.ml: performs various verifications on the input
settings.ml: handles various settings (including those defined by "set").

binderset.ml: representation of sets of variables by a hash table.
terms.ml: various helper functions
polynom.ml: helper functions on polynoms (for manipulating probability
formulas)
computeruntime.ml: computes the runtime of a game (useful for computing
  probabilities in cryptotransf.ml and proba.ml) 
proba.ml: helper functions on probabilities
facts.ml: helper functions on facts 

invariants.ml: checks invariants on games after each game transformation
(useful to detect bugs in game transformations)

Game transformations:
- transform.ml: implements the following syntactic transformations:
  - auto_sa_rename: renames variables that are defined in find
   conditions, defined several times, and have no array references
   (for internal use only; applied after transformations that copy
   code, and could therefore break the invariant that variables in
   conditions of find have a single definition)
  - expand: expands the expressions If, Let, and Find 
   into processes If, Let, and Find; expressions If, Let, Find
   may be left in conditions of Find, when they cannot be expanded.
   (also for internal use; applied on the first game and after
   cryptographic transformations)
  - sa_rename: renames all occurrences of a variable b with distinct names,
   expanding code with array references to b if necessary
  - remove_assignments: replaces variables with their values
  - move_new_let: moves new/lets downwards as much as possible
  - insert_event: replaces a subprocess with an event
- cryptotransf.ml: implements cryptographic transformations:
  From an equivalence L ~ R, detects that a game can be written G ~ C[L],
  and transform it into C[R] ~ G'.
- simplify1.ml
  simplify.ml simplifies games after cryptographic transformations
- insertinstruct.ml: implements the following manual game transformations:
  - insert_instruct: inserts an instruction at a certain program point
  - replace_term: replaces a term with an equal term
- mergebranches.ml: implements the following game transformations:
  - merge_arrays: merges several variables (arrays) into a single array
  - merge_branches: merges find/if/let branches as much as possible
  This module also provides helper functions for simplify.ml, which are
  used to merge branches of if/let/find in simplify (in a less powerful
  way than merge_branches).
- success.ml: Tests if a game satisfies the desired security properties

display.ml: display games
displaytex.ml: display games in TeX

instruct.ml: organizes the game transformations (automatic proof
strategy as well as manually guided proofs)

main.ml: main program
