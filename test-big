#!/bin/bash

if [ -x ./xtime ]
then
    PROG=./xtime
else
    PROG=
fi

if [ -d /local/bblanche/tmp ]
then
    TMP=/local/bblanche/tmp/tmp
else
    TMP=tmp
fi

# The arguments of analyze are
# $1 = protocol name
# $2 = CryptoVerif options
# $3 = input filename (wrt the CryptoVerif directory)
# $4 = output filename (wrt the CryptoVerif directory)

function analyze()
{
	echo -n PROTOCOL $1 " "
	$PROG ./cryptoverif $2 $3 > $TMP.out 2>&1 
	echo PROTOCOL $1 >> $4
	cat $TMP.out >> $4
	egrep \(PROTOCOL\|'RESULT Could not prove'\|'All queries proved'\|xtime\|Error\|user\) $TMP.out > $TMP.res 
	awk '/EXPECTED/, /END/ { print $0; }' $3 | grep -v EXPECTED | grep -v END > $TMP.expected
	grep -v user $TMP.expected > $TMP.expectedres
	grep -v user $TMP.res > $TMP.actualres
	if diff -q -b $TMP.expectedres $TMP.actualres >/dev/null
	then 
	    echo OK
	else
	    echo
	    echo RESULTS DIFFER! Expected:
	    cat  $TMP.expectedres
	    echo Actual:
	    cat $TMP.actualres
	fi
	(echo -n "EXPECTED: "; grep user $TMP.expected ; echo -n "ACTUAL: "; grep user $TMP.res) | awk '/^EXPECTED:/ { expectedtime = substr($2, 0, length($2)-1); } /^ACTUAL:/ { actualtime = substr($2, 0, length($2)-1); } END { if (actualtime != "") { if (actualtime + 0 > expectedtime * 1.2 + 0.2) { print "Slower: old=" expectedtime " new=" actualtime}; if (actualtime + 0 < expectedtime * 0.8 - 0.2) { print "Faster: old=" expectedtime " new=" actualtime; } } }'
}

mkdir -p tests

output=textsecure`date '+%Y.%m.%d-%H_%M_%S'`
(
for dir in examples/textsecure examplesnd/textsecure examplesnd/textsecure-keys-not-normalized
do
    if [ $dir = examplesnd/textsecure-keys-not-normalized ]
    then
	cat default.cvl $dir/DH_EC_prime_subgroup.cvl > $dir/textsecure.cvl
	lib="-lib examplesnd/textsecure-keys-not-normalized/textsecure"
    else
	lib=""
    fi
    
    echo
    echo TEXTSECURE $dir
    echo
    
    for prot in NO_REPLAY_PROT REPLAY_PROT
    do
	
	for sessions in AB-BA AA
	do
	    for prop in STD FS
	    do
		m4 -D$prop -D$prot $dir/TextSecure-$sessions.m4.cv > $dir/TextSecure-$sessions.$prop.$prot.cv
		analyze TextSecure-$sessions.$prop.$prot $lib $dir/TextSecure-$sessions.$prop.$prot.cv tests/$output
	    done
	done
	
	m4 -D$prot $dir/TextSecure-KCI.m4.cv > $dir/TextSecure-KCI.$prot.cv
	analyze TextSecure-KCI.$prot $lib $dir/TextSecure-KCI.$prot.cv tests/$output
	
    done

    for i in $dir/*.ocv
    do
	if [ -f $i ]
	then
	    analyze $i "" $i tests/$output
	fi
    done
    
done

for dir in examplesnd/textsecure-X448 examplesnd/textsecure-single_coord_ladder
do
    echo
    echo TEXTSECURE $dir
    echo
    
    for prot in NO_REPLAY_PROT REPLAY_PROT
    do	
	for sessions in AB-BA #AA
	do
	    for prop in STD #FS
	    do
		m4 -D$prop -D$prot $dir/TextSecure-$sessions.m4.cv > $dir/TextSecure-$sessions.$prop.$prot.cv
		analyze TextSecure-$sessions.$prop.$prot "" $dir/TextSecure-$sessions.$prop.$prot.cv tests/$output
	    done
	done
    done    
done

) | tee tests/res-$output
egrep \(PROTOCOL\|'RESULT Could not prove'\|'All queries proved'\|xtime\|Error\|user\) tests/$output > tests/sum-$output


# The TLS conference version is tested only as a converted example.

echo
echo TLS 1.3 tech report version
echo
output=tlsx`date '+%Y.%m.%d-%H_%M_%S'`
dir=examples/tls13

(
for i in HKDFexpand KeySchedule1 KeySchedule2 KeySchedule3 tls13-core-InitialHandshake tls13-core-InitialHandshake-1RTTonly tls13-core-PSKandPSKDHE-NoCorruption tls13-core-RecordProtocol tls13-core-RecordProtocol-0RTT tls13-core-RecordProtocol-0RTT-badkey
do
analyze $i "" $dir/$i.cv tests/$output
done
) | tee tests/res-$output
egrep \(PROTOCOL\|'RESULT Could not prove'\|'All queries proved'\|xtime\|Error\|user\) tests/$output > tests/sum-$output

echo
echo ARINC 823
echo
output=arinc`date '+%Y.%m.%d-%H_%M_%S'`
dir=examples/arinc823
dirs=$dir/sharedkey
dirp=$dir/publickey

cat default.cvl $dir/arinc823prim.cvl > $dir/arinc823.cvl

(
    # preliminary lemmas
for i in $dirs/*.ocv
do
    analyze $i "" $i tests/$output
done

    # shared key
for prop in SECRECY AUTHENTICATION UKS KEY_SECRECY 
do

for prot in ORIGINAL SINGLE_TU REPLAY_PROT
do

file=arinc823-secret-key.$prop.$prot
m4 -D$prop -D$prot $dirs/arinc823-secret-key.$prop.m4.cv > $dirs/$file.cv
analyze $file "-lib $dir/arinc823" $dirs/$file.cv tests/$output

done
done

# public key - original protocol

for i in NOREPLAY_PROT REPLAY_PROT
do

    for j in SECRECY AUTHENTICATION KEY_SECRECY
    do
    
	m4 -D$i $dirp/arinc823-public-key.$j.m4.cv > $dirp/arinc823-public-key.$j.$i.cv
	analyze arinc823-public-key.$j.$i "-lib $dir/arinc823" $dirp/arinc823-public-key.$j.$i.cv tests/$output

    done

done

# public key - fixed protocol

for j in REPLAY_PROT #NOREPLAY_PROT 
do

m4 -D$j $dirp/arinc823-public-key.fixed.KEY_SECRECY.m4.cv > $dirp/arinc823-public-key.fixed.KEY_SECRECY.$j.cv
analyze arinc823-public-key.fixed.KEY_SECRECY.$j "-lib $dir/arinc823" $dirp/arinc823-public-key.fixed.KEY_SECRECY.$j.cv tests/$output

m4 -D$j $dirp/arinc823-public-key.fixed.SECRECY.m4.cv > $dirp/arinc823-public-key.fixed.SECRECY.$j.cv
analyze arinc823-public-key.fixed.SECRECY.$j "-lib $dir/arinc823" $dirp/arinc823-public-key.fixed.SECRECY.$j.cv tests/$output

for k in COMPROMISE_U COMPROMISE_V NO_COMPROMISE
do 

m4 -D$j -D$k $dirp/arinc823-public-key.fixed.AUTHENTICATION.m4.cv > $dirp/arinc823-public-key.fixed.AUTHENTICATION.$k.$j.cv
analyze arinc823-public-key.fixed.AUTHENTICATION.$k.$j "-lib $dir/arinc823" $dirp/arinc823-public-key.fixed.AUTHENTICATION.$k.$j.cv tests/$output

done
done

) | tee tests/res-$output
egrep \(PROTOCOL\|'RESULT Could not prove'\|'All queries proved'\|xtime\|Error\|user\) tests/$output > tests/sum-$output

echo
echo ICAO 9880 IV, May 2017
echo
output=icao9880-May17-`date '+%Y.%m.%d-%H_%M_%S'`
if [ -d ../dev/projects/2014ANRAirbus/ICAO9880-May2017/computational ]
then
    dir=../dev/projects/2014ANRAirbus/ICAO9880-May2017/computational
else
    dir=$HOME/dev/projects/2014ANRAirbus/ICAO9880-May2017/computational
fi

(
    for i in AirGround GroundGround AirGround-Fixed
    do
	analyze $i "" $dir/ATN-$i.cv tests/$output
    done
) | tee tests/res-$output
egrep \(PROTOCOL\|'RESULT Could not prove'\|'All queries proved'\|xtime\|Error\|user\) tests/$output > tests/sum-$output

echo
echo SSH secrecy key
echo
output=ssh`date '+%Y.%m.%d-%H_%M_%S'`
(
m4 implementation/ssh/ssh-secrecy-key.m4.ocv > implementation/ssh/ssh-secrecy-key.ocv    
analyze ssh-secrecy-key "-in oracles" implementation/ssh/ssh-secrecy-key.ocv tests/$output
) | tee tests/res-$output
egrep \(PROTOCOL\|'RESULT Could not prove'\|'All queries proved'\|xtime\|Error\|user\) tests/$output > tests/sum-$output

echo
echo WireGuard
echo
output=WG`date '+%Y.%m.%d-%H_%M_%S'`
(
    cd examples/wireguard
    if [ -f hashgen.ml ]
    then
	ocamlopt -o hashgen hashgen.ml
	./hashgen 1 10 > hashoracles.cvl
	cat preamble.cvl ../../default.cvl separator.cvl hashoracles.cvl boolean_choice.cvl > wireguard.cvl
    fi
    cd ../..

    analyze WG.25519.dos "-lib examples/wireguard/wireguard" examples/wireguard/WG.25519.dos.cv tests/$output

    sourcefilecorrectness=examples/wireguard/WG.25519.correctness.m4.cv
    sourcefileidentityhiding=examples/wireguard/WG.25519.identityhiding.m4.cv
    for replay_status in no_replay_prot replay_prot
    do

	modname=WG.25519.correctness.$replay_status
	filename=examples/wireguard/$modname
	m4 --define="m4_name=$filename" -Dm4_zero_test -Dm4_$replay_status $sourcefilecorrectness > $filename.cv
	analyze $modname "-lib examples/wireguard/wireguard" $filename.cv tests/$output

	# Identity hiding proved in the AB case only.
	modname=WG.25519.AB.identityhiding.$replay_status
	filename=examples/wireguard/$modname
	m4 --define="m4_name=$filename" -Dm4_zero_test -Dm4_$replay_status -Dm4_E_r_compr $sourcefileidentityhiding > $filename.cv
	analyze $modname "-lib examples/wireguard/wireguard" $filename.cv tests/$output
    done

    sourcefile=examples/wireguard/WG.25519.m4.cv
    sourcefileks=examples/wireguard/WG.25519.keysecrecy.m4.cv
    for sessions in AB AB-BA
    do
	pattern=WG.25519.$sessions
	patternks=WG.25519.keysecrecy.$sessions
	for replay_status in no_replay_prot replay_prot
	do

	    modname=$pattern.uniquesession_chbinding_weakUKS.$replay_status
	    filename=examples/wireguard/$modname
	    m4 --define="m4_name=$filename" -Dm4_zero_test -Dm4_uniquesession_chbinding_weakUKS -Dm4_E_i_compr -Dm4_E_r_compr -Dm4_$sessions -Dm4_$replay_status $sourcefile > $filename.cv
	    analyze $modname "-lib examples/wireguard/wireguard" $filename.cv tests/$output

	    modname=$pattern.only_psk.$replay_status
	    filename=examples/wireguard/$modname
	    m4 --define="m4_name=$filename" -Dm4_zero_test -Dm4_only_psk -Dm4_E_i_compr -Dm4_E_r_compr -Dm4_$sessions -Dm4_$replay_status $sourcefile > $filename.cv
	    analyze $modname "-lib examples/wireguard/wireguard" $filename.cv tests/$output

	    # The following is for the correspondence on the first message,
	    # in the case where no long-term keys are compromised. We cannot prove
	    # a correspondence on the first message in the case of any long-term
	    # key compromise, so it's fine to separate this.
	    modname=$pattern.1st_msg.$replay_status
	    filename=examples/wireguard/$modname
	    m4 --define="m4_name=$filename" -Dm4_zero_test -Dm4_first_msg_auth -Dm4_E_i_compr -Dm4_E_r_compr -Dm4_$sessions -Dm4_$replay_status $sourcefile > $filename.cv
	    analyze $modname "-lib examples/wireguard/wireguard" $filename.cv tests/$output


	    # The following is for correspondences on the second, third, and
	    # the transport data messages, message secrecy, and absence of unknown
	    # key share attacks.
	    for icompr in S_i_compr E_i_compr
	    do
		for rcompr in S_r_compr E_r_compr
		do
		    modname=$pattern.$icompr.$rcompr.$replay_status
		    filename=examples/wireguard/$modname
		    m4 --define="m4_name=$filename" -Dm4_zero_test -Dm4_$icompr -Dm4_$rcompr -Dm4_$sessions -Dm4_$replay_status $sourcefile > $filename.cv
		    analyze $modname "-lib examples/wireguard/wireguard" $filename.cv tests/$output
		done
	    done
	    
	    ## Variant for key secrecy, without transport data messages. We actually
	    ## reprove most properties for this model

	    modname=$patternks.uniquesession_chbinding_weakUKS.$replay_status
	    filename=examples/wireguard/$modname
	    m4 --define="m4_name=$filename" -Dm4_zero_test -Dm4_uniquesession_chbinding_weakUKS -Dm4_E_i_compr -Dm4_E_r_compr -Dm4_$sessions -Dm4_$replay_status $sourcefileks > $filename.cv
	    analyze $modname "-lib examples/wireguard/wireguard" $filename.cv tests/$output

	    modname=$patternks.only_psk.$replay_status
	    filename=examples/wireguard/$modname
	    m4 --define="m4_name=$filename" -Dm4_zero_test -Dm4_only_psk -Dm4_E_i_compr -Dm4_E_r_compr -Dm4_$sessions -Dm4_$replay_status $sourcefileks > $filename.cv
	    analyze $modname "-lib examples/wireguard/wireguard" $filename.cv tests/$output

	    modname=$patternks.1st_msg.$replay_status
	    filename=examples/wireguard/$modname
	    m4 --define="m4_name=$filename" -Dm4_zero_test -Dm4_first_msg_auth -Dm4_E_i_compr -Dm4_E_r_compr -Dm4_$sessions -Dm4_$replay_status $sourcefileks > $filename.cv
	    analyze $modname "-lib examples/wireguard/wireguard" $filename.cv tests/$output

	    for icompr in S_i_compr E_i_compr
	    do
		for rcompr in S_r_compr E_r_compr
		do
		    modname=$patternks.$icompr.$rcompr.$replay_status
		    filename=examples/wireguard/$modname
		    m4 --define="m4_name=$filename" -Dm4_zero_test -Dm4_$icompr -Dm4_$rcompr -Dm4_$sessions -Dm4_$replay_status $sourcefileks > $filename.cv
		    analyze $modname "-lib examples/wireguard/wireguard" $filename.cv tests/$output
		done
	    done
	    
	done
    done

    
) | tee tests/res-$output
egrep \(PROTOCOL\|'RESULT Could not prove'\|'All queries proved'\|xtime\|Error\|user\) tests/$output > tests/sum-$output

rm $TMP.*
