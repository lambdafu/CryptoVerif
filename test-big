#!/bin/bash

if [ -x ./xtime ]
then
    PROG=./xtime
else
    PROG=
fi

# The arguments of analyze are
# $1 = protocol name
# $2 = CryptoVerif options
# $3 = input filename (wrt the CryptoVerif directory)
# $4 = output filename (wrt the CryptoVerif directory)

function analyze()
{
	echo -n PROTOCOL $1 " "
	$PROG ./cryptoverif $2 $3 > tmp.out 2>&1 
	echo PROTOCOL $1 >> $4
	cat tmp.out >> $4
	egrep \(PROTOCOL\|'RESULT Could not prove'\|'All queries proved'\|xtime\|Error\|user\) tmp.out > tmp.res 
	awk '/EXPECTED/, /END/ { print $0; }' $3 | grep -v EXPECTED | grep -v END > tmp.expected
	grep -v user tmp.expected > tmp.expectedres
	grep -v user tmp.res > tmp.actualres
	if diff -q -b tmp.expectedres tmp.actualres >/dev/null
	then 
	    echo OK
	else
	    echo
	    echo RESULTS DIFFER! Expected:
	    cat  tmp.expectedres
	    echo Actual:
	    cat tmp.actualres
	fi
	(echo -n "EXPECTED: "; grep user tmp.expected ; echo -n "ACTUAL: "; grep user tmp.res) | awk '/^EXPECTED:/ { expectedtime = substr($2, 0, length($2)-1); } /^ACTUAL:/ { actualtime = substr($2, 0, length($2)-1); } END { if (actualtime != "") { if (actualtime + 0 > expectedtime * 1.2 + 0.2) { print "Slower: old=" expectedtime " new=" actualtime}; if (actualtime + 0 < expectedtime * 0.8 - 0.2) { print "Faster: old=" expectedtime " new=" actualtime; } } }'
}

mkdir -p tests

echo
echo TEXTSECURE
echo
output=textsecure`date '+%Y.%m.%d-%H_%M_%S'`
dir=../papers/2017EuroSP-KobeissiBhargavanBlanchet/scripts/cv
(
for prot in NO_REPLAY_PROT REPLAY_PROT
do

for sessions in AB-BA AA
do
for prop in STD FS
do
m4 -D$prop -D$prot $dir/TextSecure-$sessions.m4.cv > $dir/TextSecure-$sessions.$prop.$prot.cv
analyze TextSecure-$sessions.$prop.$prot "-lib $dir/TextSecure" $dir/TextSecure-$sessions.$prop.$prot.cv tests/$output
done
done

m4 -D$prot $dir/TextSecure-KCI.m4.cv > $dir/TextSecure-KCI.$prot.cv
analyze TextSecure-KCI.$prot "-lib $dir/TextSecure" $dir/TextSecure-KCI.$prot.cv tests/$output

done
) | tee tests/res-$output
egrep \(PROTOCOL\|'RESULT Could not prove'\|'All queries proved'\|xtime\|Error\|user\) tests/$output > tests/sum-$output


echo
echo TLS 1.3 conference version
echo
output=tls`date '+%Y.%m.%d-%H_%M_%S'`
dir=../papers/2017SP-BhargavanBlanchetKobeissi/scripts

cat default.cvl $dir/tls-primitives.cvl > $dir/tls-lib.cvl

(
for i in HKDFexpand KeySchedule1 KeySchedule2 KeySchedule3 tls13-core-InitialHandshake-LeakKeysIfCorrupted tls13-core-InitialHandshake-SecrecyServerSide tls13-core-InitialHandshake-Secrecy0.5RTT tls13-core-PSKandPSKDHE-NoCorruption tls13-core-RecordProtocol
do
analyze $i "-lib $dir/tls-lib" $dir/$i.cv tests/$output
done
) | tee tests/res-$output
egrep \(PROTOCOL\|'RESULT Could not prove'\|'All queries proved'\|xtime\|Error\|user\) tests/$output > tests/sum-$output

echo
echo TLS 1.3 tech report version
echo
output=tlsx`date '+%Y.%m.%d-%H_%M_%S'`
dir=../../repos/ProtoTLS/cv

cat default.cvl $dir/tls-primitives.cvl > $dir/tls-lib.cvl

(
for i in HKDFexpand KeySchedule1 KeySchedule2 KeySchedule3 tls13-core-InitialHandshake tls13-core-InitialHandshake-1RTTonly tls13-core-PSKandPSKDHE-NoCorruption tls13-core-RecordProtocol tls13-core-RecordProtocol-0RTT tls13-core-RecordProtocol-0RTT-badkey
do
analyze $i "-lib $dir/tls-lib" $dir/$i.cv tests/$output
done
) | tee tests/res-$output
egrep \(PROTOCOL\|'RESULT Could not prove'\|'All queries proved'\|xtime\|Error\|user\) tests/$output > tests/sum-$output

echo
echo ARINC 823
echo
output=arinc`date '+%Y.%m.%d-%H_%M_%S'`
dir=../papers/2017CSF-Blanchet/scripts
dirs=$dir/sharedkey/computational
dirp=$dir/publickey/computational

cat default.cvl $dir/arinc823prim.cvl > $dir/arinc823.cvl

(
# shared key
for prop in SECRECY AUTHENTICATION UKS KEY_SECRECY 
do

for prot in ORIGINAL SINGLE_TU REPLAY_PROT
do

file=arinc823-secret-key.$prop.$prot
m4 -D$prop -D$prot $dirs/arinc823-secret-key.$prop.m4.cv > $dirs/$file.cv
analyze $file "-lib $dir/arinc823" $dirs/$file.cv tests/$output

done
done

# public key - original protocol

for i in NOREPLAY_PROT REPLAY_PROT
do

    for j in SECRECY AUTHENTICATION KEY_SECRECY
    do
    
	m4 -D$i $dirp/arinc823-public-key.$j.m4.cv > $dirp/arinc823-public-key.$j.$i.cv
	analyze arinc823-public-key.$j.$i "-lib $dir/arinc823" $dirp/arinc823-public-key.$j.$i.cv tests/$output

    done

done

# public key - fixed protocol

for j in REPLAY_PROT #NOREPLAY_PROT 
do

m4 -D$j $dirp/arinc823-public-key.fixed.KEY_SECRECY.m4.cv > $dirp/arinc823-public-key.fixed.KEY_SECRECY.$j.cv
analyze arinc823-public-key.fixed.KEY_SECRECY.$j "-lib $dir/arinc823" $dirp/arinc823-public-key.fixed.KEY_SECRECY.$j.cv tests/$output

m4 -D$j $dirp/arinc823-public-key.fixed.SECRECY.m4.cv > $dirp/arinc823-public-key.fixed.SECRECY.$j.cv
analyze arinc823-public-key.fixed.SECRECY.$j "-lib $dir/arinc823" $dirp/arinc823-public-key.fixed.SECRECY.$j.cv tests/$output

for k in COMPROMISE_U COMPROMISE_V NO_COMPROMISE
do 

m4 -D$j -D$k $dirp/arinc823-public-key.fixed.AUTHENTICATION.m4.cv > $dirp/arinc823-public-key.fixed.AUTHENTICATION.$k.$j.cv
analyze arinc823-public-key.fixed.AUTHENTICATION.$k.$j "-lib $dir/arinc823" $dirp/arinc823-public-key.fixed.AUTHENTICATION.$k.$j.cv tests/$output

done
done

) | tee tests/res-$output
egrep \(PROTOCOL\|'RESULT Could not prove'\|'All queries proved'\|xtime\|Error\|user\) tests/$output > tests/sum-$output

echo
echo ICAO 9880 IV, May 2017
echo
output=icao9880-May17-`date '+%Y.%m.%d-%H_%M_%S'`
dir=../projects/2014ANRAirbus/ICAO9880-May2017/computational
(
    for i in AirGround GroundGround AirGround-Fixed
    do
	analyze $i "" $dir/ATN-$i.cv tests/$output
    done
) | tee tests/res-$output
egrep \(PROTOCOL\|'RESULT Could not prove'\|'All queries proved'\|xtime\|Error\|user\) tests/$output > tests/sum-$output

echo
echo SSH secrecy key
echo
output=ssh`date '+%Y.%m.%d-%H_%M_%S'`
(
analyze ssh-secrecy-key "-in oracles" implementation/ssh/ssh-secrecy-key.ocv tests/$output
) | tee tests/res-$output
egrep \(PROTOCOL\|'RESULT Could not prove'\|'All queries proved'\|xtime\|Error\|user\) tests/$output > tests/sum-$output

rm tmp.*
