(* One-Encryption Key Exchange *)

(* Proof indications *)

proof {
set maxIterSimplif = 3;
set uniqueBranchReorganize = false;
show_game occ;
insert 261 "let concat(xx1,xx2,xx3,xx4,xx5) = h1x in"; (* just after OH1(..):= *)
crypto rom(h1);
show_game occ;
insert 169 "find j <= NU suchthat defined(X_9[j]) && X_9[j] = X_s then"; (* just after OS2(..):= *)
show_game occ;
insert 304 "find jh <= qH1 suchthat defined(xx1[jh], xx2[jh], xx3[jh], xx4[jh], r_2[jh]) && (U = xx1[jh]) && (S = xx2[jh]) && (X_s = xx3[jh]) && (Y_8 = xx4[jh]) && (auth_s = r_2[jh]) then"; (* beginning of the "else" branch of the just inserted find *)
show_game occ;
insert_event Auth 337; (* "then" branch of the just inserted find *)
simplify;
crypto icm(enc);
show_game occ;
insert_event Encrypt 551; (* beginning of the branch "find ... && (pw = ke[..]) then .." in OC2 *)
show_game occ;
insert 1037 "let concat(x01,x02,x03,x04,x05) = h0x in"; (* just after OH0(..) := *)
crypto rom(h0);
SArename Y_u;
auto;
set uniqueBranchReorganize = true;
show_game;
move array X_4; (* variable chosen at the end of OC2 and not used immediately *)
move binder r;
show_game;
merge_arrays X Y;
merge_branches;
move array X_1; (* variable chosen in OP and not used immediately *)
(*show_game;
merge_arrays X Y_..;
merge_branches;*)
move array X_3; (* variable chosen in OS1 and not used immediately *)
(*show_game;
merge_arrays X Y_..;*)
show_game occ;
insert 111 "find jh' <= qH1, jd <= qD suchthat defined(xx1[jh'], xx2[jh'], xx3[jh'], xx4[jh'], r_2[jh'], m_2[jd], kd_1[jd], X[jd]) && (m_2[jd] = re) && (U = xx1[jh']) && (S = xx2[jh']) && (X_s = xx3[jh']) && (xx4[jh'] = X[jd]) && (auth_s = r_2[jh'])  && (kd_1[jd] = pw) then";
show_game occ;
insert_event Auth2 158;
simplify;
merge_branches;
simplify coll_elim(variables: pw);
success
}

(* Parameter and type declarations *)

param NU, NS [small].
param NP [passive].

type Z [large, bounded].
type G [large, bounded].
type passwd [password, bounded].

type hash0 [fixed].
type hash1 [fixed,large].
type host [bounded].

(* Computational Diffie-Hellman *)

proba pCDH.

expand CDH(G, Z, g, exp, mult, pCDH).

(* Ideal cipher model *)

type cipherkey [fixed].

expand ICM_cipher(cipherkey, passwd, G, enc, dec).

param qE, qD [noninteractive].


(* Hash functions in the random oracle model *)

type hashkey [fixed].

fun concat(host, host, G, G, G): bitstring [data].

param qH0, qH1 [noninteractive].

expand ROM_hash(hashkey, bitstring, hash0, h0).

 

expand ROM_hash(hashkey, bitstring, hash1, h1).

 

(* Host names *)

const U : host.
const S : host.

(* Queries *)

query secret sk_u.
query secret sk_s.

event termS(host, G, host, G, hash1, hash0).
event acceptU(host, G, host, G, hash1, hash0).

query k: hash0, a: hash1, Ystar: G, y: host, X: G, x: host;
  inj-event(termS(x, X, y, Ystar, a, k)) ==> inj-event(acceptU(x, X, y, Ystar, a, k)) public_vars sk_u, sk_s.
query k': hash0, k: hash0, a: hash1, Ystar: G, y: host, X: G, x: host;
  event(termS(x, X, y, Ystar, a, k)) && event(acceptU(x, X, y, Ystar, a, k')) ==> (k = k') public_vars sk_u, sk_s.

(* Client *)



(* Server *)



(* Sessions that are subject only to a passive attack.
   We send a transcript of the session *)



process 
	Ostart() :=
hk0 <-R hashkey;
hk1 <-R hashkey;
ck_1 <-R cipherkey;
pw <-R passwd;
return();
((
  foreach iU <= NU do
  OC1() :=
  x_4 <-R Z;
  X_9: G <- exp(g, x_4);
  return(U, X_9);
  OC2(=S, Ystar_u: G) :=
  Y_u: G <- dec(ck_1, Ystar_u, pw);
  K_u: G <- exp(Y_u, x_4);
  auth_u: hash1 <- h1(hk1, concat(U, S, X_9, Y_u, K_u));
  sk_u: hash0 <- h0(hk0, concat(U, S, X_9, Y_u, K_u));
  event acceptU(U, X_9, S, Ystar_u, auth_u, sk_u);
  return(auth_u)
) | (
  foreach iS <= NS do
  OS1(=U, X_s: G) :=
  y_1 <-R Z;
  Y_8: G <- exp(g, y_1);
  Ystar: G <- enc(ck_1, Y_8, pw);
  return(S, Ystar);
  OS2(auth_s: hash1) :=
  K_s: G <- exp(X_s, y_1);
  if auth_s = h1(hk1, concat(U, S, X_s, Y_8, K_s)) then
  sk_s: hash0 <- h0(hk0, concat(U, S, X_s, Y_8, K_s));
  event termS(U, X_s, S, Ystar, auth_s, sk_s)
) | (
  foreach iP <= NP do
  OP() :=
  xp <-R Z;
  Xp: G <- exp(g, xp);
  yp <-R Z;
  Yp: G <- exp(g, yp);
  Kp: G <- exp(g, mult(xp, yp));
  Ystarp: G <- enc(ck_1, Yp, pw);
  authp: hash1 <- h1(hk1, concat(U, S, Xp, Yp, Kp));
  sk_p: hash0 <- h0(hk0, concat(U, S, Xp, Yp, Kp));
  return(U, Xp, S, Ystarp, authp)
) | (
  foreach iE <= qE do
  Oenc(x_5: G, ke_1: passwd) :=
  return(enc(ck_1, x_5, ke_1))
) | (
  foreach iD <= qD do
  Odec(m_2: G, kd_1: passwd) :=
  return(dec(ck_1, m_2, kd_1))
) | (
  foreach iH0 <= qH0 do
  OH0(h0x: bitstring) :=
  return(h0(hk0, h0x))
) | (
  foreach iH1 <= qH1 do
  OH1(h1x: bitstring) :=
  return(h1(hk1, h1x))
))



(* EXPECTED
All queries proved.
3.332s (user 3.312s + system 0.020s), max rss 34536K
END *)
