(* This file proves that, when the handshake secret hs is a fresh random value,
log_1 -> derive-secret(hs, client_hts, log_1)
      || derive-secret(hs, server_hts, log_1)
is indistinguishable from a random function and 
\hkdfextract(hs, 0) is indistinguishable from a fresh random value 
independent from this random function. *)

(* Proof indications *)

proof {
      auto;
      show_game;
      SArename r2_1;
      auto
      }


type extracted [large, fixed].
type key [large, fixed].
type two_keys [large, fixed].
type label.

(* HMAC is a PRF *)

fun HMAC(extracted, bitstring):key.

proba Pprf.

param N, N3.

equiv(prf(HMAC))
  ! N3 new r: extracted; ! N O(x: bitstring) := return(HMAC(r,x))
<=(N3 * (2/|extracted| + Pprf(time + (N3-1)* N * time(HMAC, maxlength(x)), N, maxlength(x))))=>
  ! N3 ! N O(x: bitstring) := find [unique] j <= N suchthat defined(x[j], r2[j]) && (x = x[j]) then return(r2[j]) else new r2: key; return(r2).

(* Hash is a collision resistant hash function *)

type hashkey [large,fixed].
type hash [fixed].
proba Phash.
expand CollisionResistant_hash(hashkey, bitstring, hash, Hash, Phash).

(* Derive_secret(Secret, Label, Messages) =
   HKDF_expand_label(Secret, Label, Hash(Messages), Hash.length) =
   HKDF_expand(Secret, [Hash.length, "TLS 1.3, " + Label, Hash(Messages)], Hash.length) =
   HMAC(Secret, [Hash.length, "TLS 1.3, " + Label, Hash(Messages), 0x00])

We define build_arg(Label, Hash) = [Length, "TLS 1.3, " + Label, Hash, 0x00].
*)

fun build_arg(label, hash): bitstring [data].

letfun HKDF_expand_label(Secret: extracted, Label: label, HashValue: hash) =
       HMAC(Secret, build_arg(Label, HashValue)).

letfun Derive_secret(hk: hashkey, Secret: extracted, Label: label, Messages: bitstring) = 
       HKDF_expand_label(Secret, Label, Hash(hk, Messages)).

letfun HKDF_extract(Salt: extracted, Ikm: bitstring) =
       HMAC(Salt, Ikm).

fun concat(key, key): two_keys [data].

equiv(concat )
  ! N new r1: key; new r2: key; O() := return(concat(r1, r2))
<=(0)=>
  ! N new r: two_keys; O() := return(r).

(* Labels *)

const client_hts : label. (* hts = handshake traffic secret *)
const server_hts : label.

(* Concatenation of client_handshake_traffic_secret and server_handshake_traffic_secret *)

letfun Derive_Secret_cs_hts(hk: hashkey, HandshakeSecret: extracted, log: bitstring) =
       concat(Derive_secret(hk, HandshakeSecret, client_hts, log),
              Derive_secret(hk, HandshakeSecret, server_hts, log)).

(* Master Secret *)

const zero: bitstring.

letfun HKDF_extract_zero(HandshakeSecret: extracted) =
       HKDF_extract(HandshakeSecret, zero).

equation forall l: label, h: hash; build_arg(l, h) <> zero.

(* Prove equivalence between processLeft and processRight *)

query secret b.

channel start, c1, c2, c3.





process
	in(start, ());
new b: bool;
new hk: hashkey;
if b then
  out(start, hk);
  ! i_1 <= N3
  in(c1[i_1], ());
  new hs: extracted;
  out(c1[i_1], ());
  ((
    ! i_2 <= N
    in(c2[i_2, i_1], log0: bitstring);
    out(c2[i_2, i_1], (let hk_1: hashkey = hk in (let HandshakeSecret: extracted = hs in (let log_1: bitstring = log0 in concat(HMAC(HandshakeSecret, build_arg(client_hts, Hash(hk_1, log_1))), HMAC(HandshakeSecret, build_arg(server_hts, Hash(hk_1, log_1))))))))
  ) | (
    in(c3[i_1], ());
    out(c3[i_1], (let HandshakeSecret_1: extracted = hs in HMAC(HandshakeSecret_1, zero)))
  ))
else
  out(start, hk);
  ! i_3 <= N3
  in(c1[i_3], ());
  out(c1[i_3], ());
  ((
    ! i_4 <= N
    in(c2[i_4, i_3], log: bitstring);
    find [unique] j_5 = j_6 <= N suchthat defined(log[j_6], r[j_6]) && (log = log[j_6]) then
      out(c2[i_4, i_3], r[j_5])
    else
      new r: two_keys;
      out(c2[i_4, i_3], r)
  ) | (
    in(c3[i_3], ());
    new r': key;
    out(c3[i_3], r')
  ))


	     
(* EXPECTED
All queries proved.
0.024s (user 0.020s + system 0.004s), max rss 11180K
END *)
