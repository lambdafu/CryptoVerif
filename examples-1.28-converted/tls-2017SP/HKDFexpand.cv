(* This file proves that, when l_1, l_2, l_3 are pairwise distinct
labels and s is a fresh random value, HKDF-expand-label(s, l_i, "") for 
i = 1,2,3 are indistinguishable from independent fresh random values. *)

type key [large, fixed].
type label.

(* HMAC is a PRF *)

fun HMAC(key, bitstring):key.

proba Pprf.

param N, N3.

equiv(prf(HMAC))
  ! N3 new r: key; ! N O(x: bitstring) := return(HMAC(r,x))
<=(N3 * (2/|key| + Pprf(time + (N3-1)* N * time(HMAC, maxlength(x)), N, maxlength(x))))=>
  ! N3 ! N O(x: bitstring) := find [unique] j <= N suchthat defined(x[j], r2[j]) && (x = x[j]) then return(r2[j]) else new r2: key; return(r2).

(* HKDF_expand_label_empty_bytes(Secret, Label) = 
   HKDF_expand_label(Secret, Label, "", Length) =
   HKDF_expand(Secret, [Length, "TLS 1.3, " + Label, ""], Length) =
   Truncate(HMAC(Secret, [Length, "TLS 1.3, " + Label, "", 0x00]), Length)

The Length is supposed to be fixed from the Label (true for a given configuration).
Length <= Hash.length
We ignore the final truncation; we assume that the caller will use only
the first Length bits.
We define build_arg(Label) = [Length, "TLS 1.3, " + Label, "", 0x00].
*)

fun build_arg(label): bitstring [data].

letfun HKDF_expand_label_empty_bytes(Secret: key, Label: label) =
       HMAC(Secret, build_arg(Label)).

(* Three different constant labels
   Typical labels: "finished", "key", "iv" for the handshake_traffic_secret
   or "application traffic secret", "key", "iv" for the traffic_secret_N *)

const l1: label.
const l2: label.
const l3: label.

letfun HKDF_expand_l1(Secret: key) =
       HKDF_expand_label_empty_bytes(Secret, l1).
letfun HKDF_expand_l2(Secret: key) =
       HKDF_expand_label_empty_bytes(Secret, l2).
letfun HKDF_expand_l3(Secret: key) =
       HKDF_expand_label_empty_bytes(Secret, l3).


(* Prove equivalence between processLeft and processRight *)

query secret b.

channel start, c1, c2, c3, c4.




    
process
	in(start, ());
new b: bool;
if b then
  out(start, ());
  ! i_1 <= N3
  in(c1[i_1], ());
  new k: key;
  out(c1[i_1], ());
  ((
    in(c2[i_1], ());
    out(c2[i_1], (let Secret: key = k in HMAC(Secret, build_arg(l1))))
  ) | (
    in(c3[i_1], ());
    out(c3[i_1], (let Secret_1: key = k in HMAC(Secret_1, build_arg(l2))))
  ) | (
    in(c4[i_1], ());
    out(c4[i_1], (let Secret_2: key = k in HMAC(Secret_2, build_arg(l3))))
  ))
else
  out(start, ());
  ! i_2 <= N3
  in(c1[i_2], ());
  out(c1[i_2], ());
  ((
    in(c2[i_2], ());
    new r1: key;
    out(c2[i_2], r1)
  ) | (
    in(c3[i_2], ());
    new r2: key;
    out(c3[i_2], r2)
  ) | (
    in(c4[i_2], ());
    new r3: key;
    out(c4[i_2], r3)
  ))



(* EXPECTED
All queries proved.
0.024s (user 0.016s + system 0.008s), max rss 38896K
END *)
