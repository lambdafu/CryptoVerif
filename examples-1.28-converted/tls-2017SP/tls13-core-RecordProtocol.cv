(* This file proves properties of the record protocol,
assuming the client and server initially share a random
traffic secret. *)


type key [fixed, large].
type seqn [fixed].
type nonce_t [fixed, large].

param N, Nk, Ne, Nd, Ns, Nr.

(* We use the lemma proved in HKDFexpand.cv *)

fun HKDF_expand_upd_label(key): key.
fun HKDF_expand_key_label(key): key.
fun HKDF_expand_iv_label(key): key.

proba Pprf_upd_key_iv.

equiv(prf_upd_key_iv )
  ! N new r: key; (
    O1() := return(HKDF_expand_upd_label(r)) |
    O2() := return(HKDF_expand_key_label(r)) |
    O3() := return(HKDF_expand_iv_label(r)))
<=(N * Pprf_upd_key_iv(time + (N-1)*(time(HKDF_expand_upd_label) + time(HKDF_expand_key_label) + time(HKDF_expand_iv_label))))=>
  ! N (
    O1() := new r1: key; return(r1) |
    O2() := new r2: key; return(r2) |
    O3() := new r3: key; return(r3)).

(* Injectivity of xor *)

fun xor(key, seqn): nonce_t.

equation forall k: key, n: seqn, n': seqn;
       (xor(k, n) = xor(k,n')) = (n = n').

(* AEAD *)

fun AEAD_encrypt(key, nonce_t, bitstring): bitstring.
fun AEAD_decrypt(key, nonce_t, bitstring): bitstringbot.

(* encryption is IND-CPA and INT-CTXT provided the nonce is distinct
   for each encryption *)

(* Z(x) is a bitstring of the same length as x, containing only zeroes *)
fun Z(bitstring): bitstring.

(* injbot is the natural injection from bitstring to bitstring union bottom *)
fun injbot(bitstring):bitstringbot [data].
equation forall x:bitstring; injbot(x) <> bottom.

equation forall k: key, nonce: nonce_t, msg: bitstring;
      AEAD_decrypt(k, nonce, AEAD_encrypt(k, nonce, msg)) = injbot(msg).

fun AEAD_encrypt'(key, nonce_t, bitstring): bitstring.

proba Penc.
event repeated_nonce.

equiv
  ! Nk new k: key; (
    ! Ne Oenc(nonce_e: nonce_t, msg: bitstring) := return(AEAD_encrypt(k, nonce_e, msg)) |
    ! Nd Odec(nonce_d: nonce_t, cip: bitstring) := return(AEAD_decrypt(k, nonce_d, cip)))
<=(Nk * Penc(time + (Nk-1)*(Ne*time(AEAD_encrypt, maxlength(msg)) + Ne*time(Z, maxlength(msg)) +
      		            Nd*time(AEAD_decrypt, maxlength(cip))), Ne, Nd, maxlength(msg), maxlength(cip)))=>
  ! Nk new k: key; (
    ! Ne Oenc(nonce_e: nonce_t, msg: bitstring) := find i <= Ne suchthat defined(nonce_e[i], r[i]) && (nonce_e = nonce_e[i]) then event_abort repeated_nonce else let r: bitstring = AEAD_encrypt'(k, nonce_e, Z(msg)) in return(r) |
    ! Nd Odec(nonce_d: nonce_t, cip: bitstring) := find j <= Ne suchthat defined(msg[j], nonce_e[j], r[j]) && nonce_d = nonce_e[j] && cip = r[j] then return(injbot(msg[j])) else return(bottom)).

(* Test function *)

fun test(bool, bitstring, bitstring): bitstring.
equation forall x:bitstring,y:bitstring; test(true,x,y) = x.
equation forall x:bitstring,y:bitstring; test(false,x,y) = y.
equation forall b:bool,x:bitstring; test(b,x,x) = x.

equation forall b:bool,x:bitstring,y:bitstring; 
       Z(test(b, x, y)) = test(b, Z(x), Z(y)).

(* Tables used to record previously used sequence numbers,
   to avoid reusing them *)

table table_count_send(seqn).
table table_count_recv(seqn).

(* Secrecy of plaintexts *)

query secret b public_vars updated_key.

(* Message authenticity *)

event sent(seqn, bitstring).
event received(seqn, bitstring).

query msg: bitstring, count: seqn;
  inj-event(received(count, msg)) ==> inj-event(sent(count, msg)) public_vars b, updated_key.

(* Secrecy of updated key *)

query secret updated_key public_vars b.

channel io1, io2, io3, io4, io5, io6, io7, io8.






    
    

process
	in(io1, ());
new b: bool;
new traffic_secret_N: key;
let traffic_secret_Nplus1: key = HKDF_expand_upd_label(traffic_secret_N) in
let k: key = HKDF_expand_key_label(traffic_secret_N) in
let iv: key = HKDF_expand_iv_label(traffic_secret_N) in
out(io2, ());
((
  in(io3, ());
  let updated_key: key = traffic_secret_Nplus1 in
  out(io4, ())
) | (
  ! i_1 <= Ns
  in(io5[i_1], (clear1: bitstring, clear2: bitstring, count_1: seqn));
  get table_count_send(=count_1) in
    yield
  else
    insert table_count_send(count_1);
    if Z(clear1) = Z(clear2) then
    let clear: bitstring = test(b, clear1, clear2) in
    event sent(count_1, clear);
    let nonce: nonce_t = xor(iv, count_1) in
    let cipher: bitstring = AEAD_encrypt(k, nonce, clear) in
    out(io6[i_1], cipher)
) | (
  ! i_2 <= Nr
  in(io7[i_2], (cipher_1: bitstring, count_2: seqn));
  get table_count_recv(=count_2) in
    yield
  else
    insert table_count_recv(count_2);
    let nonce_1: nonce_t = xor(iv, count_2) in
    let injbot(clear_1: bitstring) = AEAD_decrypt(k, nonce_1, cipher_1) in
    event received(count_2, clear_1)
))



(* EXPECTED
All queries proved.
0.052s (user 0.048s + system 0.004s), max rss 11552K
END *)
