(* Version in which the participants only talk to A and B 
   Using two series of function symbols to prevent repeated applications
   of the same cryptographic rule.
*)

param N, N'.
param N2.
param N3.

type nonce [large,fixed].
type host [bounded].
type mkey [bounded].
type mkeyseed [fixed].
type key [fixed].
type keyseed [fixed].
type seed [fixed].
type macs [fixed].
type maxenc [bounded].
type maxmac [bounded].

fun concat1(nonce, nonce, host, host):maxenc [data].
fun concat2(nonce, key):maxenc [data].

equation forall y:nonce,z:nonce,t:host,u:host, y2:nonce,z2:key; concat1(y,z,t,u) <> concat2(y2,z2).

(* Shared-key encryption (CPA Stream cipher) *)

proba Penc.

expand IND_CPA_sym_enc(keyseed, key, maxenc, maxmac, seed, kgen, enc, dec, injbot, Z, Penc).

(* The function Z returns for each bitstring, a bitstring
   of the same length, consisting only of zeroes. *)
const Zconcat1:maxenc.
const Zconcat2:maxenc.
equation forall y:nonce,z:nonce,t:host,u:host; 
	Z(concat1(y,z,t,u)) = Zconcat1.
equation forall y:nonce,z:key; 
	Z(concat2(y,z)) = Zconcat2.

(* Mac *)

proba Pmac.

expand UF_CMA_mac(mkeyseed, mkey, maxmac, macs, mkgen, mac, check, Pmac).

(* Queries *)

query secret keyA [onesession].
query secret keyB [onesession].

query secret keyA.
query secret keyB.

channel c1, c2, c3, c4, c5, c6, c7, c8, c9, start, finish.
const A : host.
const B : host.

event endA(host, host, nonce, key).
event endB(host, host, nonce, key).
event beginA(host, host, nonce).
event beginB(host, host, nonce).

query x:host, y:host, n:nonce, k:key; 
	event(endA(x,y,n,k)) ==> event(beginB(x,y,n)) public_vars keyA, keyB.
query x:host, y:host, n:nonce, k:key; 
	event(endB(x,y,n,k)) ==> event(beginA(x,y,n)) public_vars keyA, keyB.
query x:host, y:host, n:nonce, k:key; 
	inj-event(endA(x,y,n,k)) ==> inj-event(beginB(x,y,n)) public_vars keyA, keyB.
query x:host, y:host, n:nonce, k:key; 
	inj-event(endB(x,y,n,k)) ==> inj-event(beginA(x,y,n)) public_vars keyA, keyB.


let processA(i1 <= N, i1' <= N', Kas: key, mKas: mkey) = 
	in(start[i1',i1], ());
	new M : nonce;
	new Na : nonce;
	new s1 : seed;
	let ea1 = enc(concat1(Na, M, A, B), Kas, s1) in
	event beginA(A, B, M);
	out(c1, (M, A, B, ea1, mac(ea1, mKas)));
	in(c2, (=M, ea2: maxmac, ma2: macs));
	if check(ea2, mKas, ma2) then
	let injbot(concat2(=Na, k)) = dec(ea2, Kas) in
	event endA(A, B, M, k);
	let keyA:key = k.

let processB(i2 <= N, Kbs: key, mKbs: mkey) =
	in(c3[i2], (M: nonce, =A, =B, ea:maxmac, ma:macs));
	new Nb : nonce;
	new s2 : seed;
	let e2 = enc(concat1(Nb, M, A, B), Kbs, s2) in
	event beginB(A, B, M);
	out(c4, (M, A, B, ea, ma, e2, mac(e2, mKbs)));
	in(c5, (=M, ea2: maxmac, ma2: macs, eb2: maxmac, mb2: macs));
	if check(eb2, mKbs, mb2) then
	let injbot(concat2(=Nb, k)) = dec(eb2, Kbs) in
	out(c6, (M, ea2, ma2));
	in(finish, ());
	event endB(A, B, M, k);
	let keyB:key = k.

let processS(Kas: key, mKas: mkey, Kbs: key, mKbs: mkey) =
	in(c7, (M: nonce, =A, =B, ea1: maxmac, ma1: macs, eb1: maxmac, mb1: macs));
	if check(ea1, mKas, ma1) then
	let injbot(concat1(Na, =M, =A, =B)) = dec(ea1, Kas) in
	if check(eb1, mKbs, mb1) then
	let injbot(concat1(Nb, =M, =A, =B)) = dec(eb1, Kbs) in
	new k: key;
	new s3: seed;
	new s4: seed;
	let e1 = enc(concat2(Na, k), Kas, s3) in
	let e2 = enc(concat2(Nb, k), Kbs, s4) in
	out(c8, (M, e1, mac(e1, mKas), e2, mac(e2, mKbs))).
	
process 
	in(start, ());
	new rKas: keyseed;
	let Kas = kgen(rKas) in
	new rmKas: mkeyseed;
	let mKas = mkgen(rmKas) in
	new rKbs: keyseed;
	let Kbs = kgen(rKbs) in
	new rmKbs: mkeyseed;
	let mKbs = mkgen(rmKbs) in
	out(c9, ());
	((! i1 <= N !i1' <= N' processA(i1, i1', Kas, mKas)) |
	 (! i2 <= N processB(i2, Kbs, mKbs)) | 
	 (! i3 <= N processS(Kas, mKas, Kbs, mKbs)))

(* EXPECTED
RESULT Could not prove event inj:endB(x, y, n, k) ==> inj:beginA(x, y, n).
0.160s (user 0.160s + system 0.000s), max rss 32160K
END *)
