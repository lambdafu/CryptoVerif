param N,N'.

type pad_rand [fixed]. (*size 255 bytes or less depending on how the padding is done*)
type cookie [fixed, large]. (* 16 bytes *)
type tag [bounded]. (* 1 byte *)
type uint32 [bounded]. (* 4 bytes *)
type D [fixed].
type hashkey [bounded].
type hash [fixed, large].
type signature [bounded].
type block [fixed].
type sseed [fixed].
type skeyseed [large, fixed].
type sskey [bounded, large].
type spkey [bounded, large].
type mkeyseed [fixed].
type mkey [bounded, large].
type macinput [bounded].
type macres [large].
type iv [fixed, large].
type symkey [fixed, large].
type symkeyseed [fixed, large].

fun skp(spkey,sskey): bitstring [data].

type Z [large, bounded]. (*mpint = ssh string (size+string payload). MSB. 8 bits per byte. where 0=empty string, >0=first bit=0, <0=first bit=1,at beginning no useless 00 or FF. *)
type G [large, bounded]. (*mpint*)

fun bitstring_of_G(G): bitstring [data].

fun padr(bitstring,pad_rand): bitstring.
letfun pad(m:bitstring) = r <-R pad_rand; padr(m, r).
fun unpad(bitstring): bitstringbot.

fun injbot(bitstring): bitstringbot [data].
equation forall x: bitstring; injbot (x) <> bottom.
equation forall x: bitstring, r: pad_rand;
       unpad(padr(x, r)) = injbot(x).

(* utils *)

fun get_size(bitstring): uint32.

fun concatm(tag, bitstring): bitstring [data].
fun concatKEXINIT(cookie, bitstring): bitstring [data].
fun concat8(bitstring, bitstring, bitstring, bitstring, spkey, G, G, G): bitstring [data].
fun concatKEXDHREPLY(spkey, G, signature): bitstring [data].
fun concat(bitstring, bitstring): bitstring.
fun concatnm(uint32, bitstring): bitstring [data].
fun concatem(bitstring, macres): bitstring [data].
fun check_algorithms(bitstring): bool.
fun block_of_hash(hash): block [data].

const negotiation_string: bitstring.
const tag_kexdh_init: tag.
const tag_kexdh_reply: tag.
const tag_kex_init: tag.
const tag_newkeys: tag.
const uint32_zero: uint32.
const null_string: bitstring. (*the string of length 0 *)

(*CDH*)

proba pCDH.

expand CDH(G, Z, g, exp, mult, pCDH).

letfun message(x: Z) = exp(g, x).

(*MAC*)

fun mac(bitstring, mkey): macres.
fun check_mac(bitstring, mkey, macres): bool.
fun mkgen(mkeyseed): mkey.

equation forall m: bitstring, r: mkeyseed;
	check_mac(m, mkgen(r), mac(m, mkgen(r))).

(* symmetric encryption *)

fun kgen(symkeyseed): symkey.
fun enc(bitstring, symkey, iv): bitstring.
fun dec(bitstring, symkey, iv): bitstringbot.

equation forall m: bitstring, r: symkeyseed, r2: iv;
    dec(enc(m, kgen(r), r2), kgen(r), r2) = injbot (m).

(*hash function *)

param qH [noninteractive].
proba Phash.

expand CollisionResistant_hash(hashkey, bitstring, hash, h, Phash).


(* signature *)

proba Psign.
proba Psigncoll.

expand UF_CMA_signature(skeyseed, spkey, sskey, block, signature, sseed, sskgen, spkgen, signr, check, Psign, Psigncoll).

letfun kgen_s () = r <-R skeyseed; skp(spkgen(r), sskgen(r)).

letfun sign(m: block, sk: sskey) = r <-R sseed; signr(m, sk, r).

(* utils *)

const tag_IVC: tag.
const tag_IVS: tag.
const tag_EKC: tag.
const tag_EKS: tag.
const tag_MKC: tag.
const tag_MKS: tag.

fun iv_of_hash (hash): iv.
fun symkey_of_hash (hash): symkey.
fun mkey_of_hash (hash): mkey.

fun concat4(G, hash, tag, hash): bitstring [data].
letfun gen(hk:hashkey, k:G, h1:hash, c:tag, h2:hash) = h(hk, concat4(k, h1, c, h2)).
letfun genIVC(hk:hashkey, k:G, h1:hash, h2:hash) = iv_of_hash(gen(hk, k, h1, tag_IVC, h2)).
letfun genIVS(hk:hashkey, k:G, h1:hash, h2:hash) = iv_of_hash(gen(hk, k, h1, tag_IVS, h2)).
letfun genEKC(hk:hashkey, k:G, h1:hash, h2:hash) = symkey_of_hash(gen(hk, k, h1, tag_EKC, h2)).
letfun genEKS(hk:hashkey, k:G, h1:hash, h2:hash) = symkey_of_hash(gen(hk, k, h1, tag_EKS, h2)).
letfun genMKC(hk:hashkey, k:G, h1:hash, h2:hash) = mkey_of_hash(gen(hk, k, h1, tag_MKC, h2)).
letfun genMKS(hk:hashkey, k:G, h1:hash, h2:hash) = mkey_of_hash(gen(hk, k, h1, tag_MKS, h2)).

equation forall k: G, h1: hash, c: tag, h2: hash, x1: bitstring, x2: bitstring, x3: bitstring, x4: bitstring, x5: spkey, x6: G, x7: G, x8: G;
   concat4(k, h1, c, h2) <> concat8(x1, x2, x3, x4, x5, x6, x7, x8).

(* key table *)

table trusted_hosts(spkey).


(* implementation *)

implementation 
	       type sseed = 160;
	       type Z = "string" [random = "(dh_rand dh_group14)" ];
	       type cookie = 128;
               type iv = 128;
	       type sskey = "Ssh_crypto.skey" [serial = "Ssh_crypto.skey_to","Ssh_crypto.skey_from"];
	       type spkey = "Ssh_crypto.pkey" [serial = "Ssh_crypto.pkey_to_file","Ssh_crypto.pkey_from_file"];
	       type hashkey = "unit" [serial = "(fun () -> \"\")","(fun _ -> ())"; random = "(fun () -> ())"];
	       type uint32 = "int";
	       type macres = "string";
               type hash = 160;
	       const uint32_zero = "0";
	       const negotiation_string = "Ssh_crypto.negotiation_string";
	       const tag_kex_init = "Ssh_crypto.tag_kex_init";
	       const tag_kexdh_init = "Ssh_crypto.tag_kexdh_init";
	       const tag_kexdh_reply = "Ssh_crypto.tag_kexdh_reply";
	       const tag_newkeys = "Ssh_crypto.tag_newkeys";
	       const null_string ="\"\"";
	       const bottom = "()";
	       fun concatm = "Ssh_crypto.concatm" [inverse = "Ssh_crypto.unconcatm"];
	       fun concatKEXINIT = "Ssh_crypto.concatn" [inverse = "Ssh_crypto.unconcatn"];
	       fun concat8 = "Ssh_crypto.concat8";
	       fun concatKEXDHREPLY = "Ssh_crypto.concat3" [inverse = "Ssh_crypto.unconcat3"];
	       fun concat = "Ssh_crypto.concatmsm";
	       fun concatem = "Ssh_crypto.concatem";
	       fun concatnm = "Ssh_crypto.concatnm";
	       fun pad = "Ssh_crypto.ssh_pad 16";
	       fun unpad = "Ssh_crypto.ssh_unpad";
	       fun bitstring_of_G = "Ssh_crypto.mpint_of_g" [inverse = "Ssh_crypto.g_of_mpint"];
	       fun message = "(dh_message dh_group14)";
	       fun exp = "(dh_exp dh_group14)";
	       fun h = "Ssh_crypto.hash";
	       fun sign = "Ssh_crypto.sign";
	       fun check = "Ssh_crypto.check";
	       fun block_of_hash = "id" [ inverse = "id"];
	       fun kgen_s = "Ssh_crypto.kgen ~e:65537 1024";
	       fun skp = "id" [inverse = "id"];
	       fun injbot = "injbot" [inverse="injbot_inv"];
	       fun genIVC = "Ssh_crypto.construct 16 \"A\"";
	       fun genIVS = "Ssh_crypto.construct 16 \"B\"";
	       fun genEKC = "Ssh_crypto.construct 16 \"C\"";
	       fun genEKS = "Ssh_crypto.construct 16 \"D\"";
	       fun genMKC = "Ssh_crypto.construct 20 \"E\"";
	       fun genMKS = "Ssh_crypto.construct 20 \"F\"";
	       fun enc = "Ssh_crypto.symenc";
	       fun dec = "Ssh_crypto.symdec";
	       fun get_size = "Ssh_crypto.get_size";
	       fun mac = "Ssh_crypto.mac";
	       fun check_mac = "Ssh_crypto.check_mac";
	       fun check_algorithms = "Ssh_crypto.check_algorithms";
               table trusted_hosts = "trusted_hosts".

(* Authentication property *)

event endC(bitstring, bitstring, bitstring, bitstring, spkey, G, G, G, hash).
event endS(bitstring, bitstring, bitstring, bitstring, spkey, G, G, G, hash).

query H: hash, K: G, y: G, x: G, pk: spkey, initS: bitstring, initC: bitstring, idS: bitstring, idC: bitstring;
  inj-event(endC(idC, idS, initC, initS, pk, x, y, K, H)) ==> inj-event(endS(idC, idS, initC, initS, pk, x, y, K, H)).

query H': hash, K': G, H: hash, K: G, y: G, x: G, pk: spkey, initS: bitstring, initC: bitstring, idS: bitstring, idC: bitstring;
  event(endC(idC, idS, initC, initS, pk, x, y, K, H)) && event(endS(idC, idS, initC, initS, pk, x, y, K', H')) ==> ((K = K') && (H = H')).

(* Server *)




(* Client *)



(* Key generation *)

process 
   Ostart() :=
hk <-R hashkey;
let skp(pkS: spkey, skS: sskey) = (r_1 <-R skeyseed; skp(spkgen(r_1), sskgen(r_1))) in
insert trusted_hosts(pkS);
return(pkS, hk);
((
  foreach iA <= N do
  negotiationS() :=
  cookieSS <-R cookie;
  initSS: bitstring <- concatm(tag_kex_init, concatKEXINIT(cookieSS, negotiation_string));
  return((m_3: bitstring <- initSS; r_2 <-R pad_rand; padr(m_3, r_2)));
  key_exchange2S(idCS: bitstring, idSS: bitstring, m1_2: bitstring, m2_1: bitstring) :=
  let injbot(initCS: bitstring) = unpad(m1_2) in
  let concatm(=tag_kex_init, concatKEXINIT(cookieCS: cookie, nsCS: bitstring)) = initCS in
  if check_algorithms(nsCS) then
  let injbot(concatm(=tag_kexdh_init, bitstring_of_G(eS: G))) = unpad(m2_1) in
  yS <-R Z;
  fS: G <- (x_3: Z <- yS; exp(g, x_3));
  KS: G <- exp(eS, yS);
  HS: hash <- h(hk, concat8(idCS, idSS, initCS, initSS, pkS, eS, fS, KS));
  event endS(idCS, idSS, initCS, initSS, pkS, eS, fS, KS, HS);
  sS: signature <- (m_4: block <- block_of_hash(HS); sk: sskey <- skS; r_3 <-R sseed; signr(m_4, sk, r_3));
  return((m_5: bitstring <- concatm(tag_kexdh_reply, concatKEXDHREPLY(pkS, fS, sS)); r_4 <-R pad_rand; padr(m_5, r_4)));
  key_exchange4S(m_6: bitstring) :=
  let injbot(nkCS: bitstring) = unpad(m_6) in
  let concatm(=tag_newkeys, =null_string) = nkCS in
  return((m_7: bitstring <- concatm(tag_newkeys, null_string); r_5 <-R pad_rand; padr(m_7, r_5)));
  get_keysS() :=
  IVCS: iv <- (hk_1: hashkey <- hk; k_2: G <- KS; h1: hash <- HS; h2: hash <- HS; iv_of_hash(h(hk_1, concat4(k_2, h1, tag_IVC, h2))));
  IVSS: iv <- (hk_2: hashkey <- hk; k_3: G <- KS; h1_1: hash <- HS; h2_1: hash <- HS; iv_of_hash(h(hk_2, concat4(k_3, h1_1, tag_IVS, h2_1))));
  EKCS: symkey <- (hk_3: hashkey <- hk; k_4: G <- KS; h1_2: hash <- HS; h2_2: hash <- HS; symkey_of_hash(h(hk_3, concat4(k_4, h1_2, tag_EKC, h2_2))));
  EKSS: symkey <- (hk_4: hashkey <- hk; k_5: G <- KS; h1_3: hash <- HS; h2_3: hash <- HS; symkey_of_hash(h(hk_4, concat4(k_5, h1_3, tag_EKS, h2_3))));
  MKCS: mkey <- (hk_5: hashkey <- hk; k_6: G <- KS; h1_4: hash <- HS; h2_4: hash <- HS; mkey_of_hash(h(hk_5, concat4(k_6, h1_4, tag_MKC, h2_4))));
  MKSS: mkey <- (hk_6: hashkey <- hk; k_7: G <- KS; h1_5: hash <- HS; h2_5: hash <- HS; mkey_of_hash(h(hk_6, concat4(k_7, h1_5, tag_MKS, h2_5))));
  return(IVSS, IVCS, HS);
  ((
    foreach j_23 <= N' do
    tunnel_sendS(payload_1: bitstring, IVS_1: iv, sequence_numberS_1: uint32) :=
    packet: bitstring <- (m_8: bitstring <- payload_1; r_6 <-R pad_rand; padr(m_8, r_6));
    return(concatem(enc(packet, EKSS, IVS_1), mac(concatnm(sequence_numberS_1, packet), MKSS)))
  ) | (
    foreach j_24 <= N' do
    tunnel_recv1S(m_9: bitstring, IVC_1: iv) :=
    let injbot(m1_3: bitstring) = dec(m_9, EKCS, IVC_1) in
    return(get_size(m1_3));
    tunnel_recv2S(m_10: bitstring, IVC_2: iv, m'_1: macres, sequence_numberC_1: uint32) :=
    let injbot(m2_2: bitstring) = dec(m_10, EKCS, IVC_2) in
    packet_1: bitstring <- concat(m1_3, m2_2);
    if check_mac(concatnm(sequence_numberC_1, packet_1), MKCS, m'_1) then
    let injbot(payload_2: bitstring) = unpad(packet_1) in
    return(payload_2)
  ))
) | (
  foreach iB <= N do
  negotiationC() :=
  cookieCC <-R cookie;
  initCC: bitstring <- concatm(tag_kex_init, concatKEXINIT(cookieCC, negotiation_string));
  return((m_11: bitstring <- initCC; r_7 <-R pad_rand; padr(m_11, r_7)));
  key_exchange1C(m_12: bitstring) :=
  let injbot(initSC: bitstring) = unpad(m_12) in
  let concatm(=tag_kex_init, concatKEXINIT(cookieSC: cookie, nsSC: bitstring)) = initSC in
  if check_algorithms(initSC) then
  xC <-R Z;
  eC: G <- (x_4: Z <- xC; exp(g, x_4));
  return((m_13: bitstring <- concatm(tag_kexdh_init, bitstring_of_G(eC)); r_8 <-R pad_rand; padr(m_13, r_8)));
  key_exchange3C(idCC: bitstring, idSC: bitstring, m_14: bitstring) :=
  let injbot(concatm(=tag_kexdh_reply, concatKEXDHREPLY(pkSC: spkey, fC: G, sC: signature))) = unpad(m_14) in
  get trusted_hosts(=pkSC) in
  KC: G <- exp(fC, xC);
  HC: hash <- h(hk, concat8(idCC, idSC, initCC, initSC, pkSC, eC, fC, KC));
  if check(block_of_hash(HC), pkSC, sC) then
  event endC(idCC, idSC, initCC, initSC, pkSC, eC, fC, KC, HC);
  return((m_15: bitstring <- concatm(tag_newkeys, null_string); r_9 <-R pad_rand; padr(m_15, r_9)));
  get_keysC(m_16: bitstring) :=
  let injbot(nkSC: bitstring) = unpad(m_16) in
  let concatm(=tag_newkeys, =null_string) = nkSC in
  IVCC: iv <- (hk_7: hashkey <- hk; k_8: G <- KC; h1_6: hash <- HC; h2_6: hash <- HC; iv_of_hash(h(hk_7, concat4(k_8, h1_6, tag_IVC, h2_6))));
  IVSC: iv <- (hk_8: hashkey <- hk; k_9: G <- KC; h1_7: hash <- HC; h2_7: hash <- HC; iv_of_hash(h(hk_8, concat4(k_9, h1_7, tag_IVS, h2_7))));
  EKCC: symkey <- (hk_9: hashkey <- hk; k_10: G <- KC; h1_8: hash <- HC; h2_8: hash <- HC; symkey_of_hash(h(hk_9, concat4(k_10, h1_8, tag_EKC, h2_8))));
  EKSC: symkey <- (hk_10: hashkey <- hk; k_11: G <- KC; h1_9: hash <- HC; h2_9: hash <- HC; symkey_of_hash(h(hk_10, concat4(k_11, h1_9, tag_EKS, h2_9))));
  MKCC: mkey <- (hk_11: hashkey <- hk; k_12: G <- KC; h1_10: hash <- HC; h2_10: hash <- HC; mkey_of_hash(h(hk_11, concat4(k_12, h1_10, tag_MKC, h2_10))));
  MKSC: mkey <- (hk_12: hashkey <- hk; k_13: G <- KC; h1_11: hash <- HC; h2_11: hash <- HC; mkey_of_hash(h(hk_12, concat4(k_13, h1_11, tag_MKS, h2_11))));
  return(IVCC, IVSC, HC);
  ((
    foreach j_25 <= N' do
    tunnel_sendC(payload_3: bitstring, IVC_3: iv, sequence_numberC_2: uint32) :=
    packet_2: bitstring <- (m_17: bitstring <- payload_3; r_10 <-R pad_rand; padr(m_17, r_10));
    return(concatem(enc(packet_2, EKCC, IVC_3), mac(concatnm(sequence_numberC_2, packet_2), MKCC)))
  ) | (
    foreach j_26 <= N' do
    tunnel_recv1C(m_18: bitstring, IVS_2: iv) :=
    let injbot(m1_4: bitstring) = dec(m_18, EKSC, IVS_2) in
    return(get_size(m1_4));
    tunnel_recv2C(m_19: bitstring, IVS_3: iv, m'_2: macres, sequence_numberS_2: uint32) :=
    let injbot(m2_3: bitstring) = dec(m_19, EKSC, IVS_3) in
    packet_3: bitstring <- concat(m1_4, m2_3);
    if check_mac(concatnm(sequence_numberS_2, packet_3), MKSC, m'_2) then
    let injbot(payload_4: bitstring) = unpad(packet_3) in
    return(payload_4)
  ))
))



(* EXPECTED
All queries proved.
0.260s (user 0.260s + system 0.000s), max rss 12624K
END *)
