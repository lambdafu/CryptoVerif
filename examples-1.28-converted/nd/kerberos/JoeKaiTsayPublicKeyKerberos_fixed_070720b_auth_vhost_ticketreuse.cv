(* 3 rounds of Public-key Kerberos protocol. fixed. *)


(* The proof for PKINIT was *)
proof {
crypto sign rkCA;
crypto sign rkCs;
crypto enc rkC;
crypto sign rkKs;
success;
auto
}

param N.
param N2.
param N3.
param N4.

type nonce [fixed,large].
type client [bounded].
type kas [bounded].
type tgs [bounded].
type server [bounded].

(* types for public-key crypto: *)
type pkey [bounded].
type skey [bounded].
type keyseed [large,fixed].
type seed [fixed].
type spkey [bounded].
type sskey [bounded].
type skeyseed [large,fixed].
type sseed [fixed].  
type signature [bounded].
type blocksize [fixed].
type blocksizebot [bounded].
type sblocksize [bounded].


(* types for symmetric enc: *)
type symkeyseed [fixed].
type key [fixed].
type macs [fixed].
type mkeyseed [fixed].
type mkey [fixed].
type symseed [fixed].
type maxmac [bounded].
type maxenc [bounded].
type timest [ fixed].

(* type for checksum: *)
type checksum [fixed].


(* concatenation functions, needed to be able to apply, e.g., encryption to a list: *)
(*public-key:*)
fun concat1(client, pkey, spkey): sblocksize [data].							(* needed for client  certificates *)
fun concat7(kas, pkey, spkey): sblocksize [data].    							(*needed for kas certificate *)
fun concat2(kas, pkey,spkey, signature, key, mkey, checksum, signature ): blocksize [data]. 		(* needed for encryption of list { certK, {k,ck}_skK } *)
fun concat3(key, mkey, checksum): sblocksize [data]. 	     	       	  	    		   	(* needed for signature over {k1,k2, ck}*)
fun concat4(key, mkey, nonce, tgs): maxenc [data]. 						   	(* needed for authenticator {AK,mAK, n1, T}_k *)
fun concat5(key, mkey, client): maxenc [data]. 							(* needed for TGT and ST *)
fun concat6(client, pkey, spkey, signature, nonce, signature, client, tgs, nonce): bitstring [data].  (* for checksum of first message *)
fun concat8(key, mkey, nonce, server):maxenc [data]. 		       					(* for {SK, mSK, n2, S}_AK in TG_reply *)
fun padno(nonce): sblocksize [data]. 	    	   	      	      	   	   	     		(* needed to sign nonce n2*)
fun pad(client, timest):maxenc [data].								(* needed to create {C,t}_SK *)
fun padts(timest): maxenc [data].									(* needed to create {t}_SK *)

(* inequalities of outputs of two different concat functions when they output the same types : *) 

equation forall y:key, w:mkey, z:client, t2:key, w2:mkey, y2:nonce, z2:tgs;  concat5(y,w,z) <> concat4(t2,w2,y2,z2).
equation forall t:key, w: mkey, y: nonce, z: server, t2:key, w2:mkey, y2:nonce, z2:tgs;  concat8(t,w,y,z) <> concat4(t2,w2,y2,z2).
equation forall z:client,t: timest, t2:key, w2:mkey, y2:nonce, z2:tgs;  pad(z,t) <> concat4(t2,w2,y2,z2).
equation forall t: timest, t2:key, w2:mkey, y2:nonce, z2:tgs;  padts(t) <> concat4(t2,w2,y2,z2).
equation forall y:key, w:mkey, z:client, t2: key, w2: mkey, y2: nonce, z2: server;    concat5(y,w,z) <> concat8(t2,w2,y2,z2).
equation forall y:key, w:mkey, z:client, t2: timest,  z2:client;    concat5(y,w,z) <> pad(z2,t2). 
equation forall y:key, w:mkey, z:client, t2: timest;    concat5(y,w,z) <> padts(t2). 
equation forall t:key, w: mkey, y: nonce, z: server, t2:timest, z2:client;  concat8(t,w,y,z) <> pad(z2, t2).
equation forall t:key, w: mkey, y: nonce, z: server, t2:timest;  concat8(t,w,y,z) <> padts( t2).
equation forall t: timest, z: client, t2: timest;  pad(z,t)<> padts(t2).



equation forall k1:key, k2:mkey, y:checksum, z2:client, y2:pkey, x2:spkey;
	concat3(k1,k2,y) <> concat1(z2,y2, x2).
equation forall k1:key, k2:mkey, y:checksum, z2: nonce;
	concat3(k1, k2,y) <> padno(z2).
equation forall  y:nonce, z2:client, y2:pkey, x2:spkey;
	padno(y) <> concat1(z2,y2, x2).

equation forall k1:key, k2:mkey, y:checksum, z2:kas, y2:pkey, x2:spkey;
	concat3(k1,k2,y) <> concat7(z2,y2, x2).
equation forall  y:nonce, z2:kas, y2:pkey, x2:spkey;
	padno(y) <> concat7(z2,y2, x2).
equation forall z2:client, y2:pkey, x2:spkey, z:kas, y: pkey, x: spkey;
        concat1(z2,y2,x2) <> concat7(z,y,x).


(* Public-key encryption (CCA2): *)

proba Penc.
proba Penccoll.

fun enc(blocksize, pkey, seed): bitstring.
fun skgen(keyseed):skey.
fun pkgen(keyseed):pkey.
fun dec(bitstring, skey): blocksizebot.

fun enc2(blocksize, pkey, seed): bitstring.
fun skgen2(keyseed):skey.
fun pkgen2(keyseed):pkey.
fun dec2(bitstring, skey): blocksizebot.

fun injbot1(blocksize):blocksizebot [data].

const Z:blocksize.

equation forall m:blocksize, r:keyseed, r2:seed; 
	dec(enc(m, pkgen(r), r2), skgen(r)) = injbot1(m).
equation forall m:blocksize, r:keyseed, r2:seed; 
	dec2(enc2(m, pkgen2(r), r2), skgen2(r)) = injbot1(m).

equiv
  ! N3 new r: keyseed; (
    gen_Oracle() := return(pkgen(r)) |
    ! N2 gen_Oracle_1(m: bitstring) := return(dec(m, skgen(r))))|
  ! N4 new r2: seed; gen_Oracle_2(x: blocksize, y: pkey) := return(enc(x,y,r2)) [all]
<=(N3 * N4 * Penc(time, N2))=>
  ! N3 new r: keyseed; (
    gen_Oracle() := return(pkgen2(r)) |
    ! N2 gen_Oracle_1(m: bitstring) := find j <= N4 suchthat defined(m2[j], y[j], x[j]) && y[j] = pkgen2(r) && m = m2[j] then return(injbot1(x[j])) else return(dec2(m, skgen2(r))))|
  ! N4 gen_Oracle_2(x: blocksize, y: pkey) := find k <= N3 suchthat defined(r[k]) && (y = pkgen2(r[k])) then (new r2: seed; let m2:bitstring = enc2(Z, y, r2) in return(m2)) else new r3: seed; return(enc(x,y,r3)).

collision new r1: keyseed; new r2: keyseed; return(pkgen(r1) = pkgen(r2)) <=(Penccoll)=> return(r1 = r2).
collision new r1: keyseed; new r2: keyseed; return(pkgen2(r1) = pkgen2(r2)) <=(Penccoll)=> return(r1 = r2).
collision new r1: keyseed; new r2: keyseed; return(skgen(r1) = skgen(r2)) <=(Penccoll)=> return(r1 = r2).
collision new r1: keyseed; new r2: keyseed; return(skgen2(r1) = skgen2(r2)) <=(Penccoll)=> return(r1 = r2).


(* Signatures: *)

proba Psign.
proba Psigncoll.

fun sign(sblocksize, sskey, sseed): signature.
fun sskgen(skeyseed):sskey.
fun spkgen(skeyseed):spkey.
fun check(sblocksize, spkey, signature): bool.

fun sign2(sblocksize, sskey, sseed): signature.
fun sskgen2(skeyseed):sskey.
fun spkgen2(skeyseed):spkey.
fun check2(sblocksize, spkey, signature): bool.

equation forall m:sblocksize, r:skeyseed, r2:sseed; 
	check(m, spkgen(r), sign(m, sskgen(r), r2)) = true.
equation forall m:sblocksize, r:skeyseed, r2:sseed; 
	check2(m, spkgen2(r), sign2(m, sskgen2(r), r2)) = true.

equiv
  ! N3 new r: skeyseed; (
    gen_Oracle_1() := return(spkgen(r)) |
    ! N2 new r2: sseed; gen_Oracle_2(x: sblocksize) := return(sign(x, sskgen(r), r2)))|
  ! N4 gen_Oracle_3(m: sblocksize, y: spkey, si: signature) := return(check(m, y, si)) [all]
<=(N3 * Psign(time, N2))=>
  ! N3 new r: skeyseed; (
    gen_Oracle_1() := return(spkgen2(r)) |
    ! N2 new r2: sseed; gen_Oracle_2(x: sblocksize) := return(sign2(x, sskgen2(r), r2)))|
  ! N4 gen_Oracle_3(m: sblocksize, y: spkey, si: signature) := find j <= N2, k <= N3 suchthat defined(x[j, k], r[k]) && y = spkgen2(r[k]) && m = x[j,k] && check2(m, y, si) then return(true) else find k <= N3 suchthat defined(r[k]) && (y = spkgen2(r[k])) then return(false) else return(check(m,y,si)).


collision new r1: skeyseed; new r2: skeyseed; return(spkgen(r1) = spkgen(r2)) <=(Psigncoll)=> return(r1 = r2).
collision new r1: skeyseed; new r2: skeyseed; return(spkgen2(r1) = spkgen2(r2)) <=(Psigncoll)=> return(r1 = r2).
collision new r1: skeyseed; new r2: skeyseed; return(sskgen(r1) = sskgen(r2)) <=(Psigncoll)=> return(r1 = r2).
collision new r1: skeyseed; new r2: skeyseed; return(sskgen2(r1) = sskgen2(r2)) <=(Psigncoll)=> return(r1 = r2). 



(* Shared-key encryption (CPA Stream cipher): *)

proba Pencsym.

fun encsym(maxenc, key, symseed): maxmac.
fun kgen(symkeyseed):key.
fun decsym(maxmac, key): bitstringbot.

fun encsym2(maxenc, key, symseed): maxmac.
fun kgen2(symkeyseed):key.

fun injbot2(maxenc):bitstringbot [data].
(* The function Z2 returns for each bitstring, a bitstring
   of the same length, consisting only of zeroes. *)
fun Z2(maxenc):maxenc.

const Zconcat4: maxenc.
const Zconcat5: maxenc.
const Zconcat8: maxenc.
const  	  Zpad: maxenc.
const   Zpadts: maxenc. 

equation forall m:maxenc, r:symkeyseed, r2:symseed; 
	decsym(encsym(m, kgen(r), r2), kgen(r)) = injbot2(m).

equation forall m:key,x:mkey, y:nonce,z:tgs; 
	Z2(concat4(m,x,y,z)) = Zconcat4.
equation forall y:key,x:mkey,z:client; 
	Z2(concat5(y,x,z)) = Zconcat5.
equation forall  y:nonce, z:server, t:key, u:mkey;
	Z2(concat8(t, u, y, z)) = Zconcat8.
equation forall z:client, t:timest;
        Z2(pad(z,t)) = Zpad.
equation forall t: timest;
        Z2(padts(t)) = Zpadts.
(* forall m:maxenc, r:symkeyseed, r2:symseed; 
	Z2(encsym(m, kgen(r), r2)) = Z2(m). *)

equiv
  ! N2 new r: symkeyseed; ! N new r2: symseed; gen_Oracle_1(x: maxenc) := return(encsym(x, kgen(r), r2))
<=(N2 * Penc(time, N))=>
  ! N2 new r: symkeyseed; ! N new r2: symseed; gen_Oracle_1(x: maxenc) := return(encsym2(Z2(x), kgen2(r), r2)).

(* Weakly Unforgeable Mac: *)

proba Pmac.

fun mac(maxmac, mkey):macs.
fun checkmac(maxmac, mkey, macs): bool.
fun mkgen(mkeyseed):mkey.

fun mac2(maxmac, mkey):macs.
fun checkmac2(maxmac, mkey, macs): bool.
fun mkgen2(mkeyseed):mkey.

equation forall m:maxmac, r:mkeyseed;
	checkmac(m, mkgen(r), mac(m, mkgen(r))).
equation forall m:maxmac, r:mkeyseed;
	checkmac2(m, mkgen2(r), mac2(m, mkgen2(r))).


equiv
  ! N3 new r: mkeyseed; (
    ! N gen_Oracle_1(x: maxmac) := return(mac(x, mkgen(r))) |
    ! N2 gen_Oracle_2(m: maxmac, ma: macs) := return(checkmac(m, mkgen(r), ma)))
<=(N3 * Pmac(time, N, N2))=>
  ! N3 new r: mkeyseed; (
    ! N gen_Oracle_1(x: maxmac) := return(mac2(x, mkgen2(r))) |
    ! N2 gen_Oracle_2(m: maxmac, ma: macs) := find j <= N suchthat defined(x[j]) && (m = x[j]) &&  (* (ma = mac2(x[j], mkgen2(r)))*) checkmac2(x[j], mkgen2(r), ma) then return(true) else return(false)).


(* Checksum/ keyed Hash: *) 
(* For security definition of collision resistant hash see p. 34 of Bruno Blanchet's paper A Computationally Sound Mechanized Prover for Security Protocols *)

proba Phashcoll.

fun hash(key, bitstring): checksum.

(* collision new k: key; forall x: bitstring, y: bitstring;
	hash(k, x) = hash(k, y) <=(Phashcoll)=> x = y.*)

 collision new s: symkeyseed; forall x: bitstring, y: bitstring; return(hash(kgen(s), x) = hash(kgen(s), y)) <=(Phashcoll)=> return(x = y). 
(* We replaced new k:key because in our protocol we use a key for the keyed hash which is generated by the function kgen and a new keyseed *)


(* Queries *)

channel c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15, c16, c17, c18, c19, c20, c21, c22, c23, c24, c25,
	 start, finish, cC, cK.

const C : client.
const K : kas.
const T : tgs.
const S : server.


fun acceptC1(kas, tgs):bitstring.
fun acceptC2(tgs, server): bitstring.
fun acceptC3(server):bitstring.
fun acceptK(client):bitstring.
fun acceptT(client, server):bitstring.
fun acceptS(client): bitstring.


event fullKC(client, tgs, nonce, bitstring, maxmac, maxmac).
event fullCK(kas, tgs, nonce, bitstring, maxmac, maxmac).		
event partCT(tgs, maxmac, maxmac).			
event fullCT(tgs, server, nonce, maxmac, maxmac, maxmac).  
event partTC(client, maxmac, maxmac).   		
event fullTC(client, server, nonce, maxmac,maxmac, maxmac, maxmac).

event partCS(server, tgs, maxmac, maxmac).
event fullCS(server, tgs,  maxmac, maxmac, maxmac).
event partSC(client, maxmac, maxmac).
event fullSC(client, maxmac, maxmac, maxmac).      		



(* authentication queries : *)

query z: maxmac, y: maxmac, x: maxmac, w: bitstring, N: nonce;
  inj-event(fullCK(K, T, N, w, x, y)) ==> inj-event(fullKC(C, T, N, w, z, y)).
		 
query y': maxmac, w: bitstring, N: nonce, x': maxmac, y: maxmac, x: maxmac;
  event(partTC(C, x, y)) ==> (event(partCT(T, x', y)) && event(fullKC(C, T, N, w, x, y'))).
						  	
query v: maxmac, z': maxmac, x': maxmac, y: maxmac, z: maxmac, x: maxmac, N: nonce;
  inj-event(fullCT(T, S, N, x, z, y)) ==> inj-event(fullTC(C, S, N, x', z', v, y)).

query w: maxmac, v': maxmac, v: maxmac, N: nonce, x: maxmac, y: maxmac, z: maxmac;
  event(partSC(C, z, y)) ==> (event(partCS(S, T, x, y)) && event(fullTC(C, S, N, v, v', z, w))).
query y': maxmac, x: maxmac, w: maxmac, y: maxmac, z: maxmac;
  event(fullCS(S, T, z, y, w)) ==> event(fullSC(C, x, y', w)).	 


(* channels c1, c2, c3, c4, c5, c6, c9, c10, c18, c17, c19*)






(*channels c21, c16,*)


 

(*channels c22, c23 *)




(*channels c7, c8 *)
	

(*channels c11, c12*)	



process 
	in(start, ());
new rkC: keyseed;
let pkC: pkey = pkgen(rkC) in
let skC: skey = skgen(rkC) in
new rkCs: skeyseed;
let spkC: spkey = spkgen(rkCs) in
let sskC: sskey = sskgen(rkCs) in
new rkK: keyseed;
let pkK: pkey = pkgen(rkK) in
let skK: skey = skgen(rkK) in
new rkKs: skeyseed;
let spkK: spkey = spkgen(rkKs) in
let sskK: sskey = sskgen(rkKs) in
new rkCA: skeyseed;
let pkCA: spkey = spkgen(rkCA) in
let skCA: sskey = sskgen(rkCA) in
new rKt: symkeyseed;
new rmKt: mkeyseed;
let Kt: key = kgen(rKt) in
let mKt: mkey = mkgen(rmKt) in
new rKs: symkeyseed;
let Ks: key = kgen(rKs) in
new rmKs: mkeyseed;
let mKs: mkey = mkgen(rmKs) in
new q1: sseed;
new q2: sseed;
let certC: signature = sign(concat1(C, pkC, spkC), skCA, q1) in
let certK: signature = sign(concat7(K, pkK, spkK), skCA, q2) in
out(c25, (pkC, spkC, spkK, pkCA));
((
  ! i_1 <= N
  in(c1[i_1], h: tgs);
  new n1_1: nonce;
  new n2_2: nonce;
  new r1: sseed;
  out(c2[i_1], (C, pkC, spkC, certC, n2_2, sign(padno(n2_2), sskC, r1), C, h, n1_1));
  in(c3[i_1], (m21: bitstring, =C, TGT_1: maxmac, macTGT: macs, m24: maxmac, mac24: macs));
  let injbot1(concat2(hostZ: kas, pkZ: pkey, spkZ: spkey, ms1: signature, k3: key, k4: mkey, ck1: checksum, ms2: signature)) = dec(m21, skC) in
  if check(concat7(hostZ, pkZ, spkZ), pkCA, ms1) then
  if check(concat3(k3, k4, ck1), spkK, ms2) then
  if checkmac(m24, k4, mac24) then
  let ck: checksum = hash(k3, concat6(C, pkC, spkC, certC, n2_2, sign(padno(n2_2), sskC, r1), C, h, n1_1)) in
  if ck = ck1 then
  let injbot2(concat4(AK_1: key, mAK_1: mkey, =n1_1, =h)) = decsym(m24, k3) in
  event fullCK(hostZ, h, n1_1, m21, TGT_1, m24);
  out(c18[i_1], acceptC1(hostZ, h));
  ! i_2 <= N3
  in(c17[i_2, i_1], (hT: tgs, h2: server));
  if hT = h then
  new Nt: nonce;
  new ts_1: timest;
  new r7_1: symseed;
  let e5: maxmac = encsym(pad(C, ts_1), AK_1, r7_1) in
  let mac5: macs = mac(e5, mAK_1) in
  event partCT(h, TGT_1, e5);
  out(c4[i_2, i_1], (TGT_1, macTGT, e5, mac5, h2, Nt));
  in(c5[i_2, i_1], (=C, m6: maxmac, mac6: macs, m7: maxmac, mac7: macs));
  if checkmac(m7, mAK_1, mac7) then
  let injbot2(concat8(SK: key, mSK: mkey, =Nt, =h2)) = decsym(m7, AK_1) in
  event fullCT(h, h2, Nt, TGT_1, e5, m7);
  out(c19[i_2, i_1], acceptC2(h, h2));
  ! i_3 <= N4
  in(c20[i_3, i_2, i_1], h3_1: server);
  if h3_1 = h2 then
  new ts2: timest;
  new r2: symseed;
  let e12: maxmac = encsym(pad(C, ts2), SK, r2) in
  let mac12: macs = mac(e12, mSK) in
  event partCS(h2, h, m7, e12);
  out(c6[i_3, i_2, i_1], (m6, mac6, e12, mac12));
  in(c9[i_3, i_2, i_1], (m13: maxmac, mac13: macs));
  if checkmac(m13, mSK, mac13) then
  let injbot2(padts(=ts2)) = decsym(m13, SK) in
  event fullCS(h2, h, m7, e12, m13);
  out(c10[i_3, i_2, i_1], acceptC3(h2))
) | (
  ! i_4 <= N
  in(c22[i_4], (hostY: client, pkY: pkey, spkY: spkey, ms3: signature, n4: nonce, ms4: signature, hostV: client, hostW: tgs, n5: nonce));
  if hostV = hostY then
  let m3: bitstring = (hostY, pkY, spkY, ms3, n4, ms4, hostY, hostW, n5) in
  if check(concat1(hostY, pkY, spkY), pkCA, ms3) then
  if check(padno(n4), spkY, ms4) then
  find j1 = j1_1 <= N2 suchthat defined(Lhost[j1_1], Qkey[j1_1], Qmkey[j1_1]) && (Lhost[j1_1] = hostW) then
  new s1: symkeyseed;
  new s2: mkeyseed;
  let k1: key = kgen(s1) in
  let k2: mkey = mkgen(s2) in
  new s3: symkeyseed;
  let AK_2: key = kgen(s3) in
  new s4: mkeyseed;
  let mAK_2: mkey = mkgen(s4) in
  new r4: symseed;
  let TGT_2: maxmac = encsym(concat5(AK_2, mAK_2, hostY), Qkey[j1], r4) in
  let mac1: macs = mac(TGT_2, Qmkey[j1]) in
  new r5: symseed;
  let auth: maxmac = encsym(concat4(AK_2, mAK_2, n5, hostW), k1, r5) in
  let mac2_1: macs = mac(auth, k2) in
  new r6: sseed;
  let y: bitstring = concat6(hostY, pkY, spkY, ms3, n4, ms4, hostY, hostW, n5) in
  let ck_1: checksum = hash(k1, y) in
  let ms21: signature = sign(concat3(k1, k2, ck_1), sskK, r6) in
  new r7_2: seed;
  let x21: bitstring = enc(concat2(K, pkK, spkK, certK, k1, k2, ck_1, ms21), pkY, r7_2) in
  let m4: bitstring = (x21, hostY, auth) in
  let m5: bitstring = (x21, hostY, TGT_2, mac1, auth, mac2_1) in
  event fullKC(hostY, hostW, n5, x21, TGT_2, auth);
  out(c23[i_4], m5)
) | (
  ! i_5 <= N
  in(c7[i_5], (m8: maxmac, mac8: macs, m9: maxmac, mac9: macs, h3_2: server, n2_3: nonce));
  if checkmac(m8, mKt, mac8) then
  let injbot2(concat5(AK_3: key, mAK_3: mkey, h4: client)) = decsym(m8, Kt) in
  if checkmac(m9, mAK_3, mac9) then
  let injbot2(pad(=h4, ts_2: timest)) = decsym(m9, AK_3) in
  event partTC(h4, m8, m9);
  find j3 = j3_1 <= N2 suchthat defined(Mhost1[j3_1], Mhost2[j3_1], Pmkey[j3_1], Pkey[j3_1]) && (Mhost1[j3_1] = T) && (Mhost2[j3_1] = h3_2) then
  new rSK: symkeyseed;
  let SK_1: key = kgen(rSK) in
  new rmSK: mkeyseed;
  let mSK_1: mkey = mkgen(rmSK) in
  new r10: symseed;
  let e10: maxmac = encsym(concat5(SK_1, mSK_1, h4), Pkey[j3], r10) in
  let mac10: macs = mac(e10, Pmkey[j3]) in
  new r11: symseed;
  let e11: maxmac = encsym(concat8(SK_1, mSK_1, n2_3, h3_2), AK_3, r11) in
  let mac11: macs = mac(e11, mAK_3) in
  event fullTC(h4, h3_2, n2_3, m8, m9, e10, e11);
  out(c8[i_5], (h4, e10, mac10, e11, mac11, acceptT(h4, h3_2)))
) | (
  ! i_6 <= N
  in(c11[i_6], (m14: maxmac, mac14: macs, m15: maxmac, mac15: macs));
  if checkmac(m14, mKs, mac14) then
  let injbot2(concat5(SK_2: key, mSK_2: mkey, h5: client)) = decsym(m14, Ks) in
  if checkmac(m15, mSK_2, mac15) then
  let injbot2(pad(=h5, ts3: timest)) = decsym(m15, SK_2) in
  new r16: symseed;
  let e16: maxmac = encsym(padts(ts3), SK_2, r16) in
  let mac16: macs = mac(e16, mSK_2) in
  event partSC(h5, m14, m15);
  event fullSC(h5, m14, m15, e16);
  out(c12[i_6], (e16, mac16, acceptS(h5)))
) | (
  ! i_7 <= N2
  in(c21[i_7], (Lhost: tgs, Lkey: key, Lmkey: mkey));
  let Qkey: key = (if Lhost = T then Kt else Lkey) in
  let Qmkey: mkey = (if Lhost = T then mKt else Lmkey)
) | (
  ! i_8 <= N2
  in(c16[i_8], (Mhost1: tgs, Mhost2: server, Mkey: key, Mmkey: mkey));
  let Pkey: key = (if (Mhost1 = T) && (Mhost2 = S) then Ks else Mkey) in
  let Pmkey: mkey = (if (Mhost1 = T) && (Mhost2 = S) then mKs else Mmkey)
))






(* EXPECTED
All queries proved.
18.568s (user 18.532s + system 0.036s), max rss 57232K
END *)
