(* First round and a half of Basic Kerberos *)

(*
set interactiveMode = true.

SArename Rmkey
crypto mac rmKt
crypto mac rmKc
SArename Rkey
crypto enc
crypto enc
SArename mAK_18

remove_assign binder mAK_152
remove_assign binder mAK_155
remove_assign binder mAK_158
crypto mac ...

*)


param N.
param N2.
param N3.

type nonce [large,fixed].
type host [bounded].
			(*type client [bounded].
			type kas [bounded].
			type tgs [bounded].
			type server [bounded].*)
type mkey [bounded].
type mkeyseed [fixed].
type key [fixed].
type keyseed [fixed].
type seed [fixed].
type macs [fixed].
type maxenc [bounded].
type maxmac [bounded].
type timest [fixed].									(* needed in particular for CS_reply *)

(* following functions are needed to set the type of a list of elements to `bitstring', so that the list can be encrypted: *)
fun concat1(key, mkey, nonce, host):maxenc [data]. 					(* needed for {AK, mAK, n1, T}_Kc in AS_reply and {SK, mSK, n2, S}_AK in TG_reply *)
fun concat2(key, mkey, host):maxenc [data].  						(* needed for TGT and ST *)

fun pad(host, timest):maxenc [data].

forall y:key, w:mkey, z:host, t2:key, w2:mkey, y2:nonce, z2:host;  concat2(y,w,z) <> concat1(t2,w2,y2,z2).
       	      	      	      (* forall z: host, t:timest, t2:key, w2:mkey, y2:nonce, z2:host; 	   pad(z,t) <> concat1(t2,w2,y2,z2).
			      	 	forall y:key, w:mkey, z:host, z2:host, t2:timest;    	   concat2(y,w,z) <> pad(z2,t2). *)


(* Shared-key encryption (CPA Stream cipher) *)

proba Penc.

fun enc(maxenc, key, seed): maxmac.
fun kgen(keyseed):key.
fun dec(maxmac, key): bitstringbot.

fun enc2(maxenc, key, seed): maxmac.
fun kgen2(keyseed):key.

fun injbot(maxenc):bitstringbot [data].
(* The function Z returns for each bitstring, a bitstring of the same length, consisting only of zeroes. *)
fun    Z(maxenc):maxenc.
const  Zconcat1:maxenc.
const  Zconcat2:maxenc.
		(*const  Zpad:maxenc.*)

forall m:maxenc, r:keyseed, r2:seed; 
	dec(enc(m, kgen(r), r2), kgen(r)) = injbot(m).
forall y:nonce, z:host, t:key, u:mkey;
	Z(concat1(t, u, y, z)) = Zconcat1.
forall y:key, w:mkey, z:host; 
	Z(concat2(y, w, z)) = Zconcat2.
					(* forall z:host, t:timest;
        				   	  Z(pad(z,t)) = Zpad. *)
					    

equiv
  ! N2 new r: keyseed; ! N new r2: seed; gen_Oracle(x: maxenc) := return(enc(x, kgen(r), r2))
<=(N2 * Penc(time, N))=>
  ! N2 new r: keyseed; ! N new r2: seed; gen_Oracle(x: maxenc) := return(enc2(Z(x), kgen2(r), r2)).

(* Weakly Unforgeable MAC *)

proba Pmac.

fun mac(maxmac, mkey):macs.
fun check(maxmac, mkey, macs): bool.
fun mkgen(mkeyseed):mkey.

fun mac2(maxmac, mkey):macs.
fun check2(maxmac, mkey, macs): bool.
fun mkgen2(mkeyseed):mkey.

forall m:maxmac, r:mkeyseed;
	check(m, mkgen(r), mac(m, mkgen(r))).
forall m:maxmac, r:mkeyseed;
	check2(m, mkgen2(r), mac2(m, mkgen2(r))).

						   
equiv
  ! N3 new r: mkeyseed; (
    ! N gen_Oracle_1(x: maxmac) := return(mac(x, mkgen(r))) |
    ! N2 gen_Oracle_2(m: maxmac, ma: macs) := return(check(m, mkgen(r), ma)))
<=(N3 * Pmac(time, N, N2))=>
  ! N3 new r: mkeyseed; (
    ! N gen_Oracle_1(x: maxmac) := return(mac2(x, mkgen2(r))) |
    ! N2 gen_Oracle_2(m: maxmac, ma: macs) := find j <= N suchthat defined(x[j]) && (m = x[j]) &&  (* (ma = mac2(x[j], mkgen2(r)))*) check2(x[j], mkgen2(r), ma) then return(true) else return(false)).



(* Queries *)

channel c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15, c16, c17, c18, c19, c20, start, finish, cC, cT.
const C : host. (* client *)
const T : host. (* tgs *)

fun acceptC(host,host):bitstring.
fun acceptT(host):bitstring.

event partCT(host,(*host, key, mkey,*) maxmac, maxmac).	
event partTC(host,(*host, key, mkey,*) maxmac, maxmac).			



(* authentication queries : *)

query x': maxmac, y: maxmac, x: maxmac;
  event(partTC(C, x, y)) ==> event(partCT(T, x', y)).		






	








process
	in(start, ());
new rKc: keyseed;
let Kc: key = kgen(rKc) in
new rmKc: mkeyseed;
let mKc: mkey = mkgen(rmKc) in
new rKt: keyseed;
let Kt: key = kgen(rKt) in
new rmKt: mkeyseed;
let mKt: mkey = mkgen(rmKt) in
out(c20, ());
((
  ! i_1 <= N
  in(c1[i_1], h: host);
  new Nc: nonce;
  out(c2[i_1], (C, h, Nc));
  in(c3[i_1], (=C, m: maxmac, mac1: macs, m2: maxmac, mac2_1: macs));
  if check(m2, mKc, mac2_1) then
  let injbot(concat1(AK: key, mAK: mkey, =Nc, =h)) = dec(m2, Kc) in
  new Nt: nonce;
  new ts: timest;
  new r1: seed;
  let e5: maxmac = enc(pad(C, ts), AK, r1) in
  let mac5: macs = mac(e5, mAK) in
  event partCT(h, m, e5);
  out(c4[i_1], (m, mac1, e5, mac5, Nt))
) | (
  ! i_2 <= N
  in(c14[i_2], (hc: host, ht: host, n: nonce));
  find j1 = j1_1 <= N2 suchthat defined(Khost[j1_1], Rkey[j1_1], Rmkey[j1_1]) && (Khost[j1_1] = hc) then
  find j2 = j2_1 <= N2 suchthat defined(Khost[j2_1], Rkey[j2_1], Rmkey[j2_1]) && (Khost[j2_1] = ht) then
  new rAK: keyseed;
  let AK_1: key = kgen(rAK) in
  new rmAK: mkeyseed;
  let mAK_1: mkey = mkgen(rmAK) in
  new r3: seed;
  let e3: maxmac = enc(concat2(AK_1, mAK_1, hc), Rkey[j2], r3) in
  let mac3: macs = mac(e3, Rmkey[j2]) in
  new r4: seed;
  let e4: maxmac = enc(concat1(AK_1, mAK_1, n, ht), Rkey[j1], r4) in
  let mac4: macs = mac(e4, Rmkey[j1]) in
  let q2: bitstring = (hc, e4) in
  out(c15[i_2], (hc, e3, mac3, e4, mac4))
) | (
  ! i_3 <= N
  in(c7[i_3], (m8: maxmac, mac8: macs, m9: maxmac, mac9: macs, n2_1: nonce));
  if check(m8, mKt, mac8) then
  let injbot(concat2(AK_2: key, mAK_2: mkey, h4: host)) = dec(m8, Kt) in
  if check(m9, mAK_2, mac9) then
  let injbot(pad(=h4, t: timest)) = dec(m9, AK_2) in
  event partTC(h4, m8, m9);
  out(c8[i_3], acceptT(h4))
) | (
  ! i_4 <= N2
  in(c13[i_4], (Khost: host, Kkey: key, Kmkey: mkey));
  let Rkey: key = (if Khost = C then Kc else if Khost = T then Kt else Kkey) in
  let Rmkey: mkey = (if Khost = C then mKc else if Khost = T then mKt else Kmkey)
))





(* EXPECTED
All queries proved.
0.964s (user 0.924s + system 0.040s), max rss 81824K
END *)
