(* First round and a half of Basic Kerberos *)



param N.
param N2.
param N3.

type nonce [large,fixed].
type kas [bounded].
type client [bounded].
type tgs [bounded].
type server [bounded].
type mkey [bounded].
type mkeyseed [fixed].
type key [fixed].
type keyseed [fixed].
type seed [fixed].
type macs [fixed].
type maxenc [bounded].
type maxmac [bounded].
type timest [fixed].									(* needed in particular for CS_reply *)

(* following functions are needed to set the type of a list of elements to `bitstring', so that the list can be encrypted: *)
fun concat1(key, mkey, nonce, tgs):maxenc [data]. 					(* needed for {AK, mAK, n1, T}_Kc in AS_reply  *)
fun concat2(key, mkey, client):maxenc [data].  						(* needed for TGT and ST *)
fun pad(client, timest):maxenc [data].

equation forall y:key, w:mkey, z:client, t2:key, w2:mkey, y2:nonce, z2:tgs;  concat2(y,w,z) <> concat1(t2,w2,y2,z2).
equation forall  y:client, w:timest, t2:key, w2:mkey, y2:nonce, z2:tgs;  pad(y,w) <> concat1(t2,w2,y2,z2).
equation forall y:key, w:mkey, z:client, t2:client, w2:timest;  concat2(y,w,z) <> pad(t2,w2).

(* Shared-key encryption (CPA Stream cipher) *)

proba Penc.

fun enc(maxenc, key, seed): maxmac.
fun kgen(keyseed):key.
fun dec(maxmac, key): bitstringbot.

fun enc2(maxenc, key, seed): maxmac.
fun kgen2(keyseed):key.

fun injbot(maxenc):bitstringbot [data].
(* The function Z returns for each bitstring, a bitstring of the same length, consisting only of zeroes. *)
fun    Z(maxenc):maxenc.
const  Zconcat1:maxenc.
const  Zconcat2:maxenc.
const  Zconst3: maxenc.
const  Zpad:maxenc.

equation forall m:maxenc, r:keyseed, r2:seed; 
	dec(enc(m, kgen(r), r2), kgen(r)) = injbot(m).
equation forall y:nonce, z:tgs, t:key, u:mkey;
	Z(concat1(t, u, y, z)) = Zconcat1.
equation forall y:key, w:mkey, z:client; 
	Z(concat2(y, w, z)) = Zconcat2.
equation forall z:client, t:timest;
        Z(pad(z,t)) = Zpad.
					    

equiv
  ! N2 new r: keyseed; ! N new r2: seed; gen_Oracle(x: maxenc) := return(enc(x, kgen(r), r2))
<=(N2 * Penc(time, N))=>
  ! N2 new r: keyseed; ! N new r2: seed; gen_Oracle(x: maxenc) := return(enc2(Z(x), kgen2(r), r2)).

(* Weakly Unforgeable MAC *)

proba Pmac.

fun mac(maxmac, mkey):macs.
fun check(maxmac, mkey, macs): bool.
fun mkgen(mkeyseed):mkey.

fun mac2(maxmac, mkey):macs.
fun check2(maxmac, mkey, macs): bool.
fun mkgen2(mkeyseed):mkey.

equation forall m:maxmac, r:mkeyseed;
	check(m, mkgen(r), mac(m, mkgen(r))).
equation forall m:maxmac, r:mkeyseed;
	check2(m, mkgen2(r), mac2(m, mkgen2(r))).

						   
equiv
  ! N3 new r: mkeyseed; (
    ! N gen_Oracle_1(x: maxmac) := return(mac(x, mkgen(r))) |
    ! N2 gen_Oracle_2(m: maxmac, ma: macs) := return(check(m, mkgen(r), ma)))
<=(N3 * Pmac(time, N, N2))=>
  ! N3 new r: mkeyseed; (
    ! N gen_Oracle_1(x: maxmac) := return(mac2(x, mkgen2(r))) |
    ! N2 gen_Oracle_2(m: maxmac, ma: macs) := find j <= N suchthat defined(x[j]) && (m = x[j]) &&  (* (ma = mac2(x[j], mkgen2(r)))*) check2(x[j], mkgen2(r), ma) then return(true) else return(false)).



(* Queries *)

channel c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15, c16, c17, c18, c19, c20, start, finish, cC, cT.
const K : kas.
const C : client.
const T : tgs.
      	 

fun acceptC(kas):bitstring.
fun acceptK(client,tgs): bitstring.
fun acceptT(client):bitstring.

event fullKC(client, tgs,nonce, maxmac, maxmac).
event fullCK(tgs, nonce,maxmac, maxmac).		
event partCT(tgs,  maxmac, maxmac).
event fullCT(tgs, server,  nonce, maxmac, maxmac, maxmac). 			
event partTC(client, maxmac, maxmac).    		
event fullTC(client,server,  nonce, maxmac, maxmac, maxmac).		
      		


(* authentication queries : *)

query z: maxmac, y: maxmac, x: maxmac, N: nonce;
  inj-event(fullCK(T, N, x, y)) ==> inj-event(fullKC(C, T, N, z, y)).
		 
query y': maxmac, N: nonce, x': maxmac, y: maxmac, x: maxmac;
  event(partTC(C, x, y)) ==> (event(partCT(T, x', y)) && event(fullKC(C, T, N, x, y'))).

	      	 






		(* OK 
		in(finish, ());
		if h = T then
		(
		let keyAK:key = AK	
		)
		else out(cC, AK). *)



      

	




			  (* OK 
			  in(c9, ());
			  if h4 = C then
			  (
			  let keyTAK:key = AK
			  )
			  else
			  (
			  out(cT, AK)
			  ). *)


process
	in(start, ());
new rKc: keyseed;
let Kc: key = kgen(rKc) in
new rmKc: mkeyseed;
let mKc: mkey = mkgen(rmKc) in
new rKt: keyseed;
let Kt: key = kgen(rKt) in
new rmKt: mkeyseed;
let mKt: mkey = mkgen(rmKt) in
out(c20, ());
((
  ! i_1 <= N
  in(c1[i_1], h: tgs);
  new Nc: nonce;
  out(c2[i_1], (C, h, Nc));
  in(c3[i_1], (=C, m: maxmac, mac1: macs, m2: maxmac, mac2_1: macs));
  if check(m2, mKc, mac2_1) then
  let injbot(concat1(AK: key, mAK: mkey, =Nc, =h)) = dec(m2, Kc) in
  event fullCK(h, Nc, m, m2);
  out(c18[i_1], acceptC(K));
  ! i_2 <= N3
  in(c17[i_2, i_1], (hT: tgs, h2: server));
  if hT = h then
  new Nt: nonce;
  new ts: timest;
  new r1: seed;
  let e5: maxmac = enc(pad(C, ts), AK, r1) in
  let mac5: macs = mac(e5, mAK) in
  event partCT(h, m, e5);
  out(c4[i_2, i_1], (m, mac1, e5, mac5, h2, Nt))
) | (
  ! i_3 <= N
  in(c14[i_3], (hc: client, ht: tgs, n: nonce));
  find j1 = j1_1 <= N2 suchthat defined(Khost[j1_1], Rkey[j1_1], Rmkey[j1_1]) && (Khost[j1_1] = hc) then
  find j2 = j2_1 <= N2 suchthat defined(Lhost[j2_1], Qkey[j2_1], Qmkey[j2_1]) && (Lhost[j2_1] = ht) then
  new rAK: keyseed;
  let AK_1: key = kgen(rAK) in
  new rmAK: mkeyseed;
  let mAK_1: mkey = mkgen(rmAK) in
  new r3: seed;
  let e3: maxmac = enc(concat2(AK_1, mAK_1, hc), Qkey[j2], r3) in
  let mac3: macs = mac(e3, Qmkey[j2]) in
  new r4: seed;
  let e4: maxmac = enc(concat1(AK_1, mAK_1, n, ht), Rkey[j1], r4) in
  let mac4: macs = mac(e4, Rmkey[j1]) in
  event fullKC(hc, ht, n, e3, e4);
  out(c15[i_3], (hc, e3, mac3, e4, mac4))
) | (
  ! i_4 <= N
  in(c7[i_4], (m8: maxmac, mac8: macs, m9: maxmac, mac9: macs, h3: server, n2_1: nonce));
  if check(m8, mKt, mac8) then
  let injbot(concat2(AK_2: key, mAK_2: mkey, h4: client)) = dec(m8, Kt) in
  if check(m9, mAK_2, mac9) then
  let injbot(pad(=h4, t: timest)) = dec(m9, AK_2) in
  event partTC(h4, m8, m9);
  out(c8[i_4], acceptT(h4))
) | (
  ! i_5 <= N2
  in(c13[i_5], (Khost: client, Kkey: key, Kmkey: mkey));
  let Rkey: key = (if Khost = C then Kc else Kkey) in
  let Rmkey: mkey = (if Khost = C then mKc else Kmkey)
) | (
  ! i_6 <= N2
  in(c10[i_6], (Lhost: tgs, Lkey: key, Lmkey: mkey));
  let Qkey: key = (if Lhost = T then Kt else Lkey) in
  let Qmkey: mkey = (if Lhost = T then mKt else Lmkey)
))





(* EXPECTED
All queries proved.
0.312s (user 0.308s + system 0.004s), max rss 63072K
END *)
