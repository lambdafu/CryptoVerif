(* First round and a half of Basic Kerberos *)

set interactiveMode = true.

proof {
crypto mac rmKs;
crypto mac rmKt;
crypto mac rmKc;
crypto enc;
crypto enc;
crypto enc;
crypto mac;
success; (*
==> Here, it should prove the correspondence 
	event fullTC(C, S, k,N, x,z,y) && fullCT(T, S, k',N, x,z,y) ==> k=k'
but it does not work. See more comments below.
*)
auto
}

param N.
param N2.
param N3.

type nonce [large,fixed].
type client [bounded].
type kas [bounded].
type tgs [bounded].
type server [bounded].
type mkey [fixed].
type mkeyseed [fixed].
type key [fixed].
type keyseed [fixed].
type seed [fixed].
type macs [fixed].
type maxenc [bounded].
type maxmac [bounded].
type timest [fixed].									(* needed in particular for CS_reply *)

(* following functions are needed to set the type of a list of elements to `bitstring', so that the list can be encrypted: *)
fun concat1(key, mkey, nonce, tgs):maxenc [data]. 					(* needed for {AK, mAK, n1, T}_Kc in AS_reply  *)
fun concat2(key, mkey, client):maxenc [data].  						(* needed for TGT and ST *)
fun concat3(key, mkey, nonce, server):maxenc [data]. 		       		(*for {SK, mSK, n2, S}_AK in TG_reply *)
fun pad(client, timest):maxenc [data].

equation forall y:key, w:mkey, z:client, t2:key, w2:mkey, y2:nonce, z2:tgs;  concat2(y,w,z) <> concat1(t2,w2,y2,z2).
equation forall t:key, w: mkey, y: nonce, z: server, t2:key, w2:mkey, y2:nonce, z2:tgs;  concat3(t,w,y,z) <> concat1(t2,w2,y2,z2).
equation forall y:key, w:mkey, z:client, t2: key, w2: mkey, y2: nonce, z2: server;    concat2(y,w,z) <> concat3(t2,w2,y2,z2).

equation forall z:client,t: timest, t2:key, w2:mkey, y2:nonce, z2:tgs;  pad(z, t) <> concat1(t2,w2,y2,z2).
equation forall t:key, w: mkey, y: nonce, z: server, t2:timest, z2:client;  concat3(t,w,y,z) <> pad(z2, t2).
equation forall y:key, w:mkey, z:client, t2: timest,  z2: client;    concat2(y,w,z) <> pad(z2,t2).

(* Shared-key encryption (CPA Stream cipher) *)

proba Penc.

fun enc(maxenc, key, seed): maxmac.
fun kgen(keyseed):key.
fun dec(maxmac, key): bitstringbot.

fun enc2(maxenc, key, seed): maxmac.
fun kgen2(keyseed):key.

fun injbot(maxenc):bitstringbot [data].
(* The function Z returns for each bitstring, a bitstring of the same length, consisting only of zeroes. *)
fun    Z(maxenc):maxenc.
const  Zconcat1:maxenc.
const  Zconcat2:maxenc.
const  Zconcat3: maxenc.
const  Zpad:maxenc.


(* BB: added in order to try to prove the query 
	event fullTC(C, S, k,N, x,z,y) && fullCT(T, S, k',N, x,z,y) ==> k=k'
   but it does not work. It seems to be a limitation of the prover. 
   In game 58, just before it proves 
query  x:maxmac, x':maxmac, y:maxmac, y': maxmac, N:nonce;					   
        event partTC(C,x,y) ==> partCT(T,x',y) && fullKC(C,T,N,x, y').	
query x: maxmac, x':maxmac,z: maxmac,y:maxmac, w:maxmac,k:key, N:nonce, N': nonce;
      	event fullCT(T,S,k, N,x,z,y) ==> fullTC(C,S,k, N,x',z,y) && fullKC(C,T,N',x',w).
query z:maxmac, y:maxmac, x:maxmac, x':maxmac,k:key, N:nonce;
      	event inj:fullCT(T,S,k, N,x, z,y) ==> inj: fullTC(C, S,k, N,x', z,y).
   it should also prove the query above.
   e11[@i812/813[!11]] = m7[!11] = y = e11[!13]
   so, by the equation builtin just below plus injectivity of concat3,
   SK_795/800[@i812/813[!11]] =  SK_795/800[!13]
   that is
   k = k'

 *)
equation forall m:maxenc, m2:maxenc, k:key, r1:seed, r2:seed;
	(enc(m,k,r1) = enc(m2,k,r2)) = (m = m2).

equation forall m:maxenc, r:keyseed, r2:seed; 
	dec(enc(m, kgen(r), r2), kgen(r)) = injbot(m).
equation forall y:nonce, z:tgs, t:key, u:mkey;
	Z(concat1(t, u, y, z)) = Zconcat1.
equation forall y:key, w:mkey, z:client; 
	Z(concat2(y, w, z)) = Zconcat2.
equation forall  y:nonce, z:server, t:key, u:mkey;
	Z(concat3(t, u, y, z)) = Zconcat3.
equation forall z:client, t:timest;
        Z(pad(z,t)) = Zpad. 
					    

equiv
  ! N2 new r: keyseed; ! N new r2: seed; gen_Oracle(x: maxenc) := return(enc(x, kgen(r), r2))
<=(N2 * Penc(time, N))=>
  ! N2 new r: keyseed; ! N new r2: seed; gen_Oracle(x: maxenc) := return(enc2(Z(x), kgen2(r), r2)).

(* Weakly Unforgeable MAC *)

proba Pmac.

fun mac(maxmac, mkey):macs.
fun check(maxmac, mkey, macs): bool.
fun mkgen(mkeyseed):mkey.

fun mac2(maxmac, mkey):macs.
fun check2(maxmac, mkey, macs): bool.
fun mkgen2(mkeyseed):mkey.

equation forall m:maxmac, r:mkeyseed;
	check(m, mkgen(r), mac(m, mkgen(r))).
equation forall m:maxmac, r:mkeyseed;
	check2(m, mkgen2(r), mac2(m, mkgen2(r))).

						   
equiv
  ! N3 new r: mkeyseed; (
    ! N gen_Oracle_1(x: maxmac) := return(mac(x, mkgen(r))) |
    ! N2 gen_Oracle_2(m: maxmac, ma: macs) := return(check(m, mkgen(r), ma)))
<=(N3 * Pmac(time, N, N2))=>
  ! N3 new r: mkeyseed; (
    ! N gen_Oracle_1(x: maxmac) := return(mac2(x, mkgen2(r))) |
    ! N2 gen_Oracle_2(m: maxmac, ma: macs) := find j <= N suchthat defined(x[j]) && (m = x[j]) &&  (* (ma = mac2(x[j], mkgen2(r)))*) check2(x[j], mkgen2(r), ma) then return(true) else return(false)).



(* Queries *)

channel c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15, c16, c17, c18, c19, c20, start, finish, cC, cT.
const C : client.
const T : tgs.
const K : kas.
const S : server.						

fun acceptC1(kas): bitstring.
fun acceptC2(tgs, server):bitstring.
fun acceptT(client, server):bitstring.
fun acceptS(client): bitstring.

event fullKC(client, tgs,nonce, maxmac, maxmac).
event fullCK(tgs, nonce,maxmac, maxmac).		
event partCT(tgs,  maxmac, maxmac).
event fullCT(tgs, server, key, nonce, maxmac, maxmac, maxmac). 			
event partTC(client, maxmac, maxmac).    		
event fullTC(client,server, key, nonce, maxmac, maxmac, maxmac).	
      		


(* authentication queries : *)

(*
query x:maxmac, y:maxmac, z:maxmac, N:nonce;
       event inj:fullCK(T,N, x, y) ==> inj:fullKC(C,T,N, z, y).
		 
query  x:maxmac, x':maxmac, y:maxmac, y': maxmac, N:nonce;					   
        event partTC(C,x,y) ==> partCT(T,x',y) && fullKC(C,T,N,x, y').	
					  	
query x: maxmac, x':maxmac,z: maxmac,y:maxmac, w:maxmac,k:key, N:nonce, N': nonce;
      	event fullCT(T,S,k, N,x,z,y) ==> fullTC(C,S,k, N,x',z,y) && fullKC(C,T,N',x',w).
query z:maxmac, y:maxmac, x:maxmac, x':maxmac,k:key, N:nonce;
      	event inj:fullCT(T,S,k, N,x, z,y) ==> inj: fullTC(C, S,k, N,x', z,y).
*)
query k': key, y: maxmac, z: maxmac, x: maxmac, N: nonce, k: key;
  event(fullTC(C, S, k, N, x, z, y)) && event(fullCT(T, S, k', N, x, z, y)) ==> (k = k').

   	
(* Secrecy of the key SK 
query secret keySK. 					
query secret keyTSK.
*)


 

		
(*channels c13, c16, c17 *)





	
(*channels c14, c15*)


(*channels c7, c8 *)




process
	in(start, ());
new rKc: keyseed;
let Kc: key = kgen(rKc) in
new rmKc: mkeyseed;
let mKc: mkey = mkgen(rmKc) in
new rKt: keyseed;
let Kt: key = kgen(rKt) in
new rmKt: mkeyseed;
let mKt: mkey = mkgen(rmKt) in
new rKs: keyseed;
let Ks: key = kgen(rKs) in
new rmKs: mkeyseed;
let mKs: mkey = mkgen(rmKs) in
out(c20, ());
((
  ! i_1 <= N
  in(c1[i_1], (h: tgs, h2: server));
  new Nc: nonce;
  out(c2[i_1], (C, h, Nc));
  in(c3[i_1], (=C, m: maxmac, mac1: macs, m2: maxmac, mac2_1: macs));
  if check(m2, mKc, mac2_1) then
  let injbot(concat1(AK: key, mAK: mkey, =Nc, =h)) = dec(m2, Kc) in
  event fullCK(h, Nc, m, m2);
  new Nt: nonce;
  new ts_1: timest;
  new r1: seed;
  let e5: maxmac = enc(pad(C, ts_1), AK, r1) in
  let mac5: macs = mac(e5, mAK) in
  event partCT(h, m, e5);
  out(c4[i_1], (m, mac1, e5, mac5, h2, Nt));
  in(c5[i_1], (=C, m6: maxmac, mac6: macs, m7: maxmac, mac7: macs));
  if check(m7, mAK, mac7) then
  let injbot(concat3(SK: key, mSK: mkey, =Nt, =h2)) = dec(m7, AK) in
  event fullCT(h, h2, SK, Nt, m, e5, m7);
  out(c6[i_1], acceptC2(h, h2));
  in(finish[i_1], ());
  if (h = T) && (h2 = S) then
  (
    let keySK: key = SK
  )
  else
    out(cC[i_1], SK)
) | (
  ! i_2 <= N
  in(c14[i_2], (hc: client, ht: tgs, n: nonce));
  find j1 = j1_1 <= N2 suchthat defined(Khost[j1_1], Rkey[j1_1], Rmkey[j1_1]) && (Khost[j1_1] = hc) then
  find j2 = j2_1 <= N2 suchthat defined(Lhost[j2_1], Qkey[j2_1], Qmkey[j2_1]) && (Lhost[j2_1] = ht) then
  new rAK: keyseed;
  let AK_1: key = kgen(rAK) in
  new rmAK: mkeyseed;
  let mAK_1: mkey = mkgen(rmAK) in
  new r3: seed;
  let e3: maxmac = enc(concat2(AK_1, mAK_1, hc), Qkey[j2], r3) in
  let mac3: macs = mac(e3, Qmkey[j2]) in
  new r4: seed;
  let e4: maxmac = enc(concat1(AK_1, mAK_1, n, ht), Rkey[j1], r4) in
  let mac4: macs = mac(e4, Rmkey[j1]) in
  event fullKC(hc, ht, n, e3, e4);
  out(c15[i_2], (hc, e3, mac3, e4, mac4))
) | (
  ! i_3 <= N
  in(c7[i_3], (m8: maxmac, mac8: macs, m9: maxmac, mac9: macs, h3: server, n2_1: nonce));
  if check(m8, mKt, mac8) then
  let injbot(concat2(AK_2: key, mAK_2: mkey, h4: client)) = dec(m8, Kt) in
  if check(m9, mAK_2, mac9) then
  let injbot(pad(=h4, ts_2: timest)) = dec(m9, AK_2) in
  event partTC(h4, m8, m9);
  new SK_1: key;
  new mSK_1: mkey;
  find j3 = j3_1 <= N2 suchthat defined(Mhost1[j3_1], Mhost2[j3_1], Pmkey[j3_1], Pkey[j3_1]) && (Mhost1[j3_1] = T) && (Mhost2[j3_1] = h3) then
  new r10: seed;
  let e10: maxmac = enc(concat2(SK_1, mSK_1, h4), Pkey[j3], r10) in
  let mac10: macs = mac(e10, Pmkey[j3]) in
  new r11: seed;
  let e11: maxmac = enc(concat3(SK_1, mSK_1, n2_1, h3), AK_2, r11) in
  let mac11: macs = mac(e11, mAK_2) in
  event fullTC(h4, h3, SK_1, n2_1, m8, m9, e11);
  out(c8[i_3], (h4, e10, mac10, e11, mac11, acceptT(h4, h3)));
  in(c9[i_3], ());
  if (h4 = C) && (h3 = S) then
  (
    let keyTSK: key = SK_1
  )
  else
    out(cT[i_3], SK_1)
) | (
  ! i_4 <= N2
  in(c13[i_4], (Khost: client, Kkey: key, Kmkey: mkey));
  let Rkey: key = (if Khost = C then Kc else Kkey) in
  let Rmkey: mkey = (if Khost = C then mKc else Kmkey)
) | (
  ! i_5 <= N2
  in(c17[i_5], (Lhost: tgs, Lkey: key, Lmkey: mkey));
  let Qkey: key = (if Lhost = T then Kt else Lkey) in
  let Qmkey: mkey = (if Lhost = T then mKt else Lmkey)
) | (
  ! i_6 <= N2
  in(c16[i_6], (Mhost1: tgs, Mhost2: server, Mkey: key, Mmkey: mkey));
  let Pkey: key = (if (Mhost1 = T) && (Mhost2 = S) then Ks else Mkey) in
  let Pmkey: mkey = (if (Mhost1 = T) && (Mhost2 = S) then mKs else Mmkey)
))





(* EXPECTED
RESULT Could not prove event(fullTC(C, S, k, N, x, z, y)) && event(fullCT(T, S, k', N, x, z, y)) ==> (k = k').
0.784s (user 0.760s + system 0.024s), max rss 99984K
END *)
