type D.

(* set interactiveMode = true. *)

fun concat(D,D):D.
equation builtin assoc(concat).

fun f(D):bitstring.
fun h(D):bitstring.
fun g(D,D,D): D.

const zero, one, two, three: D. 

channel c.

proba Peq.
param n.

equiv
  ! n O(x: D, y: D) := return(concat(x,concat(y,x))) [all]
<=(Peq)=>
  ! n O(x: D, y: D) := return(g(x,y,x)).

(* The transformation cannot be applied, because there would remain an
   occurrence of concat in the transformed game and the transformation
   requires all occurrences of concat to be transformed. *)

process in(c, ());
out(c, h(concat(concat(zero, one), concat(two, zero))))

 (*;
	in(c, ()); let z = concat(zero,one) in out(c, h(concat(z, concat(two, zero))));
	in(c, ()); let t = concat(two, zero) in out(c, h(concat(z, t)));
	in(c, ()); let x = concat(z,t) in out(c, h(x)) *)

(* EXPECTED
All queries proved.
0.024s (user 0.020s + system 0.004s), max rss 10448K
END *)
