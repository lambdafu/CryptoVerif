(*

This example causes an internal error:
  Internal error: new should not appear as term
  Please report bug to Bruno.Blanchet@ens.fr, including input file and output
in CryptoVerif 1.15. This is because there is a new
in the condition of get. This should be forbidden in syntax.ml.

WooLam shared-key auth protocol (1992, computer)
Corrections of Gordon, Jeffrey CSFW'01

A -> B : A
B -> A : N (fresh)
A -> B : { m3, B, N }_kAS
B -> S : A,B,{ m3, B, N }_kAS
S -> B : { m5, A, N }_kBS
B: verify { m5, A, N }_kBS = the message from S

Correct.
*)



param N.
param N2.
param N3.

type nonce [large,fixed].
type host [bounded].
type mkey [bounded].
type mkeyseed [fixed].
type key [fixed].
type keyseed [fixed].
type seed [fixed].
type macs [fixed].
type tag [bounded].
type maxenc [bounded].
type maxmac [bounded].

table keytbl (key, mkey, host).

fun concat1(tag, host, nonce):maxenc [data].

(* Shared-key encryption (CPA Stream cipher) *)

proba Penc.

expand IND_CPA_sym_enc(keyseed, key, maxenc, maxmac, seed, kgen, enc, dec, injbot, Z, Penc).

(* The function Z returns for each bitstring, a bitstring
   of the same length, consisting only of zeroes. *)
const Zconcat1:maxenc.
equation forall y:tag, h:host, z:nonce; 
	Z(concat1(y,h,z)) = Zconcat1.

(* Mac *)

proba Pmac.

expand UF_CMA_mac(mkeyseed, mkey, maxmac, macs, mkgen, mac, check, Pmac).

(* Queries *)

channel c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13,
	start, finish.

const A: host.
const B: host.

const tag3: tag.
const tag5: tag.

event beginA(host).
event beginAfull(host, host, nonce).
event endB(host, host, nonce).

query x:host, y:host, z:nonce;
	event(endB(x,y,z)) ==> event(beginAfull(x,y,z)).
query x:host, y:host, z:nonce;
	event(endB(x,y,z)) ==> event(beginA(x)).
query x:host, y:host, z:nonce;
	inj-event(endB(x,y,z)) ==> inj-event(beginAfull(x,y,z)).
query x:host, y:host, z:nonce;
	inj-event(endB(x,y,z)) ==> inj-event(beginA(x)).

let processA(kAS: key, mkAS: mkey) =
	in(c1, hostB2:host); (* Choose the B host *)
	event beginA(hostB2);
	out(c2, A);
	in(c3, n:nonce);
	event beginAfull(hostB2, A, n);
	new r1:seed;
	let e1 = enc(concat1(tag3, hostB2, n), kAS, r1) in
	out(c4, (e1, mac(e1, mkAS))).

let processB(kBS: key, mkBS: mkey) =
	in(c5, hostA2:host);
	new N:nonce;
	out(c6, N);
	in(c7, (m:maxmac, macm:macs));
	out(c8, (hostA2, B, m, macm));
	in(c9, (m2:maxmac, macm2:macs));
	if check(m2, mkBS, macm2) then
	if injbot(concat1(tag5, hostA2, N)) = dec(m2, kBS) then
	(* OK *)
	if hostA2 = A then
	event endB(B, hostA2, N).

let processK =
	in(c10, (Khost: host, Kkey: key, Kmkey: mkey));
(*        get keytbl (x,y,=Khost) in yield else*)
        if (Khost <> A) && (Khost <> B) then
           insert keytbl (Kkey, Kmkey, Khost).

let processS =
	in(c11, (hostA1:host, hostB0:host, m:maxmac, macm:macs));
        get keytbl (kbs, mkbs, =hostB0) suchthat new x:nonce; true in
        get keytbl (kas, mkas, =hostA1) in
	if check(m, mkas, macm) then
	let injbot(concat1(=tag3, =hostB0, n)) = dec(m, kas) in
	new r3:seed;
	let e3 = enc(concat1(tag5, hostA1, n), kbs, r3) in
	out(c12, (e3, mac(e3, mkbs))).


process 
	in(start, ());
	new rKas: keyseed;
	let kAS = kgen(rKas) in
	new rmKas: mkeyseed;
	let mkAS = mkgen(rmKas) in
	new rKbs: keyseed;
	let kBS = kgen(rKbs) in
	new rmKbs: mkeyseed;
	let mkBS = mkgen(rmKbs) in
        insert keytbl (kAS, mkAS, A);
        insert keytbl (kBS, mkBS, B);
	out(c13, ());
	((! N processA(kAS, mkAS)) |
	 (! N processB(kBS, mkBS)) | 
	 (! N processS) |
	 (! N2 processK))

(* EXPECTED
Error: new at line 117, characters 50-67 should not occur in condition of get
xtime: error in child process (status : 2)
END *)
