type D.

(* set interactiveMode = true. *)

fun xor(D,D):D.
const neut:D.
equation builtin ACUN(xor,neut).

fun h(D):bitstring.
fun g(D,D,D): bitstring.

const zero, one, two, three, four: D. 
const zero', one', two', three', four': D. 

channel c.
proba Peq.
param n.

equiv
  ! n O(x: D, y: D, z: D) := return(h(xor(x,xor(y,z)))) [all]
<=(Peq)=>
  ! n O(x: D, y: D, z: D) := return(g(x,y,z)).


process in(c, ());
out(c, h(xor(xor(zero, one), xor(two, zero'))));
in(c, ());
out(c, h(xor(xor(zero, one), xor(two, xor(zero', one')))));
in(c, ());
let z: D = xor(zero, one) in
out(c, h(xor(z, xor(two, zero'))));
in(c, ());
let t: D = xor(two, zero') in
out(c, h(xor(z, t)));
in(c, ());
let x: D = xor(z, t) in
out(c, h(x))




(* EXPECTED
All queries proved.
0.020s (user 0.016s + system 0.004s), max rss 10436K
END *)
