(* Version in which the participants only talk to A and B 
   Using two series of function symbols to prevent repeated applications
   of the same cryptographic rule.
*)

param N.
param N2.
param N3.

type tag [bounded].
type nonce [large,fixed].
type host [bounded].
type mkey [bounded].
type mkeyseed [fixed].
type key [fixed].
type keyseed [fixed].
type seed [fixed].
type macs [fixed].
type maxenc [bounded].
type maxmac [bounded].
type maxencnotag [bounded].

const tag1: tag.
const tag2: tag.
const tag3: tag.
const tag4: tag.

fun concat1(nonce, nonce, host, host):maxencnotag [data].
fun concat2(nonce, key):maxencnotag [data].
fun tagf(tag, maxencnotag):maxenc [data].

(* Shared-key encryption (IND-CPA Stream cipher) *)

proba Penc.

expand IND_CPA_sym_enc(keyseed, key, maxenc, maxmac, seed, kgen, enc, dec, injbot, Z, Penc).

(* The function Z returns for each bitstring, a bitstring
   of the same length, consisting only of zeroes. *)
const Z1:maxenc.
const Z2:maxenc.
equation forall u:tag, x:nonce, y:nonce, z:host, t:host; Z(tagf(u,concat1(x,y,z,t))) = Z1.
equation forall u:tag, x:nonce, y:key; Z(tagf(u,concat2(x,y))) = Z2.

(* Mac *)

proba Pmac.

expand UF_CMA_mac(mkeyseed, mkey, maxmac, macs, mkgen, mac, check, Pmac).

(* Queries *)

query secret keyA [cv_onesession].
query secret keyB [cv_onesession].

query secret keyA.
query secret keyB.

channel c1, c2, c3, c4, c5, c6, c7, c8, c9, start, finish.
const A : host.
const B : host.

event endA(host, host, nonce, key).
event endB(host, host, nonce, key).
event beginA(host, host, nonce).
event beginB(host, host, nonce).

def authquery(endA, beginB) {
       
query x:host, y:host, n:nonce, k:key; 
	event(endA(x,y,n,k)) ==> event(beginB(x,y,n)).
}

def mutualauthquery(endA, beginB, endB, beginA) {

expand authquery(endA, beginB).
expand authquery(endB, beginA).

}

expand mutualauthquery(endA, beginB, endB, beginA).

query x:host, y:host, n:nonce, k:key; 
	inj-event(endA(x,y,n,k)) ==> inj-event(beginB(x,y,n)).
query x:host, y:host, n:nonce, k:key; 
	inj-event(endB(x,y,n,k)) ==> inj-event(beginA(x,y,n)).


let processA(Kas: key, mKas: mkey) = 
	in(start, ());
	new M : nonce;
	new Na : nonce;
	new s1 : seed;
	let ea1 = enc(tagf(tag1, concat1(Na, M, A, B)), Kas, s1) in
	event beginA(A, B, M);
	out(c1, (M, A, B, ea1, mac(ea1, mKas)));
	in(c2, (=M, ea2: maxmac, ma2: macs));
	if check(ea2, mKas, ma2) then
	let injbot(tagf(=tag3, concat2(=Na, k))) = dec(ea2, Kas) in
	event endA(A, B, M, k);
	let keyA:key = k.

let processB(Kbs: key, mKbs: mkey) =
	in(c3, (M: nonce, =A, =B, ea:maxmac, ma:macs));
	new Nb : nonce;
	new s2 : seed;
	let e2 = enc(tagf(tag2, concat1(Nb, M, A, B)), Kbs, s2) in
	event beginB(A, B, M);
	out(c4, (M, A, B, ea, ma, e2, mac(e2, mKbs)));
	in(c5, (=M, ea2: maxmac, ma2: macs, eb2: maxmac, mb2: macs));
	if check(eb2, mKbs, mb2) then
	let injbot(tagf(=tag4, concat2(=Nb, k))) = dec(eb2, Kbs) in
	out(c6, (M, ea2, ma2));
	in(finish, ());
	event endB(A, B, M, k);
	let keyB:key = k.

let processS(Kas: key, mKas: mkey, Kbs: key, mKbs: mkey) =
	in(c7, (M: nonce, =A, =B, ea1: maxmac, ma1: macs, eb1: maxmac, mb1: macs));
	if check(ea1, mKas, ma1) then
	let injbot(tagf(=tag1, concat1(Na, =M, =A, =B))) = dec(ea1, Kas) in
	if check(eb1, mKbs, mb1) then
	let injbot(tagf(=tag2, concat1(Nb, =M, =A, =B))) = dec(eb1, Kbs) in
	new k: key;
	new s3: seed;
	new s4: seed;
	let e1 = enc(tagf(tag3, concat2(Na, k)), Kas, s3) in
	let e2 = enc(tagf(tag4, concat2(Nb, k)), Kbs, s4) in
	out(c8, (M, e1, mac(e1, mKas), e2, mac(e2, mKbs))).
	
process 
	in(start, ());
	new rKas: keyseed;
	let Kas = kgen(rKas) in
	new rmKas: mkeyseed;
	let mKas = mkgen(rmKas) in
	new rKbs: keyseed;
	let Kbs = kgen(rKbs) in
	new rmKbs: mkeyseed;
	let mKbs = mkgen(rmKbs) in
	out(c9, ());
	((! N processA(Kas, mKas)) |
	 (! N processB(Kbs, mKbs)) | 
	 (! N processS(Kas, mKas, Kbs, mKbs)))

(* EXPECTED
RESULT Could not prove inj-event(endB(x, y, n, k)) ==> inj-event(beginA(x, y, n)).
0.192s (user 0.180s + system 0.012s), max rss 12640K
END *)
