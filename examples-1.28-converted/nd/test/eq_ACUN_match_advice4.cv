type D.

(* set interactiveMode = true. *)

fun xor(D,D):D.
const neut:D.
equation builtin ACUN(xor,neut).

fun h(D):bitstring.
fun g(D,D,D): bitstring.

const zero, one, two, three, zero': D. 

channel c.
proba Peq.
param n.

(* inv(zero) and zero cancel out, so the rule is equivalent to
   h(y) -> g(inv(zero),y,zero) *)

equiv
  ! n O(y: D) := return(h(xor(one,xor(y,zero)))) [all]
<=(Peq)=>
  ! n O(y: D) := return(g(one,y,zero)).


process in(c, ());
out(c, h(xor(xor(one, zero), xor(two, zero'))));
in(c, ());
out(c, h(xor(xor(zero', one), xor(two, xor(two, zero)))));
in(c, ());
let z: D = xor(one, zero) in
out(c, h(xor(z, xor(two, zero'))));
in(c, ());
let t: D = xor(two, zero') in
out(c, h(xor(z, t)));
in(c, ());
let x: D = xor(z, t) in
out(c, h(x))




(* EXPECTED
All queries proved.
0.020s (user 0.016s + system 0.004s), max rss 10872K
END *)
