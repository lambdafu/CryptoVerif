(* MINOR BUG: See Mac *)

(* Version with possibly dishonest participants.
   Using two series of function symbols to prevent repeated applications
   of the same cryptographic rule.
*)


param N, N2, N3.

type nonce [large,fixed].
type host.
type key.
type keyseed [fixed].
type seed [fixed].
type macs.

fun concat1(nonce, nonce, host, host):bitstring.
equation forall y:nonce,z:nonce,t:host,u:host,y2:nonce,z2:nonce,t2:host,u2:host; 
	(concat1(y,z,t,u) = concat1(y2,z2,t2,u2)) =
	((y = y2) && (z = z2) && (t = t2) && (u = u2)).
fun concat2(nonce, key):bitstring.
equation forall y:nonce,z:key,y2:nonce,z2:key; 
	(concat2(y,z) = concat2(y2,z2)) = ((y = y2) && (z = z2)).

fun isconcat1(bitstring):bool.
equation forall y:nonce,z:nonce,t:host,u:host; isconcat1(concat1(y,z,t,u)) = true.
equation forall y:nonce,z:key; isconcat1(concat2(y,z)) = false.

fun getnonce1(bitstring):nonce [projection].
equation forall y:nonce,z:nonce,t:host,u:host; getnonce1(concat1(y,z,t,u)) = y.
fun getnonce2(bitstring):nonce [projection].
equation forall y:nonce,z:nonce,t:host,u:host; getnonce2(concat1(y,z,t,u)) = z.
fun gethost1(bitstring):host [projection].
equation forall y:nonce,z:nonce,t:host,u:host; gethost1(concat1(y,z,t,u)) = t.
fun gethost2(bitstring):host [projection].
equation forall y:nonce,z:nonce,t:host,u:host; gethost2(concat1(y,z,t,u)) = u.

fun getnonce3(bitstring):nonce [projection].
equation forall y:nonce,z:key; getnonce3(concat2(y,z)) = y.
fun getkey2(bitstring):key [projection].
equation forall y:nonce,z:key; getkey2(concat2(y,z)) = z.

(* Shared-key encryption (CPA Stream cipher) *)

proba Penc.

fun enc(bitstring, key, seed): bitstring.
fun kgen(keyseed):key.
fun dec(bitstring, key): bitstring.

fun enc2(bitstring, key, seed): bitstring.
fun kgen2(keyseed):key.
fun dec2(bitstring, key): bitstring.
(* The function Z returns for each bitstring, a bitstring
   of the same length, consisting only of zeroes. *)
fun Z(bitstring):bitstring.
const Znonce:nonce.
const Zhost:host.
const Zkey:key.

equation forall m:bitstring, r:keyseed, r2:seed; 
	dec(enc(m, kgen(r), r2), kgen(r)) = m.
equation forall m:bitstring, r:keyseed, r2:seed; 
	dec2(enc2(m, kgen2(r), r2), kgen2(r)) = m.
equation forall y:nonce,z:nonce,t:host,u:host; 
	Z(concat1(y,z,t,u)) = concat1(Znonce,Znonce,Zhost,Zhost).
equation forall y:nonce,z:key; 
	Z(concat2(y,z)) = concat2(Znonce,Zkey).

equiv  !N new r: keyseed; !N2 new r2: seed; Oenc(x:bitstring) := return(enc(x, kgen(r), r2))
     <=(N * Penc(N2))=> 
       !N new r: keyseed; !N2 new r2: seed; Oenc(x:bitstring) := return(enc2(Z(x), kgen2(r), r2)).

(* Mac *)

proba Pmac.

fun mac(bitstring, key):macs.
fun check(bitstring, key, macs): bool.
fun mkgen(keyseed):key.

fun mac2(bitstring, key):macs.
fun check2(bitstring, key, macs): bool.
fun mkgen2(keyseed):key.

equation forall m:bitstring, r:keyseed;
	check(m, mkgen(r), mac(m, mkgen(r))).
equation forall m:bitstring, r:keyseed;
	check2(m, mkgen2(r), mac2(m, mkgen2(r))).

equiv !N new r: keyseed;(
	 !N3 Omac(x: bitstring) := return( mac(x, mkgen(r))) |
	 !N2 Ocheck(m: bitstring, ma: macs) := return(check(m, mkgen(r), ma)))
     <=(N * Pmac(N3))=>
      !N new r: keyseed;(
	 !N3 Omac(x: bitstring) := 
		find k <= N2 suchthat defined(j[k]) && x = x then 
			return(mac2(x, mkgen2(r)))
		else return(mac2(x, mkgen2(r))) |
	 !N2 Ocheck(m: bitstring, ma: macs) := 
	    find j <= N suchthat defined(x[j]) && (m = x[j]) && check2(x[j], mkgen2(r), ma) then return(true) else return(false)).

(* BUG: 	find k <= N2 suchthat defined(j[k]) && x = x then 
			mac2(x, mkgen2(r)) 
		else mac2(x, mkgen2(r))
yields "find else mac2(x, mkgen2(r))" with the then part removed after transformation,
because references to j[k] when j is the index of another find are not properly handled.
This situation should be excluded and yield an error message *)

(* Queries *)

query secret keyA.
query secret keyB.

query secret keyA [cv_onesession].
query secret keyB [cv_onesession].

channel c.
const A : host.
const B : host.

let processA(Kas: key, mKas: key) = 
	in(c, hb: host);
	new M : nonce;
	new Na : nonce;
	new s1 : seed;
	let ea1 = enc(concat1(Na, M, A, hb), Kas, s1) in
	out(c, (M, A, hb, ea1, mac(ea1, mKas)));
	in(c, (=M, ea2: bitstring, ma2: macs));
	if check(ea2, mKas, ma2) then
	let da2 = dec(ea2, Kas) in
	if isconcat1(da2) = false then
	if getnonce3(da2) = Na then
	if hb = B then
	let keyA:bitstring = getkey2(da2).

let processB(Kbs: key, mKbs: key) =
	in(c, (M: nonce, ha: host, =B, ea:bitstring, ma:macs));
	new Nb : nonce;
	new s2 : seed;
	let e2 = enc(concat1(Nb, M, ha, B), Kbs, s2) in
	out(c, (M, ha, B, ea, ma, e2, mac(e2, mKbs)));
	in(c, (=M, ea2: bitstring, ma2: macs, eb2: bitstring, mb2: macs));
	if check(eb2, mKbs, mb2) then
	let db2 = dec(eb2, Kbs) in
	if isconcat1(db2) = false then
	if getnonce3(db2) = Nb then
	out(c, (M, ea2, ma2));
	if ha = A then
	let keyB:bitstring = getkey2(db2).

let processK(Kas: key, mKas: key, Kbs: key, mKbs: key) =
	in(c, (Khost: host, Kkey: key, Kmkey: key));
	let Rkey:key = 
		if Khost = A then Kas else
		if Khost = B then Kbs else
		Kkey
	in
	let Rmkey:key =
		if Khost = A then mKas else
		if Khost = B then mKbs else
		Kmkey.

let processS =
	in(c, (M: nonce, ha: host, hb: host, ea1: bitstring, ma1: macs, eb1: bitstring, mb1: macs));
	find jA <= N2 suchthat defined(Rkey[jA], Rmkey[jA], Khost[jA]) && (ha = Khost[jA]) then
	let kas = Rkey[jA] in
	let mkas = Rmkey[jA] in
	find jB <= N2 suchthat defined(Rkey[jB], Rmkey[jB], Khost[jB]) && (hb = Khost[jB]) then
	let kbs = Rkey[jB] in
	let mkbs = Rmkey[jB] in
	if check(ea1, mkas, ma1) then
	let da1 = dec(ea1, kas) in
	if isconcat1(da1) then
	let Na = getnonce1(da1) in
	if (M = getnonce2(da1)) && (ha = gethost1(da1)) && (hb = gethost2(da1)) then
	if check(eb1, mkbs, mb1) then
	let db1 = dec(eb1, kbs) in
	if isconcat1(db1) then
	let Nb = getnonce1(db1) in
	if (M = getnonce2(db1)) && (ha = gethost1(db1)) && (hb = gethost2(db1)) then
	new k: key;
	new s3: seed;
	new s4: seed;
	let e1 = enc(concat2(Na, k), kas, s3) in
	let e2 = enc(concat2(Nb, k), kbs, s4) in
	out(c, (M, e1, mac(e1, mkas), e2, mac(e2, mkbs))).
	
process 
	new rKas: keyseed;
	let Kas = kgen(rKas) in
	new rmKas: keyseed;
	let mKas = mkgen(rmKas) in
	new rKbs: keyseed;
	let Kbs = kgen(rKbs) in
	new rmKbs: keyseed;
	let mKbs = mkgen(rmKbs) in
	((! N processA(Kas, mKas)) |
	 (! N processB(Kbs, mKbs)) | 
	 (! N processS) |
	 (! N2 processK(Kas, mKas, Kbs, mKbs)))

(* EXPECTED
Error: This expression has type [1,N] but expects type [1,N3]
xtime: error in child process (status : 2)
END *)
