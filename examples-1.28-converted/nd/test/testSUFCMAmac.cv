(* Trivial running example for conference paper. *)

param N.
param N2.
param N3.

type mkey [bounded].
type mkeyseed [fixed].
type key [fixed].
type keyseed [fixed].
type seed [fixed].
type macs [bounded].

fun keyToBitstring(key):bitstring [data].

(* Shared-key encryption (CPA Stream cipher) *)

proba Penc.

expand IND_CPA_sym_enc(keyseed, key, bitstring, bitstring, seed, kgen, enc, dec, injbot, Z, Penc).

(* The function Z returns for each bitstring, a bitstring
   of the same length, consisting only of zeroes. *)
const Zkey:bitstring.
equation forall y:key; 
	Z(keyToBitstring(y)) = Zkey.

(* Mac *)

proba Pmac.

expand SUF_CMA_mac(mkeyseed, mkey, bitstring, macs, mkgen, mac, check, Pmac).

(* Queries *)

query secret k2 [cv_onesession].
query secret k3 [cv_onesession].

query secret k2.
query secret k3.

event endB(bitstring, macs).
event beginA(bitstring, macs).

query y: macs, x: bitstring;
  event(endB(x, y)) ==> event(beginA(x, y)) public_vars k2, k3.

channel cA, cB, start, c.





process 
	in(start, ());
new rKab: keyseed;
let Kab: key = kgen(rKab) in
new rmKab: mkeyseed;
let mKab: mkey = mkgen(rmKab) in
out(c, ());
((
  ! i_1 <= N
  in(cA[i_1], ());
  new k2: key;
  new s1: seed;
  let ea1: bitstring = enc(keyToBitstring(k2), Kab, s1) in
  let t1: macs = mac(ea1, mKab) in
  event beginA(ea1, t1);
  out(cA[i_1], (ea1, t1))
) | (
  ! i_2 <= N
  in(cB[i_2], (ea: bitstring, ma_1: macs));
  if check(ea, mKab, ma_1) then
  let injbot(keyToBitstring(k3: key)) = dec(ea, Kab) in
  event endB(ea, ma_1);
  out(cB[i_2], ())
))



(* EXPECTED
RESULT Could not prove secrecy of k3.
0.036s (user 0.036s + system 0.000s), max rss 10868K
END *)
