
set interactiveMode = true.

channel c_in, c_out.
type mstring [large].

param N.

type nonce [fixed, large].

(************************
  Public-key encryption
*************************)

(* IND-CCA2 probabilistic public-key encryption 
   keyseed: type of key seeds, must be "fixed" (to be able to generate random numbers from it), typically large.
   pkey: type of public keys, must be "bounded"
   skey: type of secret keys, must be "bounded"
   cleartext: type of cleartexts, must be "bounded" or "fixed" (the encryptions of *all* cleartexts of any length
              are assumed to be indistinguishable from each other).
   ciphertext: type of ciphertexts
   seed: type of random seeds for encryption, must be "fixed"

   dk: public-key generation function 
   sk: secret-key generation function
   E: encryption function
   D: decryption function
   injbot: natural injection from cleartext to bitstringbot
   Z: a constant cleartext

   Penc(t, N): probability of breaking the IND-CCA2 property
   in time t for one key and N decryption queries.
   Penccoll: probability of collision between independently generated keys
*)

type keyseed_T [fixed, large].
type pkey [bounded].
type cleartext [bounded, large].
type seed_T [fixed].

proba Penc.
proba Penccoll.

expand IND_CCA2_public_key_enc(keyseed_T, pkey, pkey, cleartext, mstring, seed_T, dk, ek, E, D, injbot, Z, Penc, Penccoll).

(*************************** 
  Typecast
***************************)

fun ctom(cleartext): mstring [data, uniform].

fun mtoc(mstring): cleartext [uniform].

(* This would allow it to verify, but it's not generally true: *)
(*
equation forall x: mstring;
  ctom(mtoc(x)) = x.
*)

(*************************** 
  Concatenation and Parsing 
***************************)

fun pad(nonce): mstring [data, uniform].

(******************** 
  Query
********************)
 
event beginA().
event endB().

query;
  event(endB) ==> event(beginA).

(******************** 
  Process
********************)

let pA(pkB: pkey) = 
  in(c_in, ());
  
  event beginA();

  new nonce3: seed_T;
  let sN_m = pad(sN) in
  if sN_m = ctom(mtoc(sN_m)) then
  let msg1_c = mtoc(sN_m) in
  let msg1 = E(msg1_c, pkB, nonce3) in
  out(c_out, msg1); 0 .

let pB(skB: skey) = 
  in(c_in, msg1: mstring);
  let injbot(msg1_c) = D(msg1, skB) in
  (* let pad(=sN) = ctom(msg1_c) in *)
  if pad(sN) = ctom(msg1_c) then

  event endB();
  yield .

process
  (
  in(c_in, ());
  new B_seed: keyseed_T;
  let pkB = ek(B_seed) in
  let skB = dk(B_seed) in
  
  new sN: nonce;
  
  out(c_out, (pkB));
  ((! N pA(pkB)) | (! N pB(skB)))
)

(* EXPECTED
Error: A uniform function should have a result that can be randomly chosen
xtime: error in child process (status : 2)
END *)
