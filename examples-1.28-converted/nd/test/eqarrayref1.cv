
(* Signed Diffie-Hellman protocol *)

param n, q, nH, N, N2, nCDH, nCDH'.

type host.
type keyseed [large,fixed].
type seed [fixed].
type pkey [bounded].
type skey [bounded].
type blocksize.
type signature.

type Z [fixed].
type G.
type K [large,fixed].
type D [fixed].

fun exp(G,Z): G.
const g:G.

fun mult(Z,Z): Z.
equation builtin commut(mult).

(* exponents multiply *)

equation forall a:G, x:Z, y:Z;
  exp(exp(a,x), y) = exp(a, mult(x,y)).

(* the CDH assumption *) 

proba pCDH.

equiv
  ! n new a: Z; (
    gen_Oracle() := return(exp(g,a)) |
    ! nCDH gen_Oracle_1(m: G, r: G) := return(r = exp(m,a)) |
    ! nCDH' gen_Oracle_2(m: G, m': G, i' <= n) := return(exp(m,a) = exp(m', a[i'])))
<=(pCDH(time,n,nCDH))=>
  ! n new a: Z; (
    gen_Oracle() := return(exp(g,a)) |
    ! nCDH gen_Oracle_1(m: G, r: G) := find i'' <= n suchthat defined(a[i'']) && (m = exp(g,a[i''])) then return(false) else return(r = exp(m,a)) |
    ! nCDH' gen_Oracle_2(m: G, m': G, i' <= n) := return(exp(m,a) = exp(m', a[i']))).


(* h in the random oracle model *)

fun h(K,G): D.

equiv
  ! n new k: K; (
    gen_Oracle_1() := return(k) |
    ! nH gen_Oracle_2(x: G) := return(h(k,x)))
<=(0)=>
  ! n new k: K; (
    gen_Oracle_1() := return(k) |
    ! nH gen_Oracle_2(x: G) := find j <= nH suchthat defined(x[j], r[j]) && (x= x[j]) then return(r[j]) else new r: D; return(r)).

(* signatures *)

fun concatA(host, host, G, G):blocksize [data].
fun concatB(host, host, G, G):blocksize [data].
equation forall x:host, y:host, z:G, t:G, x':host, y':host, z':G, t':G;
   concatA(x,y,z,t) <> concatB(x',y',z',t').
    
proba Psign.
proba Psigncoll.

expand UF_CMA_signature(keyseed, pkey, skey, blocksize, signature, seed, skgen, pkgen, sign, check, Psign, Psigncoll).

const A,B:host.

(* query *)
query secret keyA.
query secret keyB.

channel start, cstart, cA1, cA2, cA3, cA4, cA5, cA6, cB1, cB2, cB3, cB4, cB5, cH, cHret, cK.









process
	in(start, ());
new k_1: K;
new rkA: keyseed;
let skA: skey = skgen(rkA) in
let pkA: pkey = pkgen(rkA) in
new rkB: keyseed;
let skB: skey = skgen(rkB) in
let pkB: pkey = pkgen(rkB) in
out(cstart, (k_1, pkA, pkB));
((
  ! i_1 <= N
  in(cA1[i_1], hostB: host);
  new a: Z;
  let ga: G = exp(g, a) in
  out(cA2[i_1], (A, hostB, ga));
  in(cA3[i_1], (=A, =hostB, gb_1: G, s_1: signature));
  find j2_3 = j2_1 <= N2 suchthat defined(Khost[j2_1], Rkey[j2_1]) && (Khost[j2_1] = hostB) then
  let pkhostB: pkey = Rkey[j2_3] in
  if check(concatB(A, hostB, ga, gb_1), pkhostB, s_1) then
  new r2_1: seed;
  let gab: G = exp(gb_1, a) in
  let kA: D = h(k_1, gab) in
  out(cA4[i_1], sign(concatA(A, hostB, ga, gb_1), skA, r2_1));
  in(cA5[i_1], ());
  if hostB = B then
  (
    let keyA: D = kA
  )
  else
    out(cA6[i_1], kA)
) | (
  ! i_2 <= N
  in(cB1[i_2], (hostA: host, =B, ga_1: G));
  new b: Z;
  let gb_2: G = exp(g, b) in
  new r1_1: seed;
  out(cB2[i_2], (hostA, B, gb_2, sign(concatB(hostA, B, ga_1, gb_2), skB, r1_1)));
  in(cB3[i_2], s_2: signature);
  find j2_4 = j2_2 <= N2 suchthat defined(Khost[j2_2], Rkey[j2_2]) && (Khost[j2_2] = hostA) then
  let pkhostA: pkey = Rkey[j2_4] in
  if check(concatA(hostA, B, ga_1, gb_2), pkhostA, s_2) then
  let gab_1: G = exp(ga_1, b) in
  let kB: D = h(k_1, gab_1) in
  if hostA = A then
  (
    let keyB: D = kB
  )
  else
    out(cB4[i_2], kB)
) | (
  ! i_3 <= nH
  in(cH[i_3], xH: G);
  out(cHret[i_3], h(k_1, xH))
) | (
  ! i_4 <= N2
  in(cK[i_4], (Khost: host, Kkey: pkey));
  let Rkey: pkey = (if Khost = B then pkB else if Khost = A then pkA else Kkey)
))




(* EXPECTED
RESULT Could not prove secrecy of keyB; secrecy of keyA.
0.468s (user 0.460s + system 0.008s), max rss 16596K
END *)
