
(** Hashed ElGamal encryption scheme **)

(** An encryption scheme 
    using an entropy-smoothing hash-function family
    is shown to be SS
    under the DDH assumption.
    See Section 3, "Sequences of Games", Victor Shoup. **)

param n, q.

type Z [fixed].

type G [fixed].

type K [large,fixed].
type D [fixed].

proba pDDH.
proba pESF.

fun exp(G,Z): G.
const gamma:G.

(* gamma is a uniform generator *)

equiv
  ! n new x: Z; gen_Oracle() := return(exp(gamma,x)) [all]
<=(0)=>
  ! n new y: G; gen_Oracle() := return(y).

fun mult(Z,Z): Z.
equation commut(mult).

(* exponents multiply *)

forall a:G, x:Z, y:Z;
  exp(exp(a,x), y) = exp(a, mult(x,y)).

fun xor(D,D): D.

(* xor self-cancels *)

forall x:D, y:D;
  xor(x, xor(x,y)) = y.

(* xor(.,y) is a one-time pad *)

equiv
  ! n new x: D; gen_Oracle_1(y: D) := return(xor(x,y)) [all]
<=(0)=>
  ! n new x: D; gen_Oracle_1(y: D) := return(x).

(* the DDH assumption *) 

equiv
  ! n new x: Z; new y: Z; (
    gen_Oracle_1() := return(exp(gamma,x)) |
    gen_Oracle_2() := return(exp(gamma,y)) |
    gen_Oracle_3() := return(exp(gamma, mult(x,y))))
<=(pDDH(time) * n)=>
  ! n new x: Z; new y: Z; new z: Z; (
    gen_Oracle_1() := return(exp(gamma,x)) |
    gen_Oracle_2() := return(exp(gamma,y)) |
    gen_Oracle_3() := return(exp(gamma, z))).

fun h(K,G): D.

(* h(K) is an entropy-smoothing hash-function family *)

equiv
  ! n new k: K; new delta: G; (
    gen_Oracle_1() := return(k) |
    gen_Oracle_2() := return(h(k,delta))) [all]
<=(pESF(time) * n)=>
  ! n new k: K; new hash: D; (
    gen_Oracle_1() := return(k) |
    gen_Oracle_2() := return(hash)).
    
fun choose(bool,D,D): D.

(* choose(b,M,N) = if b then M else N *)

forall x:bool, y:D, z:D;
  (x && choose(x,y,z) = y) || (not(x) && choose(x,y,z) = z).

(* query *)
query secret b.

channel dummy, cPK, cE, cEret, start.



process
  ! i_1 <= q
in(dummy[i_1], ());
new x: Z;
new k: K;
let alpha: G = exp(gamma, x) in
out(cPK[i_1], (alpha, k));
in(cE[i_1], (m0: D, m1: D));
new b: bool;
let m: D = choose(b, m1, m0) in
new y: Z;
let beta: G = exp(gamma, y) in
let delta: G = exp(alpha, y) in
let hash_1: D = h(k, delta) in
let v: D = xor(hash_1, m) in
out(cEret[i_1], (beta, v))



(* BB: Cut, useless 

process
  in(start, ());
  out(dummy, ());
  processI

*)

(* EXPECTED
All queries proved.
0.032s (user 0.028s + system 0.004s), max rss 38336K
END *)
