
channel io1, io2, io3, io4, io5, io6, io7, io8, io9, io10,
	io11, io12, io13, io14, io15, io16, io17, io18, io19, io20,
	io21, io22, io23, io24, io25, io26, io27, io28, io29, io30,
	cCorrupt.

proof {
      crypto uf_cma_corrupt(sign) kseed;
      out_game "g1.out" occ;
      insert 478 "find j' <= N1 suchthat defined(gx_1[j']) && gx_4 = gx_1[j'] then";
      SArename gy_2;
      out_game "g2.out" occ;
      insert 42 "find j <= N6 suchthat defined(gy_4[j], gx_4[j]) && gx_1 = gx_4[j] && gy = gy_4[j] then";
      crypto rom(HKDF_extract_zero);
      remove_assign binder s;
      remove_assign binder s_3;
      simplify;
      crypto gdh(exp) [variables: x_5 -> a, y_6 -> b .];
      auto
(*    crypto prf(HKDF_expand) *;
      crypto extractor1(HKDF_extract) *;
      crypto prf(HKDF_expand) *;
      crypto id(key2extracted) *;
      crypto prf(HKDF_expand) *;
      crypto suf_cma(mac) *;
      success *)
}


const empty_bytes:bitstring.

type key [large, fixed].
const zero_key: key.

type elt [large, bounded].
fun element2key(elt): key [data].
fun elt2bitstring(elt): bitstring [data].

(* Gap Diffie-Hellman assumption.
   TO DO are the groups prime order? *)

proba pGDH.
expand GDH_prime_order(elt, key, G, exp, mult, pGDH).

letfun dh_keygen() =
   new x:key;
   (x,exp(G,x)).

(* Labels for HKDF_expand *)

type label.
const hk_label:label.
const ss_label:label.
const es_label:label.
const cfin_label:label.
const sfin_label:label.
const ts_label:label.
const dk_label:label.
const dk0_label:label.

type extracted [large, fixed].
(* In fact, the function key2extracted is the identity *)
fun key2extracted(key):extracted [data]. 

param N, N2, N3, N4.

equiv(id(key2extracted))
  ! N new k: key; Ok() := return(key2extracted(k))
<=(0)=>
  ! N new e: extracted; Ok() := return(e).

(* HKDF_extract with zero first argument is a random oracle. *)

type hashkey [large,fixed].

expand ROM_hash(hashkey, elt, extracted, HKDF_extract_zero).

param qH [noninteractive].
channel c1, c2.
 

(* HKDF_extract is an entropy extractor.
   The first argument is the salt, the second argument
   is the key material *)

fun HKDF_extract(key,key):extracted.

proba Pextract.

equiv(extractor(HKDF_extract))
  ! N3 new r1: key; new r2: key; Of() := return(HKDF_extract(r1, r2))
<=(N3 * (1/|key| + Pextract(time + (N3-1)*time(HKDF_extract))))=>
  ! N3 new r2: extracted; Of() := return(r2).

(* HKDF_expand is a pseudo random function *)

fun HKDF_expand(extracted,label,bitstring):key.

proba Pprf.

equiv(prf(HKDF_expand))
  ! N3 new r: extracted; ! N Of(x: label, y: bitstring) := return(HKDF_expand(r, x, y))
<=(N3 * Pprf(time + (N3-1)*(N * time(HKDF_expand, maxlength(x), maxlength(y))), N, maxlength(x), maxlength(y)))=>
  ! N3 ! N Of(x: label, y: bitstring) := find [unique] j <= N suchthat defined(x[j], y[j], r2[j]) && x = x[j] && y = y[j] then return(r2[j]) else new r2: key; return(r2).

(* SUF-CMA MAC *)

def SUF_CMA_mac_nokgen(mkey, macinput, macres, mac, check, Pmac) {

fun mac(mkey, macinput):macres.
fun check(mkey, macinput, macres): bool.

fun mac2(mkey, macinput):macres.

equation forall m:macinput, k:mkey;
	check(k, m, mac(k, m)).

equation forall m:macinput, k:mkey, m':macres;
	(mac(k,m) = m') = check(k, m, m').

equiv(suf_cma(mac))
  ! N3 new k: mkey; (
    ! N Omac(x: macinput) := return(mac(k, x)) |
    ! N2 Ocheck(m: macinput, ma: macres) := return(check(k, m, ma)))
<=(N3 * Pmac(time + (N3-1)*(N*time(mac,maxlength(x)) + N2*time(check,maxlength(m),maxlength(ma))), N, N2, max(maxlength(x), maxlength(m))))=> [computational]
  ! N3 new k: mkey [unchanged]; (
    ! N Omac(x: macinput) := let ma2:macres = mac2(k, x) in return(ma2) |
    ! N2 Ocheck(m: macinput, ma: macres) := find j <= N suchthat defined(x[j], ma2[j]) && (m = x[j]) && ma = ma2[j] then return(true) else return(false)).

}

proba Pmac.
expand SUF_CMA_mac_nokgen(key, bitstring, bitstring, mac, check, Pmac).

fun enc(key,bitstring): bitstring.
fun dec(key,bitstring): bitstring.
equation forall k:key, m:bitstring;
    dec(k,enc(k,m)) = m.

type certificate [bounded].
const anon_cert:certificate.

(* UF-CMA signatures
   I suppose that signatures are probabilistic, and
   I generate the public key and private key from a common seed
   (instead of generating the public key from the private key).
   Verify returns true when the verification succeeds 
   (instead of returning the message) *)

def UF_CMA_signature_key_first(keyseed, pkey, skey, signinput, signature, seed, skgen, pkgen, sign, check, Psign, Psigncoll) {

const mark: bitstring.

fun sign(skey, signinput, seed): signature.
fun skgen(keyseed):skey.
fun pkgen(keyseed):pkey.
fun check(pkey, signinput, signature): bool.

fun sign2(skey, signinput, seed): signature.
fun skgen2(keyseed):skey.
fun pkgen2(keyseed):pkey.
fun check2(pkey, signinput, signature): bool.

equation forall m:signinput, r:keyseed, r2:seed; 
	check(pkgen(r), m, sign(skgen(r), m, r2)) = true.
equation forall m:signinput, r:keyseed, r2:seed; 
	check2(pkgen2(r), m, sign2(skgen2(r), m, r2)) = true.

equiv(uf_cma(sign))
  ! N3 new r: keyseed; (
    Opk() [2] := return(pkgen(r)) |
    ! N2 new r2: seed; Osign(x: signinput) := return(sign(skgen(r), x, r2)) |
    ! N Ocheck(m1: signinput, si1: signature) := return(check(pkgen(r), m1, si1)))|
  ! N4 Ocheck2(m: signinput, y: pkey, si: signature) [3] := return(check(y, m, si)) [all]
<=(N3 * Psign(time + (N4+N-1) * time(check, max(maxlength(m1), maxlength(m)), max(maxlength(si1), maxlength(si))) + (N3-1)*(time(pkgen) + time(skgen) + N2 * time(sign, maxlength(x)) + N * time(check, maxlength(m1), maxlength(si1))), N2, maxlength(x)))=> [computational]
  ! N3 new r: keyseed [unchanged]; (
    Opk() := return(pkgen2(r)) |
    ! N2 new r2: seed [unchanged]; Osign(x: signinput) := return(sign2(skgen2(r), x, r2)) |
    ! N Ocheck(m1: signinput, si1: signature) := find j <= N2 suchthat defined(x[j]) && m1 = x[j] && check2(pkgen2(r), m1, si1) then return(true) else return(false))|
  ! N4 Ocheck2(m: signinput, y: pkey, si: signature) := find j <= N2, k <= N3 suchthat defined(x[j, k], r[k]) && y = pkgen2(r[k]) && m = x[j,k] && check2(y, m, si) then return(true) else find k <= N3 suchthat defined(r[k]) && (y = pkgen2(r[k])) then return(false) else return(check(y,m,si)).

equiv(uf_cma_corrupt(sign))
  ! N3 new r: keyseed; (
    Opk() [2] [useful_change] := return(pkgen(r)) |
    ! N2 new r2: seed; Osign(x: signinput) [useful_change] := return(sign(skgen(r), x, r2)) |
    ! N Ocheck(m1: signinput, si1: signature) [useful_change] := return(check(pkgen(r), m1, si1)) |
    Ocorrupt() [10] := return(r))|
  ! N4 Ocheck2(m: signinput, y: pkey, si: signature) [3] := return(check(y, m, si)) [all]
<=(N3 * Psign(time + (N4+N-1) * time(check, max(maxlength(m1), maxlength(m)), max(maxlength(si1), maxlength(si))) + (N3-1)*(time(pkgen) + time(skgen) + N2 * time(sign, maxlength(x)) + N * time(check, maxlength(m1), maxlength(si1))), N2, maxlength(x)))=> [manual, computational]
  ! N3 new r: keyseed [unchanged]; (
    Opk() := return(pkgen2(r)) |
    ! N2 new r2: seed [unchanged]; Osign(x: signinput) := return(sign2(skgen2(r), x, r2)) |
    ! N Ocheck(m1: signinput, si1: signature) := if defined(corrupt) then return(check2(pkgen2(r), m1, si1)) else find j <= N2 suchthat defined(x[j]) && m1 = x[j] && check2(pkgen2(r), m1, si1) then return(true) else return(false) |
    Ocorrupt() := let corrupt: bitstring = mark in return(r))|
  ! N4 Ocheck2(m: signinput, y: pkey, si: signature) := find k <= N3 suchthat defined(r[k], corrupt[k]) && (y = pkgen2(r[k])) then return(check2(y, m, si)) else find j <= N2, k <= N3 suchthat defined(x[j, k], r[k]) && y = pkgen2(r[k]) && m = x[j,k] && check2(y, m, si) then return(true) else find k <= N3 suchthat defined(r[k]) && (y = pkgen2(r[k])) then return(false) else return(check(y,m,si)).

collision new r1: keyseed; new r2: keyseed; return(pkgen(r1) = pkgen(r2)) <=(Psigncoll)=> return(false).
collision new r1: keyseed; new r2: keyseed; return(pkgen(r1) = pkgen2(r2)) <=(Psigncoll)=> return(false).
collision new r1: keyseed; new r2: keyseed; return(pkgen2(r1) = pkgen2(r2)) <=(Psigncoll)=> return(false).
collision new r1: keyseed; new r2: keyseed; return(skgen(r1) = skgen(r2)) <=(Psigncoll)=> return(false).
collision new r1: keyseed; new r2: keyseed; return(skgen(r1) = skgen2(r2)) <=(Psigncoll)=> return(false).
collision new r1: keyseed; new r2: keyseed; return(skgen2(r1) = skgen2(r2)) <=(Psigncoll)=> return(false).

}

type keyseed [large, bounded].
type seed [large, bounded].
type skey [bounded].
proba Psign.
proba Psigncoll.
expand UF_CMA_signature_key_first(keyseed, certificate, skey, bitstring, bitstring, seed, 
       		        skgen, pkcert, sign, verify, Psign, Psigncoll).

type nonce [large, fixed].

(* Message formats *)

fun ClientHello(nonce, elt): bitstring [data].
fun ServerHelloIn(nonce, elt, bitstring): bitstring [data].
fun ServerHelloOut(nonce, elt): bitstring [data].
fun ServerCertificateIn(certificate,bitstring): bitstring [data].
fun ServerFinishedIn(certificate,bitstring,bitstring,bitstring): bitstring [data].
fun ServerCertificateVerifyOut(bitstring): bitstring [data].
fun ServerFinishedOut(bitstring): bitstring [data].

fun ClientCertificateVerifyOut(bitstring): bitstring [data].
fun ClientFinishedOut(bitstring): bitstring  [data].
fun ClientFinishedIn(bitstring): bitstring  [data].
fun ClientFinishedAuthIn(certificate,bitstring,bitstring,bitstring,bitstring): bitstring  [data].

(* Logs *)

fun ServerHelloLogInfo(nonce,elt,nonce,elt,bitstring): bitstring [data].
fun ServerCertificateLogInfo(bitstring,certificate,bitstring): bitstring [data].
fun ServerCertificateVerifyLogInfo(bitstring,bitstring): bitstring [data].
fun ServerFinishedLogInfo(bitstring,bitstring): bitstring [data].

(*
type clientCertificateLogInfo.
fun ClientCertificateLogInfo(serverFinishedLogInfo,certificate): clientCertificateLogInfo [compos].
fun getClientCertificateLogInfo(bitstring): clientCertificateLogInfo.

type clientCertificateVerifyLogInfo.
fun ClientCertificateVerifyLogInfo(clientCertificateLogInfo,bitstring): clientCertificateVerifyLogInfo [compos].
fun getClientCertificateVerifyLogInfo(bitstring): clientCertificateVerifyLogInfo.
*)
table serverLongTermKeys(certificate,skey).
table clientLongTermKeys(certificate,skey).
table clientCache(elt,certificate).

table oneRTTClientDataKey(nonce,nonce,certificate,certificate,key).
table oneRTTServerDataKey(nonce,nonce,certificate,certificate,key).
table oneRTTServerFalseStartKey(nonce,nonce,certificate,key,key,bitstring).
table zeroRTTClientKey(nonce,certificate,certificate,key,key).
table zeroRTTServerKey(nonce,certificate,certificate,key,key).


event SendClient(nonce,nonce,certificate,certificate,bitstring).
event RecvServer(nonce,nonce,certificate,certificate,bitstring).
event SendServer(nonce,nonce,certificate,certificate,bitstring).
event RecvClient(nonce,nonce,certificate,certificate,bitstring).

event SendClient0(nonce,certificate,certificate,key,bitstring).
event RecvServer0(nonce,certificate,certificate,key,bitstring).
event SendServer0(nonce,nonce,certificate,bitstring).
event RecvClient0(nonce,nonce,certificate,bitstring).


(* Secrecy of the key *)

query secret dk_secret.

(* Authentication of the server to the client *)

event ClientTerm(nonce,elt,nonce,elt,key,key,key).
event ServerAccept(nonce,elt,nonce,elt,key,key,key).

query dk: key, cfk: key, hk: key, gy: elt, sr: nonce, gx: elt, cr: nonce;
  event(ClientTerm(cr, gx, sr, gy, hk, cfk, dk)) ==> event(ServerAccept(cr, gx, sr, gy, hk, cfk, dk)) public_vars dk_secret.

(*
const secret_msg0:bitstring.
const secret_msg1:bitstring.
const secret_msg2:bitstring.
const secret_msg3:bitstring.
*)

letfun send_client_hello() = 
       new cr:nonce;
       new x:key;
       let gx = exp(G,x) in
       (cr,x,gx).


letfun recv_server_hello(hk: hashkey, sil:bitstring, x:key) = 
  let ServerHelloLogInfo(cr,gx,sr,gy,l) = sil in
  (let s = exp(gy,x) in
   let xES = HKDF_extract_zero(hk,s) in
   let hk =  HKDF_expand(xES,hk_label,sil) in    
   (xES,hk,true))
  else (key2extracted(zero_key),zero_key,false).
   

letfun recv_server_finished(si:bitstring, xES:extracted, xSS:extracted,
       		            cert:certificate, s:bitstring, m:bitstring, 
			    log1:bitstring) =
   let scl = ServerCertificateLogInfo(si,cert,log1) in
   let scvl = ServerCertificateVerifyLogInfo(scl,s) in
   let sfl = ServerFinishedLogInfo(scvl,m) in
   let mES = HKDF_expand(xES,es_label,scvl) in
   let mSS = HKDF_expand(xSS,ss_label,scvl) in
   let ms = HKDF_extract(mSS,mES) in
   let cfk = HKDF_expand(ms,cfin_label,empty_bytes) in
   let sfk = HKDF_expand(ms,sfin_label,empty_bytes) in
   let ts0 = HKDF_expand(ms,ts_label,scvl) in
   let dk = HKDF_expand(key2extracted(ts0),dk_label,sfl) in
   if verify(cert,scl,s) &&
      mac(sfk,scvl) = m then
       (dk,cfk,true)
   else (dk,cfk,false).
			   
letfun send_client_finished_no_auth(sfl:bitstring, cfk:key) = 
       mac(cfk,sfl).
(*
letfun send_client_certificate_verify(ccl:clientCertificateLogInfo, sk:skey, log:bitstring) = 
   new s: seed;
   let sg = sign(sk,log,s) in
   if getClientCertificateLogInfo(log) = ccl then
        (sg,true)
   else (sg,false).

letfun send_client_finished_client_auth(ccvl:clientCertificateVerifyLogInfo, cfk:key, log3: bitstring) = 
   let cfin = mac(cfk,log3) in			    
   if getClientCertificateVerifyLogInfo(log3) = ccvl then
        (cfin,true)
   else (cfin,false).
*)

letfun recv_client_hello(hk: hashkey, cr:nonce, gx:elt) = 
   new sr:nonce;
   new y: key;
   let gy = exp(G,y) in
   let s = exp(gx,y) in
   let xES = HKDF_extract_zero(hk,s) in
   (sr,gy,xES).

letfun onertt_hs_keys(sil:bitstring,xES:extracted) = 
   HKDF_expand(xES,hk_label,sil).

letfun send_server_certificate_verify(scl:bitstring,sk:skey) = 
   new s: seed;
   sign(sk,scl,s).

letfun send_server_finished(scvl:bitstring,xES:extracted,xSS:extracted) = 
   let mES = HKDF_expand(xES,es_label,scvl) in
   let mSS = HKDF_expand(xSS,ss_label,scvl) in
   let ms = HKDF_extract(mSS,mES) in
   let cfk = HKDF_expand(ms,cfin_label,empty_bytes) in
   let sfk = HKDF_expand(ms,sfin_label,empty_bytes) in
   let ts0 = HKDF_expand(ms,ts_label,scvl) in
   let m = mac(sfk,scvl) in
   (cfk,ts0,m).

letfun onertt_data_keys(sfl:bitstring,ts0:key) = 
   HKDF_expand(key2extracted(ts0),dk_label,sfl).

letfun check_client_finished_no_auth(sfl:bitstring,cfin:bitstring,cfk:key) = 
   if mac(cfk,sfl) = cfin then
      true
   else false.

(*
letfun check_client_finished_client_auth(sfl:serverFinishedLogInfo, 
				    certC:certificate,
				    cv:bitstring,cfin:bitstring,
			    	    cfk:key,log1:bitstring,log2:bitstring) = 
   let ccl = ClientCertificateLogInfo(sfl,certC) in
   let ccvl = ClientCertificateVerifyLogInfo(ccl,cv) in
   if (getClientCertificateLogInfo(log1) = ccl &&
       verify(certC,log1,cv) &&
       getClientCertificateVerifyLogInfo(log2) = ccvl &&
       mac(cfk,log2) = cfin) then
      true
   else false.
*)

param N1,N5,N6,
      N7,N8,N9,N10,N11,N12,
      N13,N14,N15,N16.






(*
let Server0() = 
 !(in(io,(ClientHello(cr,gx)));
   new sr:nonce;
   let (y:key,gy:key) = dh_keygen() in
   get serverLongTermKeys(cert,sk,gss,ss) in
   let ss = expH_P256(x,gs) in
   let xSS = HKDF_extract(zero_key,ss) in
   let dk0 = HKDF_expand(xSS,dk0_label,log) in
   insert zeroRTTServerKey(cr,anon_cert,certS,gs,dk0);
   let shlog = (ClientHello(cr,gy),ServerHello(sr,gy)) in
   let s = DH_P256(y,gx) in
   let xES = HKDF_extract(zero_key,s) in
   let hk =  HKDF_expand(xES,hk_label,shlog) in    
   insert oneRTTServerHSKey(cr,sr,xES,xSS,hk,certS,shlog);
   out(io,(ServerHello(sr,gy)))
  )
 .
 *)

(* Corruption for forward secrecy *)



   


process 
  in(io20, ());
new hk_1: hashkey;
new kseed: keyseed;
let skS: skey = skgen(kseed) in
let pkS: certificate = pkcert(kseed) in
insert serverLongTermKeys(pkS, skS);
out(io21, pkS);
((
  ! i_1 <= N1
  in(io1[i_1], ());
  let (cr_2: nonce, x_6: key, gx_2: elt) = (new cr_1: nonce; new x_5: key; let gx_1: elt = exp(G, x_5) in (cr_1, x_5, gx_1)) in
  out(io2[i_1], ClientHello(cr_2, gx_2));
  in(io3[i_1], ServerHelloIn(sr: nonce, gy: elt, l: bitstring));
  let sil: bitstring = ServerHelloLogInfo(cr_2, gx_2, sr, gy, l) in
  let (xES_2: extracted, hk_4: key, =true) = (let hk_2: hashkey = hk_1 in (let sil_1: bitstring = sil in (let x_7: key = x_6 in let ServerHelloLogInfo(cr_3: nonce, gx_3: elt, sr_1: nonce, gy_1: elt, l_1: bitstring) = sil_1 in (let s: elt = exp(gy_1, x_7) in (let xES_1: extracted = HKDF_extract_zero(hk_2, s) in (let hk_3: key = HKDF_expand(xES_1, hk_label, sil_1) in (xES_1, hk_3, true)))) else (key2extracted(zero_key), zero_key, false)))) in
  out(io4[i_1], hk_4);
  in(io5[i_1], ServerFinishedIn(cert: certificate, s_1: bitstring, m_3: bitstring, log1: bitstring));
  let (dk_2: key, cfk_2: key, =true) = (let si_1: bitstring = sil in (let xES_3: extracted = xES_2 in (let xSS: extracted = xES_2 in (let cert_1: certificate = cert in (let s_2: bitstring = s_1 in (let m_4: bitstring = m_3 in (let log1_1: bitstring = log1 in (let scl: bitstring = ServerCertificateLogInfo(si_1, cert_1, log1_1) in (let scvl: bitstring = ServerCertificateVerifyLogInfo(scl, s_2) in (let sfl: bitstring = ServerFinishedLogInfo(scvl, m_4) in (let mES: key = HKDF_expand(xES_3, es_label, scvl) in (let mSS: key = HKDF_expand(xSS, ss_label, scvl) in (let ms: extracted = HKDF_extract(mSS, mES) in (let cfk_1: key = HKDF_expand(ms, cfin_label, empty_bytes) in (let sfk: key = HKDF_expand(ms, sfin_label, empty_bytes) in (let ts0_1: key = HKDF_expand(ms, ts_label, scvl) in (let dk_1: key = HKDF_expand(key2extracted(ts0_1), dk_label, sfl) in if verify(cert_1, scl, s_2) && (mac(sfk, scvl) = m_4) then (dk_1, cfk_1, true) else (dk_1, cfk_1, false)))))))))))))))))) in
  let scl_1: bitstring = ServerCertificateLogInfo(sil, cert, log1) in
  let scvl_1: bitstring = ServerCertificateVerifyLogInfo(scl_1, s_1) in
  let sfl_1: bitstring = ServerFinishedLogInfo(scvl_1, m_3) in
  let cfin: bitstring = (let sfl_2: bitstring = sfl_1 in (let cfk_3: key = cfk_2 in mac(cfk_3, sfl_2))) in
  insert oneRTTClientDataKey(cr_2, sr, anon_cert, cert, dk_2);
  out(io6[i_1], ClientFinishedOut(cfin));
  in(io7[i_1], ());
  if defined(corrupted) then
    out(io8[i_1], dk_2)
  else
    if cert = pkS then
    (
      event ClientTerm(cr_2, gx_2, sr, gy, hk_4, cfk_2, dk_2);
      let dk_secret: key = dk_2
    )
    else
      out(io8[i_1], dk_2)
) | (
  ! i_2 <= N6
  in(io9[i_2], ClientHello(cr_4: nonce, gx_4: elt));
  let (sr_3: nonce, gy_3: elt, xES_5: extracted) = (let hk_5: hashkey = hk_1 in (let cr_5: nonce = cr_4 in (let gx_5: elt = gx_4 in (new sr_2: nonce; new y_2: key; let gy_2: elt = exp(G, y_2) in (let s_3: elt = exp(gx_5, y_2) in (let xES_4: extracted = HKDF_extract_zero(hk_5, s_3) in (sr_2, gy_2, xES_4))))))) in
  out(io10[i_2], ServerHelloOut(sr_3, gy_3));
  in(io11[i_2], log_rest: bitstring);
  let sil_2: bitstring = ServerHelloLogInfo(cr_4, gx_4, sr_3, gy_3, log_rest) in
  let hk_6: key = (let sil_3: bitstring = sil_2 in (let xES_6: extracted = xES_5 in HKDF_expand(xES_6, hk_label, sil_3))) in
  out(io12[i_2], hk_6);
  in(io13[i_2], (cert_2: certificate, log1_2: bitstring));
  get serverLongTermKeys(=cert_2, sk: skey) in
  let scl_2: bitstring = ServerCertificateLogInfo(sil_2, cert_2, log1_2) in
  let sg: bitstring = (let scl_3: bitstring = scl_2 in (let sk_1: skey = sk in new s_4: seed; sign(sk_1, scl_3, s_4))) in
  let scvl_2: bitstring = ServerCertificateVerifyLogInfo(scl_2, sg) in
  let (cfk_5: key, ts0: key, m_6: bitstring) = (let scvl_3: bitstring = scvl_2 in (let xES_7: extracted = xES_5 in (let xSS_1: extracted = xES_5 in (let mES_1: key = HKDF_expand(xES_7, es_label, scvl_3) in (let mSS_1: key = HKDF_expand(xSS_1, ss_label, scvl_3) in (let ms_1: extracted = HKDF_extract(mSS_1, mES_1) in (let cfk_4: key = HKDF_expand(ms_1, cfin_label, empty_bytes) in (let sfk_1: key = HKDF_expand(ms_1, sfin_label, empty_bytes) in (let ts0_2: key = HKDF_expand(ms_1, ts_label, scvl_3) in (let m_5: bitstring = mac(sfk_1, scvl_3) in (cfk_4, ts0_2, m_5))))))))))) in
  let sfl_3: bitstring = ServerFinishedLogInfo(scvl_2, m_6) in
  let dk_3: key = (let sfl_4: bitstring = sfl_3 in (let ts0_3: key = ts0 in HKDF_expand(key2extracted(ts0_3), dk_label, sfl_4))) in
  event ServerAccept(cr_4, gx_4, sr_3, gy_3, hk_6, cfk_5, dk_3);
  insert oneRTTServerFalseStartKey(cr_4, sr_3, cert_2, dk_3, cfk_5, empty_bytes);
  out(io18[i_2], (ServerCertificateVerifyOut(sg), ServerFinishedOut(m_6)));
  in(io19[i_2], ClientFinishedIn(cfin_1: bitstring));
  if (let sfl_5: bitstring = sfl_3 in (let cfin_2: bitstring = cfin_1 in (let cfk_6: key = cfk_5 in if mac(cfk_6, sfl_5) = cfin_2 then true else false))) then
  insert oneRTTServerDataKey(cr_4, sr_3, anon_cert, cert_2, dk_3)
) | (
  ! i_3 <= N13
  in(io22[i_3], (pkx: certificate, skx: skey));
  if pkx <> pkS then
  insert serverLongTermKeys(pkx, skx)
) | (
  in(cCorrupt, ());
  let corrupted: bool = true in
  out(cCorrupt, skS)
) | (
  ! i_4 <= qH
  in(c1[i_4], x_8: elt);
  out(c2[i_4], HKDF_extract_zero(hk_1, x_8))
))



(* EXPECTED
All queries proved.
18.400s (user 18.148s + system 0.252s), max rss 688128K
END *)
