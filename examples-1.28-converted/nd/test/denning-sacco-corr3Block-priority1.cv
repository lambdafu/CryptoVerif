(* Denning-Sacco key distribution protocol. (corrected version) *)

(* The proof of the correct properties fails, because the priority levels
give the wrong order of application of equivalences (signature before
encryption) *)

def UF_CMA_signature_prio(keyseed, pkey, skey, signinput, signature, seed, skgen, pkgen, sign, check, Psign, Psigncoll) {

param N, N2, N3, N4.

fun sign(signinput, skey, seed): signature.
fun skgen(keyseed):skey.
fun pkgen(keyseed):pkey.
fun check(signinput, pkey, signature): bool.

fun sign2(signinput, skey, seed): signature.
fun skgen2(keyseed):skey.
fun pkgen2(keyseed):pkey.
fun check2(signinput, pkey, signature): bool.

equation forall m:signinput, r:keyseed, r2:seed; 
	check(m, pkgen(r), sign(m, skgen(r), r2)) = true.
equation forall m:signinput, r:keyseed, r2:seed; 
	check2(m, pkgen2(r), sign2(m, skgen2(r), r2)) = true.

equiv
  ! N3 new r: keyseed; (
    gen_Oracle_1() [2] := return(pkgen(r)) |
    ! N2 new r2: seed; gen_Oracle_2(x: signinput) := return(sign(x, skgen(r), r2)) |
    ! N gen_Oracle_3(m1: signinput, si1: signature) := return(check(m1, pkgen(r), si1)))|
  ! N4 gen_Oracle_4(m: signinput, y: pkey, si: signature) [3] := return(check(m, y, si)) [all]
<=(N3 * Psign(time, N2, maxlength(x)))=> [1]
  ! N3 new r: keyseed; (
    gen_Oracle_1() := return(pkgen2(r)) |
    ! N2 new r2: seed; gen_Oracle_2(x: signinput) := return(sign2(x, skgen2(r), r2)) |
    ! N gen_Oracle_3(m1: signinput, si1: signature) := find j <= N2 suchthat defined(x[j]) && m1 = x[j] && check2(m1, pkgen2(r), si1) then return(true) else return(false))|
  ! N4 gen_Oracle_4(m: signinput, y: pkey, si: signature) := find j <= N2, k <= N3 suchthat defined(x[j, k], r[k]) && y = pkgen2(r[k]) && m = x[j,k] && check2(m, y, si) then return(true) else find k <= N3 suchthat defined(r[k]) && (y = pkgen2(r[k])) then return(false) else return(check(m,y,si)).

collision new r1: keyseed; new r2: keyseed; return(pkgen(r1) = pkgen(r2)) <=(Psigncoll)=> return(r1 = r2).
collision new r1: keyseed; new r2: keyseed; return(pkgen2(r1) = pkgen2(r2)) <=(Psigncoll)=> return(r1 = r2).
collision new r1: keyseed; new r2: keyseed; return(skgen(r1) = skgen(r2)) <=(Psigncoll)=> return(r1 = r2).
collision new r1: keyseed; new r2: keyseed; return(skgen2(r1) = skgen2(r2)) <=(Psigncoll)=> return(r1 = r2).

}

def IND_CCA2_public_key_enc_prio(keyseed, pkey, skey, cleartext, ciphertext, seed, skgen, pkgen, enc, dec, injbot, Z, Penc, Penccoll) {

param N, N2, N3, N4.

fun enc(cleartext, pkey, seed): ciphertext.
fun skgen(keyseed):skey.
fun pkgen(keyseed):pkey.
fun dec(ciphertext, skey): bitstringbot.

fun enc2(cleartext, pkey, seed): ciphertext.
fun skgen2(keyseed):skey.
fun pkgen2(keyseed):pkey.
fun dec2(ciphertext, skey): bitstringbot.

fun injbot(cleartext):bitstringbot [data].

const Z:cleartext.

equation forall m:cleartext, r:keyseed, r2:seed; 
	dec(enc(m, pkgen(r), r2), skgen(r)) = injbot(m).
equation forall m:cleartext, r:keyseed, r2:seed; 
	dec2(enc2(m, pkgen2(r), r2), skgen2(r)) = injbot(m).

equiv
  ! N3 new r: keyseed; (
    gen_Oracle_5() [2] := return(pkgen(r)) |
    ! N2 gen_Oracle_6(m: ciphertext) := return(dec(m, skgen(r))) |
    ! N new r1: seed; gen_Oracle_7(x1: cleartext) := return(enc(x1, pkgen(r),r1)))|
  ! N4 new r2: seed; gen_Oracle_8(x: cleartext, y: pkey) [3] := return(enc(x,y,r2)) [all]
<=(N3 * (N4+N) * Penc(time, N2))=> [2]
  ! N3 new r: keyseed; (
    gen_Oracle_5() := return(pkgen2(r)) |
    ! N2 gen_Oracle_6(m: ciphertext) := find j <= N suchthat defined(m1[j], x1[j]) && (m = m1[j]) then return(injbot(x1[j])) else find j <= N4 suchthat defined(m2[j], y[j], x[j]) && y[j] = pkgen2(r) && m = m2[j] then return(injbot(x[j])) else return(dec2(m, skgen2(r))) |
    ! N new r1: seed; gen_Oracle_7(x1: cleartext) := let m1:ciphertext = enc2(Z, pkgen2(r), r1) in return(m1))|
  ! N4 gen_Oracle_8(x: cleartext, y: pkey) := find k <= N3 suchthat defined(r[k]) && (y = pkgen2(r[k])) then (new r2: seed; let m2:ciphertext = enc2(Z, y, r2) in return(m2)) else new r3: seed; return(enc(x,y,r3)).

collision new r1: keyseed; new r2: keyseed; return(pkgen(r1) = pkgen(r2)) <=(Penccoll)=> return(r1 = r2).
collision new r1: keyseed; new r2: keyseed; return(pkgen2(r1) = pkgen2(r2)) <=(Penccoll)=> return(r1 = r2).
collision new r1: keyseed; new r2: keyseed; return(skgen(r1) = skgen(r2)) <=(Penccoll)=> return(r1 = r2).
collision new r1: keyseed; new r2: keyseed; return(skgen2(r1) = skgen2(r2)) <=(Penccoll)=> return(r1 = r2).

}


(* In order to determine the proof, use interactive mode: 
   set interactiveMode = true.
The proof is as follows: 

proof {
  crypto enc rkB;
  crypto sign rkS;
  crypto sign rkA;
  success;
  auto
}

*)

(*

For the proof to succeed, it is important that "crypto enc rkB" is 
applied before "crypto sign rkA". This is because, when
A talks to B and we apply "crypto enc rkB", we replace the plaintext
with Z, and reuse the plaintext directly at the decryption site in
B, then by simplify check(..., pkA, sign(..., skA, r)) cancels out, and 
the computation of the signature under skA in this case disappears.
There is then one case less to consider when applying "crypto sign rkA".

*)

param N.
param N2.
param N3.
param N4.

type host [bounded].
type pkey [bounded].
type skey [bounded].
type keyseed [large,fixed].
type seed [fixed].
type spkey [bounded].
type sskey [bounded].
type skeyseed [large,fixed].
type sseed [fixed].
type signature [bounded].
type blocksize [fixed].
type blocksizebot [bounded].
type sblocksize [bounded].
type shkey [fixed]. (* distributed key *)

fun concat1(shkey, host, host, signature):blocksize [data].
fun concat2(shkey, host, host):sblocksize [data].
fun concat3(host, pkey):sblocksize [data].
fun concat4(host, spkey):sblocksize [data].

equation forall y:host,z:pkey,y2:shkey,z2:host,t2:host;
        concat3(y,z) <> concat2(y2,z2,t2).
equation forall y:host,z:pkey,y2:host,z2:spkey;	
	concat3(y,z) <> concat4(y2,z2).
equation forall y:host,z:spkey,y2:shkey,z2:host,t2:host;
        concat4(y,z) <> concat2(y2,z2,t2).

(* Public-key encryption (CCA2) *)

proba Penc.
proba Penccoll.

expand IND_CCA2_public_key_enc_prio(keyseed, pkey, skey, blocksize, bitstring, seed, skgen, pkgen, enc, dec, injbot, Z, Penc, Penccoll).

(* Signatures *)

proba Psign.
proba Psigncoll.

expand UF_CMA_signature_prio(skeyseed, spkey, sskey, sblocksize, signature, sseed, sskgen, spkgen, sign, check, Psign, Psigncoll).

(* Queries *)

query secret keyA [onesession].
query secret keyB [onesession].
query secret keyA.
query secret keyB.

channel c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, 
	start, finish.

const A : host.
const B : host.

event beginA(host, host, shkey).
event endB(host, host, shkey).

query k: shkey, y: host, x: host;
  event(endB(x, y, k)) ==> event(beginA(x, y, k)) public_vars keyA, keyB.
query k: shkey, y: host, x: host;
  inj-event(endB(x, y, k)) ==> inj-event(beginA(x, y, k)) public_vars keyA, keyB.













process 
	in(start, ());
new rkA: skeyseed;
let pkA: spkey = spkgen(rkA) in
let skA: sskey = sskgen(rkA) in
new rkB: keyseed;
let pkB: pkey = pkgen(rkB) in
let skB: skey = skgen(rkB) in
new rkS: skeyseed;
let pkS: spkey = spkgen(rkS) in
let skS: sskey = sskgen(rkS) in
out(c7, (pkA, pkB, pkS));
((
  ! i_1 <= N
  in(c1[i_1], (=A, =pkA, cert1_1: signature, hostX: host, pkX: pkey, cert2_1: signature));
  if check(concat4(A, pkA), pkS, cert1_1) then
  if check(concat3(hostX, pkX), pkS, cert2_1) then
  new k_3: shkey;
  new r1_2: sseed;
  new r2_2: seed;
  event beginA(A, hostX, k_3);
  out(c2[i_1], (A, pkA, cert1_1, hostX, pkX, cert2_1, enc(concat1(k_3, A, hostX, sign(concat2(k_3, A, hostX), skA, r1_2)), pkX, r2_2)));
  in(finish[i_1], ());
  if hostX = B then
  (
    let keyA: shkey = k_3
  )
  else
    out(c8[i_1], k_3)
) | (
  ! i_2 <= N
  in(c3[i_2], (hostY: host, pkY: spkey, cert1_2: signature, =B, =pkB, cert2_2: signature, m_2: bitstring));
  if check(concat4(hostY, pkY), pkS, cert1_2) then
  if check(concat3(B, pkB), pkS, cert2_2) then
  let injbot(concat1(k_4: shkey, =hostY, =B, s: signature)) = dec(m_2, skB) in
  if check(concat2(k_4, hostY, B), pkY, s) then
  if hostY = A then
  (
    event endB(hostY, B, k_4);
    let keyB: shkey = k_4
  )
  else
    out(c9[i_2], k_4)
) | (
  ! i_3 <= N
  in(c5[i_3], (h1_1: host, h2_1: host));
  find j2_3 = j2_1 <= N2 suchthat defined(Khost[j2_1], Rkey[j2_1]) && (Khost[j2_1] = h2_1) then
  new r3_2: sseed;
  out(c6[i_3], (h2_1, Rkey[j2_3], sign(concat3(h2_1, Rkey[j2_3]), skS, r3_2)))
) | (
  ! i_4 <= N
  in(c11[i_4], (h1_2: host, h2_2: host));
  find j2_4 = j2_2 <= N2 suchthat defined(SKhost[j2_2], SRkey[j2_2]) && (SKhost[j2_2] = h2_2) then
  new r3_3: sseed;
  out(c12[i_4], (h2_2, SRkey[j2_4], sign(concat4(h2_2, SRkey[j2_4]), skS, r3_3)))
) | (
  ! i_5 <= N2
  in(c4[i_5], (Khost: host, Kkey: pkey));
  let Rkey: pkey = (if Khost = B then pkB else Kkey)
) | (
  ! i_6 <= N2
  in(c10[i_6], (SKhost: host, SKkey: spkey));
  let SRkey: spkey = (if SKhost = A then pkA else SKkey)
))




(* EXPECTED
RESULT Could not prove inj-event(endB(x, y, k)) ==> inj-event(beginA(x, y, k)) with public variables keyA, keyB; secrecy of keyB; secrecy of keyA; one-session secrecy of keyB; one-session secrecy of keyA.
0.320s (user 0.308s + system 0.012s), max rss 58304K
END *)
