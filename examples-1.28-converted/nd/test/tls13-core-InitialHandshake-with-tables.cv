(* SUF-CMA MAC *)

def SUF_CMA_mac_nokgen(mkey, macinput, macres, mac, check, Pmac) {

fun mac(mkey, macinput):macres.
fun check(mkey, macinput, macres): bool.

fun mac2(mkey, macinput):macres.

equation forall m:macinput, k:mkey;
	check(k, m, mac(k, m)).

equation forall m:macinput, k:mkey, m':macres;
	(mac(k,m) = m') = check(k, m, m').

param N, N2, N3.

equiv(suf_cma(mac))
  ! N3 new k: mkey; (
    ! N Omac(x: macinput) := return(mac(k, x)) |
    ! N2 Ocheck(m: macinput, ma: macres) := return(check(k, m, ma)))
<=(N3 * Pmac(time + (N3-1)*(N*time(mac,maxlength(x)) + N2*time(check,maxlength(m),maxlength(ma))), N, N2, max(maxlength(x), maxlength(m))))=> [computational]
  ! N3 new k: mkey [unchanged]; (
    ! N Omac(x: macinput) := let ma2:macres = mac2(k, x) in return(ma2) |
    ! N2 Ocheck(m: macinput, ma: macres) := find j <= N suchthat defined(x[j], ma2[j]) && (m = x[j]) && ma = ma2[j] then return(true) else return(false)).

}

(* UF-CMA signatures *)

def UF_CMA_signature_key_first(keyseed, pkey, skey, signinput, signature, seed, skgen, pkgen, sign, check, Psign, Psigncoll) {

const mark: bitstring.

fun sign(skey, signinput, seed): signature.
fun skgen(keyseed):skey.
fun pkgen(keyseed):pkey.
fun check(pkey, signinput, signature): bool.

fun sign2(skey, signinput, seed): signature.
fun skgen2(keyseed):skey.
fun pkgen2(keyseed):pkey.
fun check2(pkey, signinput, signature): bool.

equation forall m:signinput, r:keyseed, r2:seed; 
	check(pkgen(r), m, sign(skgen(r), m, r2)) = true.
equation forall m:signinput, r:keyseed, r2:seed; 
	check2(pkgen2(r), m, sign2(skgen2(r), m, r2)) = true.

param N, N2, N3, N4.

equiv(uf_cma(sign))
  ! N3 new r: keyseed; (
    Opk() [2] := return(pkgen(r)) |
    ! N2 new r2: seed; Osign(x: signinput) := return(sign(skgen(r), x, r2)) |
    ! N Ocheck(m1: signinput, si1: signature) := return(check(pkgen(r), m1, si1)))|
  ! N4 Ocheck2(m: signinput, y: pkey, si: signature) [3] := return(check(y, m, si)) [all]
<=(N3 * Psign(time + (N4+N-1) * time(check, max(maxlength(m1), maxlength(m)), max(maxlength(si1), maxlength(si))) + (N3-1)*(time(pkgen) + time(skgen) + N2 * time(sign, maxlength(x)) + N * time(check, maxlength(m1), maxlength(si1))), N2, maxlength(x)))=> [computational]
  ! N3 new r: keyseed [unchanged]; (
    Opk() := return(pkgen2(r)) |
    ! N2 new r2: seed [unchanged]; Osign(x: signinput) := return(sign2(skgen2(r), x, r2)) |
    ! N Ocheck(m1: signinput, si1: signature) := find j <= N2 suchthat defined(x[j]) && m1 = x[j] && check2(pkgen2(r), m1, si1) then return(true) else return(false))|
  ! N4 Ocheck2(m: signinput, y: pkey, si: signature) := find j <= N2, k <= N3 suchthat defined(x[j, k], r[k]) && y = pkgen2(r[k]) && m = x[j,k] && check2(y, m, si) then return(true) else find k <= N3 suchthat defined(r[k]) && (y = pkgen2(r[k])) then return(false) else return(check(y,m,si)).

equiv(uf_cma_corrupt(sign))
  ! N3 new r: keyseed; (
    Opk() [2] [useful_change] := return(pkgen(r)) |
    ! N2 new r2: seed; Osign(x: signinput) [useful_change] := return(sign(skgen(r), x, r2)) |
    ! N Ocheck(m1: signinput, si1: signature) [useful_change] := return(check(pkgen(r), m1, si1)) |
    Ocorrupt() [10] := return(r))|
  ! N4 Ocheck2(m: signinput, y: pkey, si: signature) [3] := return(check(y, m, si)) [all]
<=(N3 * Psign(time + (N4+N-1) * time(check, max(maxlength(m1), maxlength(m)), max(maxlength(si1), maxlength(si))) + (N3-1)*(time(pkgen) + time(skgen) + N2 * time(sign, maxlength(x)) + N * time(check, maxlength(m1), maxlength(si1))), N2, maxlength(x)))=> [manual, computational]
  ! N3 new r: keyseed [unchanged]; (
    Opk() := return(pkgen2(r)) |
    ! N2 new r2: seed [unchanged]; Osign(x: signinput) := return(sign2(skgen2(r), x, r2)) |
    ! N Ocheck(m1: signinput, si1: signature) := if defined(corrupt) then return(check2(pkgen2(r), m1, si1)) else find j <= N2 suchthat defined(x[j]) && m1 = x[j] && check2(pkgen2(r), m1, si1) then return(true) else return(false) |
    Ocorrupt() := let corrupt: bitstring = mark in return(r))|
  ! N4 Ocheck2(m: signinput, y: pkey, si: signature) := find k <= N3 suchthat defined(r[k], corrupt[k]) && (y = pkgen2(r[k])) then return(check2(y, m, si)) else find j <= N2, k <= N3 suchthat defined(x[j, k], r[k]) && y = pkgen2(r[k]) && m = x[j,k] && check2(y, m, si) then return(true) else find k <= N3 suchthat defined(r[k]) && (y = pkgen2(r[k])) then return(false) else return(check(y,m,si)).

collision new r1: keyseed; new r2: keyseed; return(pkgen(r1) = pkgen(r2)) <=(Psigncoll)=> return(false).
collision new r1: keyseed; new r2: keyseed; return(pkgen(r1) = pkgen2(r2)) <=(Psigncoll)=> return(false).
collision new r1: keyseed; new r2: keyseed; return(pkgen2(r1) = pkgen2(r2)) <=(Psigncoll)=> return(false).
collision new r1: keyseed; new r2: keyseed; return(skgen(r1) = skgen(r2)) <=(Psigncoll)=> return(false).
collision new r1: keyseed; new r2: keyseed; return(skgen(r1) = skgen2(r2)) <=(Psigncoll)=> return(false).
collision new r1: keyseed; new r2: keyseed; return(skgen2(r1) = skgen2(r2)) <=(Psigncoll)=> return(false).

}
(* This version uses insert/get inside terms, which is currently
not allowed by CryptoVerif. It may be a useful extension. *)

(* This file proves properties of the initial handshake (without
pre-shared key), including 0.5-RTT data.
It proves secrecy, authentication, and unique channel identifier
properties.

Regarding secrecy, the secrecy of sats is proved on the server side
when the server sends ServerFinished, before it receives
ClientFinished. This property is useful for proving security of 0.5RTT
messages, by composition with the record protocol. The authentication
property ClientTerm ==> ServerAccept shows that the client uses the
same keys, so that implies secrecy on the client side as well.

The secrecy of cats, ems and resumption_secret (denoted psk' in the
paper) is proved on the client side. The authentication property
ServerTerm ==> ClientAccept shows that the server uses the same keys,
so that implies secrecy on the server side as well, when the server
has received ClientFinished. *)

channel io1, io2, io3, io4, io5, io6, io7, io8, io9, io10,
	io11, io12, io13, io14, io15, io16, io17, io18, io19, io20,
	io21, io22, io23, io24, io25, io26, io27, io28, io29, io30,
	io31, io32, io33, io34, io35, io36, io37, io38, io39, io40,
	io25', io26', io27', io28', io31', io32',
	cCorruptS1, cCorruptC1, cCorruptS2, cCorruptC2.

set casesInCorresp = false.
    (* Distinguishing cases in the proof of correspondences
       is too slow with the "unique channel id" property,
       and not necessary *)

proof {
      crypto uf_cma_corrupt(sign) kseedS;
      out_game "g1.out" occ;
      (* After the first input in the server (which defines sgx), and new sr_???: nonce.
         gx is the value of gx in the client.  *)
      insert 1688 "find j' <= N1 suchthat defined(gx[j']) && sgx = gx[j'] then";
      (* gy_446 is the value of gy in the server *)
      SArename gy_1;
      out_game "g2.out" occ;
      (* In the client, after "let sil_??? = ..." and before "let s_??? = exp(cgy, x_???)"
      	 gy_646 is the first variable obtained by renaming gy_446 in the server *)
      insert 56 "find j'' <= N6 suchthat defined(gy_2[j''], sgx[j'']) && gx = sgx[j''] && cgy = gy_2[j''] then";
      crypto rom(HKDF_extract_ES);
      remove_assign binder s;
      remove_assign binder s_3;
      simplify;
      crypto gdh(exp) "variables: x_5-> a, y_7 -> b .";
      crypto prf2 *;
      crypto client_server_hts *;
      crypto prf_fin_key_iv *;
      crypto prf3 *;
      crypto client_server_ats_exporter_ms *;
      crypto suf_cma(mac) *; 
      simplify;
      success;
      crypto uf_cma_corrupt(sign) kseedC;
      success
}



type key [large, fixed].
const zero_key: key.
type extracted [large, fixed].
const zero_extracted: extracted. 

type elt [large, bounded].
fun element2key(elt): key [data].
fun elt2bitstring(elt): bitstring [data].

(* Gap Diffie-Hellman assumption.
   The considered groups are prime order. *)

proba pGDH.
expand GDH_prime_order(elt, key, G, exp, mult, pGDH).

letfun dh_keygen() =
   new x:key;
   (x,exp(G,x)).

param N, N', N2, N3, N4.

(* HKDF_extract_zero_salt, that is, HKDF_extract with salt argument 
   0, is a random oracle.
   This oracle is not used in the initial handshake, but
   used in the PSK handshakes. Adding it to the initial handshake
   simplifies the composition results. *)

type hashkey [large,fixed].

fun HKDF_extract_zero_salt(hashkey, key): extracted.

param qH1 [noninteractive].
channel ch1, ch2, ch3, ch4.
 

(* HKDF_extract_ES, that is, HKDF_extract with salt argument 
   Early_secret = HKDF_extract(0,0), is a random oracle. *)

expand ROM_hash(hashkey, elt, extracted, HKDF_extract_ES).

param qH [noninteractive].
channel c1, c2.
 

(* We use the lemma proved in KeySchedule2.cv *)

type two_keys [large,fixed].
fun Derive_Secret_cs_hts(extracted,bitstring):two_keys.
fun HKDF_extract_zero(extracted):extracted.


proba Pprf2.

equiv(prf2 )
  ! N3 new k: extracted; (
    ! N O1(log: bitstring) := return(Derive_Secret_cs_hts(k, log)) |
    O2() := return(HKDF_extract_zero(k)))
<=(N3 * Pprf2(time + (N3-1)*(time(HKDF_extract_zero) + N * time(Derive_Secret_cs_hts, maxlength(log))), N))=>
  ! N3 (
    ! N O1(log: bitstring) := find [unique] j <= N suchthat defined(log[j], r[j]) && (log = log[j]) then return(r[j]) else new r: two_keys; return(r) |
    O2() := new r': extracted; return(r')).

fun get_client_hts(two_keys): key.
fun get_server_hts(two_keys): key.

equiv(client_server_hts )
  ! N new r: two_keys; (
    O1() := return(get_client_hts(r)) |
    O2() := return(get_server_hts(r)))
<=(0)=>
  ! N (
    O1() := new r1: key; return(r1) |
    O2() := new r2: key; return(r2)).

(* We use the lemma proved in KeySchedule3.cv *)

type three_keys [large, fixed].
fun Derive_Secret_cs_ats_exp(extracted, bitstring): three_keys.
fun Derive_Secret_rms(extracted, bitstring): key.

proba Pprf3.

equiv(prf3 )
  ! N3 new k: extracted; (
    ! N O1(log: bitstring) := return(Derive_Secret_cs_ats_exp(k, log)) |
    ! N' O2(log': bitstring) := return(Derive_Secret_rms(k, log')))
<=(N3 * Pprf2(time + (N3-1)*(N' * time(Derive_Secret_rms, maxlength(log')) + N * time(Derive_Secret_cs_ats_exp, maxlength(log))), N, N'))=>
  ! N3 (
    ! N O1(log: bitstring) := find [unique] j <= N suchthat defined(log[j], r[j]) && (log = log[j]) then return(r[j]) else new r: three_keys; return(r) |
    ! N' O2(log': bitstring) := find [unique] j' <= N' suchthat defined(log'[j'], r'[j']) && (log' = log'[j']) then return(r'[j']) else new r': key; return(r')).      

fun get_client_ats(three_keys): key.
fun get_server_ats(three_keys): key.
fun get_exporter_ms(three_keys): key.

equiv(client_server_ats_exporter_ms )
  ! N new r: three_keys; (
    O1() := return(get_client_ats(r)) |
    O2() := return(get_server_ats(r)) |
    O3() := return(get_exporter_ms(r)))
<=(0)=>
  ! N (
    O1() := new r1: key; return(r1) |
    O2() := new r2: key; return(r2) |
    O3() := new r3: key; return(r3)).

(* We use the lemma proved in HKDFexpand.cv *)

fun HKDF_expand_fin_label(key): key.
fun HKDF_expand_key_label(key): key.
fun HKDF_expand_iv_label(key): key.

proba Pprf_fin_key_iv.

equiv(prf_fin_key_iv )
  ! N3 new r: key; (
    O1() := return(HKDF_expand_fin_label(r)) |
    O2() := return(HKDF_expand_key_label(r)) |
    O3() := return(HKDF_expand_iv_label(r)))
<=(N3 * Pprf_fin_key_iv(time + (N3-1)*(time(HKDF_expand_fin_label) + time(HKDF_expand_key_label) + time(HKDF_expand_iv_label))))=>
  ! N3 (
    O1() := new r1: key; return(r1) |
    O2() := new r2: key; return(r2) |
    O3() := new r3: key; return(r3)).

(* SUF-CMA MAC
   The MAC is actually a combination of a hash followed by a MAC.
   It is easy to see that the combination is SUF-CMA provided the MAC is SUF-CMA 
   and the hash is collision resistant. *)

proba Pmac.
expand SUF_CMA_mac_nokgen(key, bitstring, bitstring, mac, check, Pmac).


(* UF-CMA signatures
   I suppose that signatures are probabilistic, and
   I generate the public key and private key from a common seed
   (instead of generating the public key from the private key).
   Verify returns true when the verification succeeds 
   (instead of returning the message)
   
   The signature is actually a combination of a hash and a signature.
   It is easy to see that the combination is UF-CMA provided the
   signature is UF-CMA and the hash is collision-resistant.

   If desired, we could also allow different signature algorithms 
   on the client and server sides.
 *)

type keyseed [large, bounded].
type seed [large, bounded].
type skey [bounded].
type certificate [bounded].

proba Psign.
proba Psigncoll.
expand UF_CMA_signature_key_first(keyseed, certificate, skey, bitstring, bitstring, seed, 
       		        skgen, pkcert, sign, verify, Psign, Psigncoll).

type nonce [large, fixed].

(* Message formats *)

fun ClientHello(nonce, elt): bitstring [data].
fun ServerHelloIn(nonce, elt, bitstring): bitstring [data].
fun ServerHelloOut(nonce, elt): bitstring [data].
fun ServerCertificateIn(certificate,bitstring): bitstring [data].
fun ServerFinishedIn(certificate,bitstring,bitstring,bitstring): bitstring [data].
fun ServerCertificateVerifyOut(bitstring): bitstring [data].
fun ServerFinishedOut(bitstring): bitstring [data].

fun ClientCertificateVerifyOut(bitstring): bitstring [data].
fun ClientFinishedOut(bitstring): bitstring  [data].
fun ClientFinishedIn(bitstring): bitstring  [data].
fun ClientFinishedAuthIn(bitstring,certificate,bitstring,bitstring): bitstring  [data].
(*
equation forall cfin1: bitstring, log2: bitstring, cert: certificate, ccv: bitstring, cfin2: bitstring;
       ClientFinishedIn(cfin1) <> ClientFinishedAuthIn(log2, cert, ccv, cfin2).
*)
(* Logs *)

fun ServerHelloLogInfo(nonce,elt,nonce,elt,bitstring): bitstring [data].
fun ServerCertificateLogInfo(bitstring,certificate,bitstring): bitstring [data].
fun ServerCertificateVerifyLogInfo(bitstring,bitstring): bitstring [data].
fun ServerFinishedLogInfo(bitstring,bitstring): bitstring [data].
fun ClientCertificateLogInfo(bitstring, bitstring, certificate): bitstring [data].
fun ClientCertificateVerifyLogInfo(bitstring, bitstring): bitstring [data].
fun ClientFinishedLogInfo(bitstring, bitstring): bitstring [data].

(* To make sure that a client MAC with client authentication cannot
   mixed with a client MAC without client authentication. *)

equation forall scvl: bitstring, m: bitstring, ccl: bitstring, ccv: bitstring;
       ServerFinishedLogInfo(scvl, m) <> ClientCertificateVerifyLogInfo(ccl, ccv).

(* Tables *)

(* Stores the Diffie-Hellman public ephemerals of the honest client *)
table client_gx(elt).

(* Stores the client finished log of the honest client *)
table client_cfl(bitstring).

(* Stores the server finished log of the honest server *)
table server_sfl(bitstring).

(* Secrecy of the keys
   The keys are cats, sats, ems, resumption_secret.
   They are stored in the variables:
     - client side: 
        c_sats
   	c_cats, c_ems, c_resumption_secret
     - server side: 
        s_sats
        s_cats, s_ems, s_resumption_secret
	The variables of the last line are duplicated, with indices 1 and 2
	because the code after 0.5-RTT in the server is duplicated.
   All these variables are considered public, except that when we prove the secrecy
   of one such variable, this variable and the corresponding 
   variable on the other side are not public. *)

(* We prove secrecy of sats server side when the ServerFinished message is sent. *)
query secret s_sats public_vars c_cats, c_ems, c_resumption_secret, s_cats1, s_cats2, s_ems1, s_ems2, s_resumption_secret1, s_resumption_secret2.

(* We prove secrecy of cats, ems, resumption_secret client side at the end of the protocol. *)
query secret c_cats public_vars c_sats, c_ems, c_resumption_secret, s_sats, s_ems1, s_ems2, s_resumption_secret1, s_resumption_secret2.
query secret c_ems public_vars c_cats, c_sats, c_resumption_secret, s_cats1, s_cats2, s_sats, s_resumption_secret1, s_resumption_secret2.
query secret c_resumption_secret public_vars c_cats, c_sats, c_ems, s_cats1, s_cats2, s_sats, s_ems1, s_ems2.

(* Authentication of the server to the client *)

event ClientTerm(bitstring,bitstring).
event ServerAccept(bitstring,bitstring).

query keys: bitstring, log4: bitstring;
  inj-event(ClientTerm(log4, keys)) ==> inj-event(ServerAccept(log4, keys)) public_vars s_resumption_secret2, s_resumption_secret1, s_ems2, s_ems1, s_sats, s_cats2, s_cats1, c_ems, c_sats, c_cats, c_resumption_secret.

query s_keys: bitstring, c_keys: bitstring, log4: bitstring;
  event(ClientTerm(log4, c_keys)) && event(ServerAccept(log4, s_keys)) ==> (c_keys = s_keys) public_vars s_resumption_secret2, s_resumption_secret1, s_ems2, s_ems1, s_sats, s_cats2, s_cats1, c_ems, c_sats, c_cats, c_resumption_secret.

(* Correspondence client to server *)

event ServerTerm(bitstring,bitstring).
event ClientAccept(bitstring,bitstring).

query keys: bitstring, log7: bitstring;
  inj-event(ServerTerm(log7, keys)) ==> inj-event(ClientAccept(log7, keys)) public_vars s_resumption_secret2, s_resumption_secret1, s_ems2, s_ems1, s_sats, s_cats2, s_cats1, c_ems, c_sats, c_cats, c_resumption_secret.

query c_keys: bitstring, s_keys: bitstring, log7: bitstring;
  event(ServerTerm(log7, s_keys)) && event(ClientAccept(log7, c_keys)) ==> (s_keys = c_keys) public_vars s_resumption_secret2, s_resumption_secret1, s_ems2, s_ems1, s_sats, s_cats2, s_cats1, c_ems, c_sats, c_cats, c_resumption_secret.

(* Unique channel identifier 
   As explained in the paper, we manually prove that 
   when the cid is the same, sfl (log until ServerFinished)
   is the same. CryptoVerif proves that the full log and the
   keys are then the same, by the query below.  *)

event ClientTerm1(bitstring, bitstring, bitstring).
event ServerTerm1(bitstring, bitstring, bitstring).

query s_keys: bitstring, s_cfl: bitstring, c_keys: bitstring, c_cfl: bitstring, sfl: bitstring;
  event(ClientTerm1(sfl, c_cfl, c_keys)) && event(ServerTerm1(sfl, s_cfl, s_keys)) ==> ((c_cfl = s_cfl) && (c_keys = s_keys)) public_vars s_resumption_secret2, s_resumption_secret1, s_ems2, s_ems1, s_sats, s_cats2, s_cats1, c_ems, c_sats, c_cats, c_resumption_secret.

letfun send_client_hello() = 
       new cr:nonce;
       new x:key;
       let gx = exp(G,x) in
       (cr,x,gx).


letfun recv_server_hello(hk: hashkey, sil:bitstring, x:key) = 
  let ServerHelloLogInfo(cr,gx,sr,gy,l) = sil in
  (let s = exp(gy,x) in
   let handshakeSecret = HKDF_extract_ES(hk,s) in
   let cs_hts = Derive_Secret_cs_hts(handshakeSecret,sil) in
   let client_hts = get_client_hts(cs_hts) in
   let server_hts = get_server_hts(cs_hts) in
   let client_hk = HKDF_expand_key_label(client_hts) in
   let server_hk = HKDF_expand_key_label(server_hts) in
   let client_hiv = HKDF_expand_iv_label(client_hts) in
   let server_hiv = HKDF_expand_iv_label(server_hts) in
   let cfk = HKDF_expand_fin_label(client_hts) in
   let sfk = HKDF_expand_fin_label(server_hts) in
   let masterSecret = HKDF_extract_zero(handshakeSecret) in
   (masterSecret,client_hk,server_hk,client_hiv,server_hiv,cfk,sfk,true))
  else (zero_extracted,zero_key,zero_key,zero_key,zero_key,zero_key,zero_key,false).
   

letfun recv_server_finished(si:bitstring, masterSecret:extracted, sfk: key,
       		            cert:certificate, s:bitstring, m:bitstring, 
			    log1:bitstring) =
   let scl = ServerCertificateLogInfo(si,cert,log1) in
   let scvl = ServerCertificateVerifyLogInfo(scl,s) in
   let sfl = ServerFinishedLogInfo(scvl,m) in
   let cs_ats_exp = Derive_Secret_cs_ats_exp(masterSecret,sfl) in
   (cs_ats_exp, verify(cert,scl,s) && mac(sfk,scvl) = m).
			   
letfun send_client_certificate_verify(ccl:bitstring, sk:skey) = 
   new s: seed;
   sign(sk,ccl,s).

letfun send_client_finished(log:bitstring, cfk:key) = 
   mac(cfk,log).

letfun get_resumption_secret(masterSecret: extracted, cfl: bitstring) =
   Derive_Secret_rms(masterSecret, cfl).

letfun recv_client_hello(hk: hashkey, cr:nonce, gx:elt) = 
   new sr:nonce;
   new y: key;
   let gy = exp(G,y) in
   let s = exp(gx,y) in
   let handshakeSecret = HKDF_extract_ES(hk,s) in   
   (sr,gy,handshakeSecret).

letfun onertt_hs_keys(sil:bitstring,handshakeSecret:extracted) = 
   let cs_hts = Derive_Secret_cs_hts(handshakeSecret,sil) in
   let client_hts = get_client_hts(cs_hts) in
   let server_hts = get_server_hts(cs_hts) in
   let client_hk = HKDF_expand_key_label(client_hts) in
   let server_hk = HKDF_expand_key_label(server_hts) in
   let client_hiv = HKDF_expand_iv_label(client_hts) in
   let server_hiv = HKDF_expand_iv_label(server_hts) in
   let cfk = HKDF_expand_fin_label(client_hts) in
   let sfk = HKDF_expand_fin_label(server_hts) in
   let masterSecret = HKDF_extract_zero(handshakeSecret) in
   (client_hk, server_hk, client_hiv, server_hiv, cfk, sfk, masterSecret).

letfun send_server_certificate_verify(scl:bitstring,sk:skey) = 
   new s: seed;
   sign(sk,scl,s).

letfun send_server_finished(scvl:bitstring,sfk:key) = 
   mac(sfk,scvl).

letfun onertt_data_keys(masterSecret: extracted, sfl:bitstring) = 
   Derive_Secret_cs_ats_exp(masterSecret,sfl).

letfun check_client_finished_no_auth(masterSecret: extracted, sfl:bitstring,cfin:bitstring,cfk:key) = 
   if mac(cfk,sfl) = cfin then
   (
       let cfl = ClientFinishedLogInfo(sfl, cfin) in
       let resumption_secret = Derive_Secret_rms(masterSecret, cfl) in
       (resumption_secret, true)
   )
   else
       (zero_key, false).

letfun check_client_finished_client_auth(masterSecret: extracted, sfl:bitstring,
				    log2: bitstring, 
				    certC:certificate,
				    ccv:bitstring,cfin:bitstring,
			    	    cfk:key) = 
   let ccl = ClientCertificateLogInfo(sfl,log2,certC) in
   let ccvl = ClientCertificateVerifyLogInfo(ccl,ccv) in
   if verify(certC,ccl,ccv) && mac(cfk,ccvl) = cfin then
   (
      let cfl = ClientFinishedLogInfo(ccvl, cfin) in
      let resumption_secret = Derive_Secret_rms(masterSecret, cfl) in   
      (resumption_secret, true)
   )
   else
      (zero_key, false).


param N1,N5,N6,
      N7,N8,N9,N10,N11,N12,
      N13,N14,N15,N16.










(* Corruption for forward secrecy *)





process 
  in(ch1, ());
new hk1: hashkey;
out(ch2, ());
((
  in(io33, ());
  new hk: hashkey;
  new kseedS: keyseed;
  let skS: skey = skgen(kseedS) in
  let pkS: certificate = pkcert(kseedS) in
  new kseedC: keyseed;
  let skC: skey = skgen(kseedC) in
  let pkC: certificate = pkcert(kseedC) in
  out(io34, (pkS, pkC));
  ((
    ! i_1 <= N1
    in(io1[i_1], ());
    let (cr_2: nonce, x_6: key, cgx: elt) = (new cr_1: nonce; new x_5: key; let gx: elt = exp(G, x_5) in (cr_1, x_5, gx)) in
    insert client_gx(cgx);
    out(io2[i_1], ClientHello(cr_2, cgx));
    in(io3[i_1], ServerHelloIn(sr: nonce, cgy: elt, log0: bitstring));
    let sil: bitstring = ServerHelloLogInfo(cr_2, cgx, sr, cgy, log0) in
    let (masterSecret_2: extracted, client_hk_2: key, server_hk_2: key, client_hiv_2: key, server_hiv_2: key, cfk_2: key, sfk_2: key, =true) = (let hk_1: hashkey = hk in (let sil_1: bitstring = sil in (let x_7: key = x_6 in let ServerHelloLogInfo(cr_3: nonce, gx_1: elt, sr_1: nonce, gy: elt, l: bitstring) = sil_1 in (let s: elt = exp(gy, x_7) in (let handshakeSecret_1: extracted = HKDF_extract_ES(hk_1, s) in (let cs_hts: two_keys = Derive_Secret_cs_hts(handshakeSecret_1, sil_1) in (let client_hts: key = get_client_hts(cs_hts) in (let server_hts: key = get_server_hts(cs_hts) in (let client_hk_1: key = HKDF_expand_key_label(client_hts) in (let server_hk_1: key = HKDF_expand_key_label(server_hts) in (let client_hiv_1: key = HKDF_expand_iv_label(client_hts) in (let server_hiv_1: key = HKDF_expand_iv_label(server_hts) in (let cfk_1: key = HKDF_expand_fin_label(client_hts) in (let sfk_1: key = HKDF_expand_fin_label(server_hts) in (let masterSecret_1: extracted = HKDF_extract_zero(handshakeSecret_1) in (masterSecret_1, client_hk_1, server_hk_1, client_hiv_1, server_hiv_1, cfk_1, sfk_1, true))))))))))))) else (zero_extracted, zero_key, zero_key, zero_key, zero_key, zero_key, zero_key, false)))) in
    out(io4[i_1], (client_hk_2, server_hk_2, client_hiv_2, server_hiv_2));
    in(io5[i_1], (ServerFinishedIn(certS: certificate, scv: bitstring, m_3: bitstring, log1: bitstring), ClientAuth: bool, log2_1: bitstring));
    let (cs_ats_exp_2: three_keys, =true) = (let si_1: bitstring = sil in (let masterSecret_3: extracted = masterSecret_2 in (let sfk_3: key = sfk_2 in (let cert: certificate = certS in (let s_1: bitstring = scv in (let m_4: bitstring = m_3 in (let log1_1: bitstring = log1 in (let scl: bitstring = ServerCertificateLogInfo(si_1, cert, log1_1) in (let scvl: bitstring = ServerCertificateVerifyLogInfo(scl, s_1) in (let sfl: bitstring = ServerFinishedLogInfo(scvl, m_4) in (let cs_ats_exp_1: three_keys = Derive_Secret_cs_ats_exp(masterSecret_3, sfl) in (cs_ats_exp_1, (verify(cert, scl, s_1) && (mac(sfk_3, scvl) = m_4)))))))))))))) in
    let cats: key = get_client_ats(cs_ats_exp_2) in
    let c_sats: key = get_server_ats(cs_ats_exp_2) in
    let ems: key = get_exporter_ms(cs_ats_exp_2) in
    let scl_1: bitstring = ServerCertificateLogInfo(sil, certS, log1) in
    let scvl_1: bitstring = ServerCertificateVerifyLogInfo(scl_1, scv) in
    let c_sfl: bitstring = ServerFinishedLogInfo(scvl_1, m_3) in
    let (resumption_secret_2: key, final_mess_2: bitstring, final_log_2: bitstring) = (if ClientAuth then (let certC: certificate = pkC in (let ccl: bitstring = ClientCertificateLogInfo(c_sfl, log2_1, certC) in (let ccv: bitstring = (let ccl_1: bitstring = ccl in (let sk: skey = skC in new s_2: seed; sign(sk, ccl_1, s_2))) in (let ccvl: bitstring = ClientCertificateVerifyLogInfo(ccl, ccv) in (let cfin: bitstring = (let log: bitstring = ccvl in (let cfk_3: key = cfk_2 in mac(cfk_3, log))) in (let c_cfl: bitstring = ClientFinishedLogInfo(ccvl, cfin) in (insert client_cfl(c_cfl); let resumption_secret: key = (let masterSecret_4: extracted = masterSecret_2 in (let cfl: bitstring = c_cfl in Derive_Secret_rms(masterSecret_4, cfl))) in (let final_mess: bitstring = (ClientCertificateVerifyOut(ccv), ClientFinishedOut(cfin)) in (let final_log: bitstring = ClientFinishedAuthIn(log2_1, certC, ccv, cfin) in (resumption_secret, final_mess, final_log)))))))))) else let cfin_1: bitstring = (let log_1: bitstring = c_sfl in (let cfk_4: key = cfk_2 in mac(cfk_4, log_1))) in (let cfl_1: bitstring = ClientFinishedLogInfo(c_sfl, cfin_1) in (let resumption_secret_1: key = (let masterSecret_5: extracted = masterSecret_2 in (let cfl_2: bitstring = cfl_1 in Derive_Secret_rms(masterSecret_5, cfl_2))) in (let final_mess_1: bitstring = ClientFinishedOut(cfin_1) in (let final_log_1: bitstring = ClientFinishedIn(cfin_1) in (resumption_secret_1, final_mess_1, final_log_1)))))) in
    let honestsession: bool = (if certS = pkS then if defined(corruptedServer) then get server_sfl(=c_sfl) in true else false else true else false) in
    event ClientTerm1((cr_2, cgx, sr, cgy, log0, certS, log1, scv, m_3), final_log_2, (client_hk_2, server_hk_2, client_hiv_2, server_hiv_2, cfk_2, sfk_2, cats, c_sats, ems, resumption_secret_2));
    if honestsession then
    (
      event ClientTerm((cr_2, cgx, sr, cgy, log0, log1, scv, m_3), (client_hk_2, server_hk_2, client_hiv_2, server_hiv_2, cfk_2, sfk_2, cats, c_sats, ems));
      event ClientAccept((cr_2, cgx, sr, cgy, log0, certS, log1, scv, m_3, final_log_2), (client_hk_2, server_hk_2, client_hiv_2, server_hiv_2, cfk_2, sfk_2, cats, c_sats, ems, resumption_secret_2));
      let c_cats: key = cats in
      let c_ems: key = ems in
      let c_resumption_secret: key = resumption_secret_2 in
      out(io6[i_1], final_mess_2)
    )
    else
      out(io7[i_1], (final_mess_2, (resumption_secret_2, cats, c_sats, ems)))
  ) | (
    ! i_2 <= N6
    in(io20[i_2], ClientHello(cr_4: nonce, sgx: elt));
    let (sr_3: nonce, sgy: elt, handshakeSecret: extracted) = (let hk_2: hashkey = hk in (let cr_5: nonce = cr_4 in (let gx_2: elt = sgx in (new sr_2: nonce; new y_2: key; let gy_1: elt = exp(G, y_2) in (let s_3: elt = exp(gx_2, y_2) in (let handshakeSecret_2: extracted = HKDF_extract_ES(hk_2, s_3) in (sr_2, gy_1, handshakeSecret_2))))))) in
    out(io21[i_2], ServerHelloOut(sr_3, sgy));
    in(io22[i_2], log0_1: bitstring);
    let sil_2: bitstring = ServerHelloLogInfo(cr_4, sgx, sr_3, sgy, log0_1) in
    let (client_hk_4: key, server_hk_4: key, client_hiv_4: key, server_hiv_4: key, cfk_6: key, sfk_5: key, masterSecret_7: extracted) = (let sil_3: bitstring = sil_2 in (let handshakeSecret_3: extracted = handshakeSecret in (let cs_hts_1: two_keys = Derive_Secret_cs_hts(handshakeSecret_3, sil_3) in (let client_hts_1: key = get_client_hts(cs_hts_1) in (let server_hts_1: key = get_server_hts(cs_hts_1) in (let client_hk_3: key = HKDF_expand_key_label(client_hts_1) in (let server_hk_3: key = HKDF_expand_key_label(server_hts_1) in (let client_hiv_3: key = HKDF_expand_iv_label(client_hts_1) in (let server_hiv_3: key = HKDF_expand_iv_label(server_hts_1) in (let cfk_5: key = HKDF_expand_fin_label(client_hts_1) in (let sfk_4: key = HKDF_expand_fin_label(server_hts_1) in (let masterSecret_6: extracted = HKDF_extract_zero(handshakeSecret_3) in (client_hk_3, server_hk_3, client_hiv_3, server_hiv_3, cfk_5, sfk_4, masterSecret_6))))))))))))) in
    out(io23[i_2], (client_hk_4, server_hk_4, client_hiv_4, server_hiv_4));
    in(io24[i_2], log1_2: bitstring);
    let certS_1: certificate = pkS in
    let scl_2: bitstring = ServerCertificateLogInfo(sil_2, certS_1, log1_2) in
    let scv_1: bitstring = (let scl_3: bitstring = scl_2 in (let sk_1: skey = skS in new s_4: seed; sign(sk_1, scl_3, s_4))) in
    let scvl_2: bitstring = ServerCertificateVerifyLogInfo(scl_2, scv_1) in
    let m_5: bitstring = (let scvl_3: bitstring = scvl_2 in (let sfk_6: key = sfk_5 in mac(sfk_6, scvl_3))) in
    let s_sfl: bitstring = ServerFinishedLogInfo(scvl_2, m_5) in
    insert server_sfl(s_sfl);
    let cs_ats_exp_3: three_keys = (let masterSecret_8: extracted = masterSecret_7 in (let sfl_1: bitstring = s_sfl in Derive_Secret_cs_ats_exp(masterSecret_8, sfl_1))) in
    let cats_1: key = get_client_ats(cs_ats_exp_3) in
    let sats: key = get_server_ats(cs_ats_exp_3) in
    let ems_1: key = get_exporter_ms(cs_ats_exp_3) in
    get client_gx(=sgx) in
    (
      event ServerAccept((cr_4, sgx, sr_3, sgy, log0_1, log1_2, scv_1, m_5), (client_hk_4, server_hk_4, client_hiv_4, server_hiv_4, cfk_6, sfk_5, cats_1, sats, ems_1));
      let s_sats: key = sats in
      out(io25[i_2], (ServerCertificateVerifyOut(scv_1), ServerFinishedOut(m_5)));
      in(io26[i_2], clientfinished_2: bitstring);
      let ((resumption_secret_8: key, =true), honestsession_6: bool) = (let ClientFinishedAuthIn(log2_4: bitstring, certC_3: certificate, ccv_3: bitstring, cfin_6: bitstring) = clientfinished_2 in (let res_2: bitstring = (let masterSecret_11: extracted = masterSecret_7 in (let sfl_4: bitstring = s_sfl in (let log2_5: bitstring = log2_4 in (let certC_4: certificate = certC_3 in (let ccv_4: bitstring = ccv_3 in (let cfin_7: bitstring = cfin_6 in (let cfk_9: key = cfk_6 in (let ccl_4: bitstring = ClientCertificateLogInfo(sfl_4, log2_5, certC_4) in (let ccvl_3: bitstring = ClientCertificateVerifyLogInfo(ccl_4, ccv_4) in if verify(certC_4, ccl_4, ccv_4) && (mac(cfk_9, ccvl_3) = cfin_7) then (let cfl_5: bitstring = ClientFinishedLogInfo(ccvl_3, cfin_7) in (let resumption_secret_6: key = Derive_Secret_rms(masterSecret_11, cfl_5) in (resumption_secret_6, true))) else (zero_key, false)))))))))) in (let ccl_5: bitstring = ClientCertificateLogInfo(s_sfl, log2_4, certC_3) in (let ccvl_4: bitstring = ClientCertificateVerifyLogInfo(ccl_5, ccv_3) in (let s_cfl_1: bitstring = ClientFinishedLogInfo(ccvl_4, cfin_6) in (let honestsession_4: bool = (if certC_3 = pkC then if defined(corruptedClient) then get client_cfl(=s_cfl_1) in true else false else true else false) in (res_2, honestsession_4)))))) else let ClientFinishedIn(cfin_8: bitstring) = clientfinished_2 in (let res_3: bitstring = (let masterSecret_12: extracted = masterSecret_7 in (let sfl_5: bitstring = s_sfl in (let cfin_9: bitstring = cfin_8 in (let cfk_10: key = cfk_6 in if mac(cfk_10, sfl_5) = cfin_9 then (let cfl_6: bitstring = ClientFinishedLogInfo(sfl_5, cfin_9) in (let resumption_secret_7: key = Derive_Secret_rms(masterSecret_12, cfl_6) in (resumption_secret_7, true))) else (zero_key, false))))) in (let honestsession_5: bool = (get client_gx(=sgx) in true else false) in (res_3, honestsession_5))) else ((zero_key, false), false)) in
      let s_resumption_secret1: key = resumption_secret_8 in
      let s_cats1: key = cats_1 in
      let s_ems1: key = ems_1 in
      event ServerTerm1((cr_4, sgx, sr_3, sgy, log0_1, certS_1, log1_2, scv_1, m_5), clientfinished_2, (client_hk_4, server_hk_4, client_hiv_4, server_hiv_4, cfk_6, sfk_5, s_cats1, sats, s_ems1, s_resumption_secret1));
      if honestsession_6 then
        event ServerTerm((cr_4, sgx, sr_3, sgy, log0_1, certS_1, log1_2, scv_1, m_5, clientfinished_2), (client_hk_4, server_hk_4, client_hiv_4, server_hiv_4, cfk_6, sfk_5, s_cats1, sats, s_ems1, s_resumption_secret1));
        out(io27[i_2], ())
      else
        out(io28[i_2], (s_resumption_secret1, s_cats1, sats, s_ems1))
    )
    else
      out(io25'[i_2], ((ServerCertificateVerifyOut(scv_1), ServerFinishedOut(m_5)), sats));
      in(io26'[i_2], clientfinished_1: bitstring);
      let ((resumption_secret_5: key, =true), honestsession_3: bool) = (let ClientFinishedAuthIn(log2_2: bitstring, certC_1: certificate, ccv_1: bitstring, cfin_2: bitstring) = clientfinished_1 in (let res: bitstring = (let masterSecret_9: extracted = masterSecret_7 in (let sfl_2: bitstring = s_sfl in (let log2_3: bitstring = log2_2 in (let certC_2: certificate = certC_1 in (let ccv_2: bitstring = ccv_1 in (let cfin_3: bitstring = cfin_2 in (let cfk_7: key = cfk_6 in (let ccl_2: bitstring = ClientCertificateLogInfo(sfl_2, log2_3, certC_2) in (let ccvl_1: bitstring = ClientCertificateVerifyLogInfo(ccl_2, ccv_2) in if verify(certC_2, ccl_2, ccv_2) && (mac(cfk_7, ccvl_1) = cfin_3) then (let cfl_3: bitstring = ClientFinishedLogInfo(ccvl_1, cfin_3) in (let resumption_secret_3: key = Derive_Secret_rms(masterSecret_9, cfl_3) in (resumption_secret_3, true))) else (zero_key, false)))))))))) in (let ccl_3: bitstring = ClientCertificateLogInfo(s_sfl, log2_2, certC_1) in (let ccvl_2: bitstring = ClientCertificateVerifyLogInfo(ccl_3, ccv_1) in (let s_cfl: bitstring = ClientFinishedLogInfo(ccvl_2, cfin_2) in (let honestsession_1: bool = (if certC_1 = pkC then if defined(corruptedClient) then get client_cfl(=s_cfl) in true else false else true else false) in (res, honestsession_1)))))) else let ClientFinishedIn(cfin_4: bitstring) = clientfinished_1 in (let res_1: bitstring = (let masterSecret_10: extracted = masterSecret_7 in (let sfl_3: bitstring = s_sfl in (let cfin_5: bitstring = cfin_4 in (let cfk_8: key = cfk_6 in if mac(cfk_8, sfl_3) = cfin_5 then (let cfl_4: bitstring = ClientFinishedLogInfo(sfl_3, cfin_5) in (let resumption_secret_4: key = Derive_Secret_rms(masterSecret_10, cfl_4) in (resumption_secret_4, true))) else (zero_key, false))))) in (let honestsession_2: bool = (get client_gx(=sgx) in true else false) in (res_1, honestsession_2))) else ((zero_key, false), false)) in
      let s_resumption_secret2: key = resumption_secret_5 in
      let s_cats2: key = cats_1 in
      let s_ems2: key = ems_1 in
      event ServerTerm1((cr_4, sgx, sr_3, sgy, log0_1, certS_1, log1_2, scv_1, m_5), clientfinished_1, (client_hk_4, server_hk_4, client_hiv_4, server_hiv_4, cfk_6, sfk_5, s_cats2, sats, s_ems2, s_resumption_secret2));
      if honestsession_3 then
        event ServerTerm((cr_4, sgx, sr_3, sgy, log0_1, certS_1, log1_2, scv_1, m_5, clientfinished_1), (client_hk_4, server_hk_4, client_hiv_4, server_hiv_4, cfk_6, sfk_5, s_cats2, sats, s_ems2, s_resumption_secret2));
        out(io27'[i_2], ())
      else
        out(io28'[i_2], (s_resumption_secret2, s_cats2, sats, s_ems2))
  ) | (
    in(cCorruptS1, ());
    let corruptedServer: bool = true in
    out(cCorruptS2, skS)
  ) | (
    in(cCorruptC1, ());
    let corruptedClient: bool = true in
    out(cCorruptC2, skC)
  ) | (
    ! i_3 <= qH
    in(c1[i_3], x_8: elt);
    out(c2[i_3], HKDF_extract_ES(hk, x_8))
  ))
) | (
  ! i_4 <= qH1
  in(ch3[i_4], x_9: key);
  out(ch4[i_4], HKDF_extract_zero_salt(hk1, x_9))
))



(* EXPECTED
All queries proved.
117.384s (user 116.824s + system 0.560s), max rss 2292784K
END *)
