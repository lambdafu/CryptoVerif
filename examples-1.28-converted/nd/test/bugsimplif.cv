(* The "find j <= N suchthat defined(j) then" at some point lead to 
   a wrong simplification in which CryptoVerif considered that j must be defined
   before executing the find, instead of just after.

   Version in which the participants only talk to A and B 
   Using two series of function symbols to prevent repeated applications
   of the same cryptographic rule.

   The result obtained by CryptoVerif changed with the new semantics
   of find: 
      find j <= N suchthat defined(j) then
   is now interpreted as 
      find j = j' <= N suchthat defined(j) then 
   which always fails (j is not defined yet when defined(j) is tested).
*)

param N.
param N2.
param N3.

type tag [bounded].
type nonce [large,fixed].
type host [bounded].
type mkey [bounded].
type mkeyseed [fixed].
type key [fixed].
type keyseed [fixed].
type seed [fixed].
type macs [fixed].
type maxenc [bounded].
type maxmac [bounded].
type maxencnotag [bounded].

const tag1: tag.
const tag2: tag.
const tag3: tag.
const tag4: tag.

fun concat1(nonce, nonce, host, host):maxencnotag [data].
fun concat2(nonce, key):maxencnotag [data].
fun tagf(tag, maxencnotag):maxenc [data].

(* Shared-key encryption (CPA Stream cipher) *)

proba Penc.

fun enc(maxenc, key, seed): maxmac.
fun kgen(keyseed):key.
fun dec(maxmac, key): bitstringbot.

fun enc2(maxenc, key, seed): maxmac.
fun kgen2(keyseed):key.

fun injbot(maxenc):bitstringbot [data].
(* The function Z returns for each bitstring, a bitstring
   of the same length, consisting only of zeroes. *)
fun Z(maxenc):maxenc.
const Z1:maxenc.
const Z2:maxenc.

equation forall m:maxenc, r:keyseed, r2:seed; 
	dec(enc(m, kgen(r), r2), kgen(r)) = injbot(m).
equation forall u:tag, x:nonce, y:nonce, z:host, t:host; Z(tagf(u,concat1(x,y,z,t))) = Z1.
equation forall u:tag, x:nonce, y:key; Z(tagf(u,concat2(x,y))) = Z2.


equiv
  ! N2 new r: keyseed; ! N new r2: seed; gen_Oracle(x: maxenc) := return(enc(x, kgen(r), r2))
<=(N2 * Penc(time, N))=>
  ! N2 new r: keyseed; ! N new r2: seed; gen_Oracle(x: maxenc) := return(enc2(Z(x), kgen2(r), r2)).

(* Mac *)

proba Pmac.

fun mac(maxmac, mkey):macs.
fun check(maxmac, mkey, macs): bool.
fun mkgen(mkeyseed):mkey.

fun mac2(maxmac, mkey):macs.
fun check2(maxmac, mkey, macs): bool.
fun mkgen2(mkeyseed):mkey.

equation forall m:maxmac, r:mkeyseed;
	check(m, mkgen(r), mac(m, mkgen(r))).
equation forall m:maxmac, r:mkeyseed;
	check2(m, mkgen2(r), mac2(m, mkgen2(r))).

equiv
  ! N3 new r: mkeyseed; (
    ! N gen_Oracle_1(x: maxmac) := return(mac(x, mkgen(r))) |
    ! N2 gen_Oracle_2(m: maxmac, ma: macs) := return(check(m, mkgen(r), ma)))
<=(N3 * Pmac(time, N, N2))=>
  ! N3 new r: mkeyseed; (
    ! N gen_Oracle_1(x: maxmac) := return(mac2(x, mkgen2(r))) |
    ! N2 gen_Oracle_2(m: maxmac, ma: macs) := find j <= N suchthat defined(x[j]) && (m = x[j]) && check2(x[j], mkgen2(r), ma) then return(true) else return(false)).


(* Queries *)

query secret keyA [cv_onesession].
query secret keyB [cv_onesession].

query secret keyA.
query secret keyB.

channel c1, c2, c3, c4, c5, c6, c7, c8, c9, start, finish.
const A : host.
const B : host.

event endA(host, host, nonce, key).
event endB(host, host, nonce, key).
event beginA(host, host, nonce).
event beginB(host, host, nonce).

query k: key, n: nonce, y: host, x: host;
  event(endA(x, y, n, k)) ==> event(beginB(x, y, n)) public_vars keyA, keyB.
query k: key, n: nonce, y: host, x: host;
  event(endB(x, y, n, k)) ==> event(beginA(x, y, n)) public_vars keyA, keyB.
query k: key, n: nonce, y: host, x: host;
  inj-event(endA(x, y, n, k)) ==> inj-event(beginB(x, y, n)) public_vars keyA, keyB.
query k: key, n: nonce, y: host, x: host;
  inj-event(endB(x, y, n, k)) ==> inj-event(beginA(x, y, n)) public_vars keyA, keyB.







	
process 
	in(start, ());
new rKas: keyseed;
let Kas: key = kgen(rKas) in
new rmKas: mkeyseed;
let mKas: mkey = mkgen(rmKas) in
new rKbs: keyseed;
let Kbs: key = kgen(rKbs) in
new rmKbs: mkeyseed;
let mKbs: mkey = mkgen(rmKbs) in
find j_12 = j_13 <= N suchthat defined(j_12) then
out(c9, ());
((
  ! i_1 <= N
  in(start[i_1], ());
  new M_1: nonce;
  new Na_1: nonce;
  new s1: seed;
  let ea1: maxmac = enc(tagf(tag1, concat1(Na_1, M_1, A, B)), Kas, s1) in
  event beginA(A, B, M_1);
  out(c1[i_1], (M_1, A, B, ea1, mac(ea1, mKas)));
  in(c2[i_1], (=M_1, ea2_1: maxmac, ma2_1: macs));
  if check(ea2_1, mKas, ma2_1) then
  let injbot(tagf(=tag3, concat2(=Na_1, k: key))) = dec(ea2_1, Kas) in
  event endA(A, B, M_1, k);
  let keyA: key = k
) | (
  ! i_2 <= N
  in(c3[i_2], (M_2: nonce, =A, =B, ea: maxmac, ma: macs));
  new Nb_1: nonce;
  new s2: seed;
  let e2: maxmac = enc(tagf(tag2, concat1(Nb_1, M_2, A, B)), Kbs, s2) in
  event beginB(A, B, M_2);
  out(c4[i_2], (M_2, A, B, ea, ma, e2, mac(e2, mKbs)));
  in(c5[i_2], (=M_2, ea2_2: maxmac, ma2_2: macs, eb2: maxmac, mb2: macs));
  if check(eb2, mKbs, mb2) then
  let injbot(tagf(=tag4, concat2(=Nb_1, k_1: key))) = dec(eb2, Kbs) in
  out(c6[i_2], (M_2, ea2_2, ma2_2));
  in(finish[i_2], ());
  event endB(A, B, M_2, k_1);
  let keyB: key = k_1
) | (
  ! i_3 <= N
  in(c7[i_3], (M_3: nonce, =A, =B, ea1_1: maxmac, ma1: macs, eb1: maxmac, mb1: macs));
  if check(ea1_1, mKas, ma1) then
  let injbot(tagf(=tag1, concat1(Na_2: nonce, =M_3, =A, =B))) = dec(ea1_1, Kas) in
  if check(eb1, mKbs, mb1) then
  let injbot(tagf(=tag2, concat1(Nb_2: nonce, =M_3, =A, =B))) = dec(eb1, Kbs) in
  new k_2: key;
  new s3: seed;
  new s4: seed;
  let e1: maxmac = enc(tagf(tag3, concat2(Na_2, k_2)), Kas, s3) in
  let e2_1: maxmac = enc(tagf(tag4, concat2(Nb_2, k_2)), Kbs, s4) in
  out(c8[i_3], (M_3, e1, mac(e1, mKas), e2_1, mac(e2_1, mKbs)))
))



(* EXPECTED
All queries proved.
0.020s (user 0.008s + system 0.012s), max rss 10860K
END *)
