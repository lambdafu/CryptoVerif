type D.

(* set interactiveMode = true. *)

fun xor(D,D):D.
const neut:D.
equation ACUN(xor,neut).

fun h(D):bitstring.
fun g(D,D,D,D): D.

const zero, one, two, three: D. 
const zero', one', two', three': D. 

channel c.
proba Peq.
param n.

equiv
  ! n O(x: D, y: D, z: D, t: D) := return(xor(x,xor(y,xor(z,t)))) [all]
<=(Peq)=>
  ! n O(x: D, y: D, z: D, t: D) := return(g(x,y,z,t)).


process in(c, ());
out(c, h(xor(xor(zero, one), xor(two, zero'))));
in(c, ());
let z: D = xor(zero, one) in
out(c, h(xor(z, xor(two, zero'))));
in(c, ());
let t: D = xor(two, zero') in
out(c, h(xor(z, t)));
in(c, ());
let x: D = xor(z, t) in
out(c, h(x));
in(c, ());
out(c, (xor(zero, one) = xor(two, zero')));
in(c, ());
out(c, (xor(t, one) = zero))




(* EXPECTED
All queries proved.
0.024s (user 0.024s + system 0.000s), max rss 39936K
END *)
