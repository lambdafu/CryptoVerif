
(* Yahalom, Version of Burrows, Abadi, Needham, SRC039 

The final round of key confirmation should have a "mac" in order
to prove the correspondence property:
	query x:host, y:host, k:key;
		event endB(x,y,k) ==> beginA(x,y,k).
This mac is added in this file.
*)


param N.
param N2.
param N3.

type nonce [large,fixed].
type host.
type key [fixed].
type keyseed [fixed].
type seed [fixed].
type macs [fixed].

fun nonceToBitstring(nonce):bitstring [data].

(* For simplicity, in this first example, I ignore the length of messages
   and the fact that decryption may fail. See yahalom3Stream for a better
   version *)
(* Shared-key encryption (CPA) *)

proba Penc.

fun enc(bitstring, key, seed): bitstring.
fun kgen(keyseed):key.
fun dec(bitstring, key): bitstring.

fun enc2(bitstring, key, seed): bitstring.
fun kgen2(keyseed):key.

equation forall m:bitstring, r:keyseed, r2:seed; 
	dec(enc(m, kgen(r), r2), kgen(r)) = m.

const Z: bitstring.
equiv
  ! N2 new r: keyseed; ! N new r2: seed; gen_Oracle(x: bitstring) := return(enc(x, kgen(r), r2))
<=(N2 * Penc(time, N))=>
  ! N2 new r: keyseed; ! N new r2: seed; gen_Oracle(x: bitstring) := return(enc2(Z, kgen2(r), r2)).

(* Mac *)

proba Pmac.

fun mac(bitstring, key):macs.
fun check(bitstring, key, macs): bool.
fun mkgen(keyseed):key.

fun mac2(bitstring, key):macs.
fun check2(bitstring, key, macs): bool.
fun mkgen2(keyseed):key.

equation forall m:bitstring, r:keyseed;
	check(m, mkgen(r), mac(m, mkgen(r))).
equation forall m:bitstring, r:keyseed;
	check2(m, mkgen2(r), mac2(m, mkgen2(r))).

equiv
  ! N3 new r: keyseed; (
    ! N gen_Oracle_1(x: bitstring) := return(mac(x, mkgen(r))) |
    ! N2 gen_Oracle_2(m: bitstring, ma: macs) := return(check(m, mkgen(r), ma)))
<=(N3 * Pmac(time, N, N2))=>
  ! N3 new r: keyseed; (
    ! N gen_Oracle_1(x: bitstring) := return(mac2(x, mkgen2(r))) |
    ! N2 gen_Oracle_2(m: bitstring, ma: macs) := find j <= N suchthat defined(x[j]) && (m = x[j]) && check2(x[j], mkgen2(r), ma) then return(true) else return(false)).

(* Queries *)

channel c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, start, finish.
const A : host.
const B : host.

event beginA(host, host, key).
event endA(host, host, key).
event beginB(host, host).
event beginBkey(host, host, key).
event endB(host, host, key).

query k: key, y: host, x: host;
  event(endA(x, y, k)) ==> event(beginB(x, y)).
query k: key, y: host, x: host;
  event(endA(x, y, k)) ==> event(beginBkey(x, y, k)).
query k: key, y: host, x: host;
  event(endB(x, y, k)) ==> event(beginA(x, y, k)).










process 
	in(start, =());
new rKas: keyseed;
let Kas: key = kgen(rKas) in
new rmKas: keyseed;
let mKas: key = mkgen(rmKas) in
new rKbs: keyseed;
let Kbs: key = kgen(rKbs) in
new rmKbs: keyseed;
let mKbs: key = mkgen(rmKbs) in
out(start, ());
((
  ! i_1 <= N
  in(start[i_1], =());
  new Na: nonce;
  out(c1[i_1], (A, Na));
  in(c2[i_1], (cert1: bitstring, mac1: macs, cert2_1: bitstring, mac2_2: macs));
  if check(cert1, mKas, mac1) then
  let (b: host, mk_1: key, k_1: key, =Na, nb_1: nonce) = dec(cert1, Kas) in
  event beginA(A, b, k_1);
  new s3: seed;
  let e3: bitstring = enc(nonceToBitstring(nb_1), k_1, s3) in
  out(c3[i_1], (cert2_1, mac2_2, e3, mac(e3, mk_1)));
  in(finish[i_1], =());
  if b = B then
  (
    event endA(A, b, k_1);
    let keyA: key = k_1
  )
  else
    out(c10[i_1], k_1)
) | (
  ! i_2 <= N
  in(c4[i_2], (a: host, na_1: nonce));
  event beginB(a, B);
  new Nb: nonce;
  new s4: seed;
  let e4: bitstring = enc((a, na_1, Nb), Kbs, s4) in
  out(c5[i_2], (B, e4, mac(e4, mKbs)));
  in(c6[i_2], (cert2_2: bitstring, mac2_3: macs, m_1: bitstring, macm: macs));
  if check(cert2_2, mKbs, mac2_3) then
  let (=a, mk_2: key, k_2: key) = dec(cert2_2, Kbs) in
  event beginBkey(a, B, k_2);
  if check(m_1, mk_2, macm) then
  if nonceToBitstring(Nb) = dec(m_1, k_2) then
  if a = A then
  (
    event endB(a, B, k_2);
    let keyB: key = k_2
  )
  else
    out(c11[i_2], k_2)
) | (
  ! i_3 <= N
  in(c8[i_3], (h2: host, m_2: bitstring, ma: macs));
  find j_5 = j_6 <= N2 suchthat defined(Khost[j_6], Rmkey[j_6], Rkey[j_6]) && (Khost[j_6] = h2) then
  if check(m_2, Rmkey[j_5], ma) then
  let (h1: host, n1_1: nonce, n2_1: nonce) = dec(m_2, Rkey[j_5]) in
  find j1 = j1_1 <= N2 suchthat defined(Khost[j1_1], Rmkey[j1_1], Rkey[j1_1]) && (Khost[j1_1] = h1) then
  new kseed: keyseed;
  let k_3: key = kgen(kseed) in
  new mkseed: keyseed;
  let mk_3: key = mkgen(mkseed) in
  new s1: seed;
  new s2: seed;
  let e1: bitstring = enc((h2, mk_3, k_3, n1_1, n2_1), Rkey[j1], s1) in
  let e2: bitstring = enc((h1, mk_3, k_3), Rkey[j_5], s2) in
  out(c9[i_3], (e1, mac(e1, Rmkey[j1]), e2, mac(e2, Rmkey[j_5])))
) | (
  ! i_4 <= N2
  in(c7[i_4], (Khost: host, Kkey: key, Kmkey: key));
  let Rkey: key = (if Khost = A then Kas else if Khost = B then Kbs else Kkey) in
  let Rmkey: key = (if Khost = A then mKas else if Khost = B then mKbs else Kmkey)
))



(* EXPECTED
RESULT Could not prove event(endA(x, y, k)) ==> event(beginBkey(x, y, k)).
1.708s (user 1.708s + system 0.000s), max rss 22076K
END *)
