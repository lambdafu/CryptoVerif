type D.

(* set interactiveMode = true. *)

fun mult(D,D):D.
fun inv(D):D.
const neut:D.
equation builtin commut_group(mult,inv,neut).

fun f(D):bitstring.
fun h(D):bitstring.
fun g(D,D,D): bitstring.
fun i(D):bitstring.
fun j(D):bitstring.

equation forall x:D, y:D, z:D; f(mult(x,mult(y,z))) = g(x,y,z).
equation forall x:D, y:D; h(mult(x,mult(y,x))) = g(x,y,x).

const zero, one, two, three: D. 
equation forall x:D, y:D; i(mult(zero,mult(x,mult(y,one)))) = g(x,y,x).
equation forall x:D, y:D; j(mult(zero,mult(x,mult(one,y)))) = g(x,y,x).

channel c.

process in(c, ());
out(c, f(mult(zero, mult(one, two))));
in(c, ());
out(c, f(mult(mult(zero, one), two)));
in(c, ());
out(c, f(inv(mult(mult(zero, one), mult(two, three)))));
in(c, ());
out(c, h(mult(mult(zero, one), mult(two, three))));
in(c, ());
out(c, h(inv(mult(mult(zero, one), mult(zero, two)))));
in(c, ());
out(c, h(mult(mult(zero, one), mult(two, mult(one, zero)))));
in(c, ());
out(c, i(mult(mult(zero, one), mult(two, mult(zero, one)))));
in(c, ());
out(c, j(mult(mult(zero, one), mult(two, mult(zero, one)))));
in(c, ());
out(c, j(mult(inv(mult(zero, one)), mult(two, mult(one, zero)))));
in(c, ());
out(c, f(mult(neut, mult(one, two))));
in(c, ());
out(c, f(mult(mult(neut, one), two)));
in(c, ());
out(c, f(inv(mult(mult(neut, one), mult(two, three)))));
in(c, ());
out(c, h(mult(mult(neut, one), mult(two, three))));
in(c, ());
out(c, h(inv(mult(mult(neut, one), mult(two, neut)))));
in(c, ());
out(c, h(mult(mult(neut, one), mult(two, mult(neut, one)))));
in(c, ());
out(c, i(mult(mult(neut, one), mult(two, mult(neut, one)))));
in(c, ());
out(c, j(mult(mult(neut, one), mult(two, mult(neut, one)))));
in(c, ());
out(c, j(mult(inv(mult(neut, one)), mult(two, mult(one, neut)))))



(* EXPECTED
All queries proved.
0.028s (user 0.016s + system 0.012s), max rss 10580K
END *)
