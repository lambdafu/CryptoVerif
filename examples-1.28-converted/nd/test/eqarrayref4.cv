
(* Signed Diffie-Hellman protocol *)

param n, q, nH, N, N2, nCDH, nCDH'.

type host.
type keyseed [large,fixed].
type seed [fixed].
type pkey [bounded].
type skey [bounded].
type blocksize.
type signature.

type Z [fixed].
type G.
type K [large,fixed].
type D [fixed].

fun exp(G,Z): G.
const g:G.

fun mult(Z,Z): Z.
equation builtin commut(mult).

(* exponents multiply *)

equation forall a:G, x:Z, y:Z;
  exp(exp(a,x), y) = exp(a, mult(x,y)).

(* the CDH assumption *) 

proba pCDH.

equiv
    !n new a:Z;  (
      OA() := return(exp(g,a)) | 
      !nCDH ODDH(m:G, r:G) := return(r = exp(m,a)) |
      !nCDH' ODDH'(m:G, m':G, i'<= n, j <= nCDH') := return(exp(m,a) = exp(m', a[i'[j]]))
         (* i'[j] is not allowed *)
 )
<=(pCDH(time,n,nCDH))=>
    !n new a:Z; (
      OA() := return(exp(g,a)) |
      !nCDH ODDH(m:G, r:G) := find i'' <= n suchthat defined(a[i'']) && m = exp(g,a[i'']) then return(false) else return(r = exp(m,a)) | 
      !nCDH' ODDH'(m:G, m':G, i'<= n, j <= nCDH') := return(exp(m,a) = exp(m', a[i'[j]])) ).


(* h in the random oracle model *)

fun h(K,G): D.

equiv !n new k:K; (Ok() := return(k) | !nH OH(x:G) := return (h(k,x)))
      <=(0)=>
      !n new k:K; (Ok() := return(k) | !nH OH(x:G) := find j <= nH suchthat defined(x[j],r[j]) && x= x[j] then return(r[j]) else
			 new r:D; return(r)).

(* signatures *)

fun concatA(host, host, G, G):blocksize [data].
fun concatB(host, host, G, G):blocksize [data].
equation forall x:host, y:host, z:G, t:G, x':host, y':host, z':G, t':G;
   concatA(x,y,z,t) <> concatB(x',y',z',t').
    
proba Psign.
proba Psigncoll.

expand UF_CMA_signature(keyseed, pkey, skey, blocksize, signature, seed, skgen, pkgen, sign, check, Psign, Psigncoll).

const A,B:host.

(* query *)
query secret keyA.
query secret keyB.

channel start, cstart, cA1, cA2, cA3, cA4, cA5, cA6, cB1, cB2, cB3, cB4, cB5, cH, cHret, cK.

let processA(k: K, skA: skey) = 
  in(cA1, (hostB: host));
  new a:Z;
  let ga = exp(g,a) in
  out(cA2, (A, hostB, ga));
  in(cA3, (=A, =hostB, gb:G, s:signature));
  find j2 <= N2 suchthat defined(Khost[j2],Rkey[j2]) && (Khost[j2] = hostB) then
  let pkhostB = Rkey[j2] in
  if check(concatB(A, hostB, ga, gb), pkhostB, s) then
  new r2: seed;
  let gab = exp(gb, a) in
  let kA = h(k, gab) in 
  out(cA4, sign(concatA(A, hostB, ga, gb), skA, r2));
  (* OK *)
  in(cA5, ());
  if hostB = B then 
  (let keyA:D = kA)
  else
   out(cA6, kA).

let processB(k: K, skB: skey) =
  in(cB1, (hostA:host, =B, ga:G));
  new b:Z;
  let gb = exp(g,b) in
  new r1:seed;
  out(cB2, (hostA, B, gb, sign(concatB(hostA, B, ga, gb), skB, r1)));
  in(cB3, s:signature);
  find j2 <= N2 suchthat defined(Khost[j2],Rkey[j2]) && (Khost[j2] = hostA) then
  let pkhostA = Rkey[j2] in
  if check(concatA(hostA, B, ga, gb), pkhostA, s) then
  let gab = exp(ga, b) in
  let kB = h(k, gab) in
  (* OK *)
  if hostA = A then
  (let keyB:D = kB)
  else
   out(cB4, kB).

let processH(k:K) =
  !nH
  in(cH, xH:G);
  out(cHret, h(k,xH)).

let processK(pkA: pkey, pkB: pkey) =
  !N2
  in(cK, (Khost: host, Kkey: pkey));
  let Rkey:pkey = 
		if Khost = B then pkB else
		if Khost = A then pkA else
		Kkey.

process
	in(start, ());
	new k:K;
	new rkA : keyseed;
	let skA = skgen(rkA) in
	let pkA = pkgen(rkA) in
	new rkB : keyseed;
	let skB = skgen(rkB) in
	let pkB = pkgen(rkB) in
	out(cstart, (k, pkA, pkB));
	((!N processA(k,skA)) | (!N processB(k,skB)) | processH(k) | processK(pkA,pkB))


(* EXPECTED
Error: Incorrect array reference: argument index should have no indices
xtime: error in child process (status : 2)
END *)
