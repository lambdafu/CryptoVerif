(* Needham Schroeder public key protocol, 
   with key = H(Na,Nb). *)

(* set interactiveMode = true. *)

proof {
SArename Rkey;
crypto sign rkS;
success; (* shows fullA(B, k, x) && fullB(A, k', x) ==> k = k' *)
crypto enc rkA;
crypto enc rkB;
crypto hash;  (* SArename Na_24, simplify done automatically *)
success;  (* shows inj:partA(B, x) ==> inj:partB(A, x) && secrecy key *)
auto
}


(* 

SArename Nb_33
simplify
SArename Na_24
simplify
success

 *)


param N.
param N2.
param N3.
param N4.

type nonce [large,fixed].
type host [bounded].
type pkey [bounded].
type skey [bounded].
type keyseed [large,fixed].
type seed [fixed].
type spkey [bounded].
type sskey [bounded].
type skeyseed [large,fixed].
type sseed [fixed].
type signature [bounded].
type blocksize [large,fixed].
type blocksizebot [large,bounded].
type sblocksize [large,bounded].
type shkey [large,fixed].

fun concat1(nonce, host):blocksize [data].
fun concat2(nonce, nonce, host):blocksize [data].
fun concat3(pkey, host):sblocksize [data].
fun pad(nonce):blocksize [data].

equation forall z:nonce,t:nonce,u:host,y2:nonce,z2:host;
	concat2(z,t,u) <> concat1(y2,z2).
equation forall y:nonce,y2:nonce,z2:host;
	pad(y) <> concat1(y2,z2).
equation forall z:nonce,t:nonce,u:host,y2:nonce;
	concat2(z,t,u) <> pad(y2).

(* Public-key encryption (CCA2) *)

proba Penc.
proba Penccoll.

fun enc(blocksize, pkey, seed): bitstring.
fun skgen(keyseed):skey.
fun pkgen(keyseed):pkey.
fun dec(bitstring, skey): blocksizebot.

fun enc2(blocksize, pkey, seed): bitstring.
fun skgen2(keyseed):skey.
fun pkgen2(keyseed):pkey.
fun dec2(bitstring, skey): blocksizebot.

fun injbot(blocksize):blocksizebot [data].

const Z:blocksize.

equation forall m:blocksize, r:keyseed, r2:seed; 
	dec(enc(m, pkgen(r), r2), skgen(r)) = injbot(m).
equation forall m:blocksize, r:keyseed, r2:seed; 
	dec2(enc2(m, pkgen2(r), r2), skgen2(r)) = injbot(m).

equation forall m:blocksize, m':blocksize, x:pkey, r:seed;
	(enc(m, x, r) = enc(m', x, r)) = (m = m').

equiv
  ! N3 new r: keyseed; (
    gen_Oracle() := return(pkgen(r)) |
    ! N2 gen_Oracle_1(m: bitstring) := return(dec(m, skgen(r))))|
  ! N4 new r2: seed; gen_Oracle_2(x: blocksize, y: pkey) := return(enc(x,y,r2)) [all]
<=(N3 * N4 * Penc(time, N2))=>
  ! N3 new r: keyseed; (
    gen_Oracle() := return(pkgen2(r)) |
    ! N2 gen_Oracle_1(m: bitstring) := find j <= N4 suchthat defined(m2[j], y[j], x[j]) && y[j] = pkgen2(r) && m = m2[j] then return(injbot(x[j])) else return(dec2(m, skgen2(r))))|
  ! N4 gen_Oracle_2(x: blocksize, y: pkey) := find k <= N3 suchthat defined(r[k]) && (y = pkgen2(r[k])) then (new r2: seed; let m2:bitstring = enc2(Z, y, r2) in return(m2)) else new r3: seed; return(enc(x,y,r3)).

collision new r1: keyseed; new r2: keyseed; return(pkgen(r1) = pkgen(r2)) <=(Penccoll)=> return(r1 = r2).
collision new r1: keyseed; new r2: keyseed; return(pkgen2(r1) = pkgen2(r2)) <=(Penccoll)=> return(r1 = r2).
collision new r1: keyseed; new r2: keyseed; return(skgen(r1) = skgen(r2)) <=(Penccoll)=> return(r1 = r2).
collision new r1: keyseed; new r2: keyseed; return(skgen2(r1) = skgen2(r2)) <=(Penccoll)=> return(r1 = r2).

(* Signatures *)

proba Psign.
proba Psigncoll.

fun sign(sblocksize, sskey, sseed): signature.
fun sskgen(skeyseed):sskey.
fun spkgen(skeyseed):spkey.
fun check(sblocksize, spkey, signature): bool.

fun sign2(sblocksize, sskey, sseed): signature.
fun sskgen2(skeyseed):sskey.
fun spkgen2(skeyseed):spkey.
fun check2(sblocksize, spkey, signature): bool.

equation forall m:sblocksize, r:skeyseed, r2:sseed; 
	check(m, spkgen(r), sign(m, sskgen(r), r2)) = true.
equation forall m:sblocksize, r:skeyseed, r2:sseed; 
	check2(m, spkgen2(r), sign2(m, sskgen2(r), r2)) = true.

equiv
  ! N3 new r: skeyseed; (
    gen_Oracle_1() := return(spkgen(r)) |
    ! N2 new r2: sseed; gen_Oracle_2(x: sblocksize) := return(sign(x, sskgen(r), r2)))|
  ! N4 gen_Oracle_3(m: sblocksize, y: spkey, si: signature) := return(check(m, y, si)) [all]
<=(N3 * Psign(time, N2))=>
  ! N3 new r: skeyseed; (
    gen_Oracle_1() := return(spkgen2(r)) |
    ! N2 new r2: sseed; gen_Oracle_2(x: sblocksize) := return(sign2(x, sskgen2(r), r2)))|
  ! N4 gen_Oracle_3(m: sblocksize, y: spkey, si: signature) := find j <= N2, k <= N3 suchthat defined(x[j, k], r[k]) && y = spkgen2(r[k]) && m = x[j,k] && check2(m, y, si) then return(true) else find k <= N3 suchthat defined(r[k]) && (y = spkgen2(r[k])) then return(false) else return(check(m,y,si)).

collision new r1: skeyseed; new r2: skeyseed; return(spkgen(r1) = spkgen(r2)) <=(Psigncoll)=> return(r1 = r2).
collision new r1: skeyseed; new r2: skeyseed; return(spkgen2(r1) = spkgen2(r2)) <=(Psigncoll)=> return(r1 = r2).
collision new r1: skeyseed; new r2: skeyseed; return(sskgen(r1) = sskgen(r2)) <=(Psigncoll)=> return(r1 = r2).
collision new r1: skeyseed; new r2: skeyseed; return(sskgen2(r1) = sskgen2(r2)) <=(Psigncoll)=> return(r1 = r2).

(* Hash function, random oracle model *)

fun hash(bitstring):shkey.

equiv
  ! N gen_Oracle_1(x: bitstring) := return(hash(x)) [all]
<=(0)=>
  ! N gen_Oracle_1(x: bitstring) := find j <= N suchthat defined(x[j], r[j]) && (x= x[j]) then return(r[j]) else new r: shkey; return(r).

(* Queries *)

channel c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, 
	c15, c16, c17, c18, c19, start, cBK, cAK.
const A : host.
const B : host.
fun acceptA(host):bitstring.
fun acceptB(host):bitstring.

event fullA(host, shkey, bitstring).
event partA(host, bitstring).
event fullB(host, shkey, bitstring).
event partB(host, bitstring).

query x: bitstring;
  inj-event(partA(B, x)) ==> inj-event(partB(A, x)) public_vars keyA.
query x: bitstring, k: shkey;
  inj-event(fullB(A, k, x)) ==> inj-event(fullA(B, k, x)) public_vars keyA. (* Not shown - 7/10/2016: now shown *)
query k': shkey, x: bitstring, k: shkey;
  inj-event(fullB(A, k, x)) ==> inj-event(fullA(B, k', x)) public_vars keyA. (* Not shown - 7/10/2016: now shown *)
query k': shkey, x: bitstring, k: shkey;
  event(fullA(B, k, x)) && event(fullB(A, k', x)) ==> (k = k') public_vars keyA.
query secret keyA.

(* When k is removed from fullB/fullA, the prover shows:
query x:bitstring;
	event inj:fullB(A, x) ==> inj:fullA(B, x).
This is sufficient to infer the desired property, since
k is a function of the second message of the protocol included in x,
and the same function for both participants. Note that 
in B, pkY = pkA since hostY = A by the event fullB(A, x). *)









process 
	in(start, ());
new rkA: keyseed;
let pkA: pkey = pkgen(rkA) in
let skA: skey = skgen(rkA) in
new rkB: keyseed;
let pkB: pkey = pkgen(rkB) in
let skB: skey = skgen(rkB) in
new rkS: skeyseed;
let pkS: spkey = spkgen(rkS) in
let skS: sskey = sskgen(rkS) in
out(c15, (pkA, pkB, pkS));
((
  ! i_1 <= N
  in(c1[i_1], hostX: host);
  out(c2[i_1], (A, hostX));
  in(c3[i_1], (pkX: pkey, =hostX, ms_1: signature));
  if check(concat3(pkX, hostX), pkS, ms_1) then
  new Na_1: nonce;
  new r3_1: seed;
  let m1: bitstring = enc(concat1(Na_1, A), pkX, r3_1) in
  out(c4[i_1], m1);
  in(c5[i_1], m_1: bitstring);
  let injbot(concat2(=Na_1, Nb: nonce, =hostX)) = dec(m_1, skA) in
  new r4: seed;
  let m3: bitstring = enc(pad(Nb), pkX, r4) in
  let k_1: shkey = hash((Na_1, Nb)) in
  event partA(hostX, (m1, m_1));
  event fullA(hostX, k_1, (m1, m_1, m3));
  if hostX = B then
  (
    let keyA: shkey = k_1 in
    out(c6[i_1], (m3, acceptA(hostX)))
  )
  else
    out(c6[i_1], (m3, acceptA(hostX)));
    in(cAK[i_1], ());
    out(cAK[i_1], k_1)
) | (
  ! i_2 <= N
  in(c7[i_2], m_2: bitstring);
  let injbot(concat1(Na_2: nonce, hostY: host)) = dec(m_2, skB) in
  out(c8[i_2], (B, hostY));
  in(c9[i_2], (pkY: pkey, =hostY, ms_2: signature));
  if check(concat3(pkY, hostY), pkS, ms_2) then
  new Nb_1: nonce;
  new r5: seed;
  let m2: bitstring = enc(concat2(Na_2, Nb_1, B), pkY, r5) in
  event partB(hostY, (m_2, m2));
  out(c10[i_2], m2);
  in(c11[i_2], m3_1: bitstring);
  let injbot(pad(=Nb_1)) = dec(m3_1, skB) in
  let k_2: shkey = hash((Na_2, Nb_1)) in
  event fullB(hostY, k_2, (m_2, m2, m3_1));
  if hostY = A then
    out(c17[i_2], acceptB(hostY))
  else
    out(c17[i_2], acceptB(hostY));
    in(cBK[i_2], ());
    out(cBK[i_2], k_2)
) | (
  ! i_3 <= N
  in(c13[i_3], (h1: host, h2: host));
  find j2 = j2_1 <= N2 suchthat defined(Khost[j2_1], Rkey[j2_1]) && (Khost[j2_1] = h2) then
  new r3_2: sseed;
  out(c14[i_3], (Rkey[j2], h2, sign(concat3(Rkey[j2], h2), skS, r3_2)))
) | (
  ! i_4 <= N2
  in(c12[i_4], (Khost: host, Kkey: pkey));
  let Rkey: pkey = (if Khost = A then pkA else if Khost = B then pkB else Kkey)
) | (
  ! i_5 <= N3
  in(c18[i_5], x: bitstring);
  out(c19[i_5], hash(x))
))




(* EXPECTED
All queries proved.
19.412s (user 19.396s + system 0.016s), max rss 40216K
END *)
