(* Denning-Sacco key distribution protocol. *)

(* To prove this protocol, it is important to apply the security of the 
   encryption for pkB before applying the security of the signature for pkA.
   Otherwise, we need either to reapply the security of the signature
   for pkA (which is not possible in our prover), or perhaps to use 
   non-malleability of encryption, which is problematic as well.

   For now, this order of application is enforced by putting the
   definition of signature before the definition of encryption.
   Obviously, in the future, we should find some other way (backtracking?)
*)

(* Proof found by the system:
- apply security of encryption (rkB)
- apply security of signature (rkS)
- apply security of signature (rkA)
*)

param N.
param N2.
param N3.
param N4.

type nonce [large,fixed].
type host.
type key.
type keyseed [large,fixed].
type seed [fixed].
type signature.
type blocksize [fixed].
type blocksizebot.
type skey [fixed]. (* distributed key *)

fun concat1(skey, host, host, signature):blocksize [data].
fun concat2(skey, host, host):blocksize [data].
fun concat3(host, key):blocksize [data].

equation forall y:host,z:key,y2:skey,z2:host,t2:host;	
	concat3(y,z) <> concat2(y2,z2,t2).

(* Signatures *)

proba Psign.
proba Psigncoll.

fun sign(blocksize, key, seed): signature.
fun sskgen(keyseed):key.
fun spkgen(keyseed):key.
fun check(blocksize, key, signature): bool.

fun sign2(blocksize, key, seed): signature.
fun sskgen2(keyseed):key.
fun spkgen2(keyseed):key.
fun check2(blocksize, key, signature): bool.

equation forall m:blocksize, r:keyseed, r2:seed; 
	check(m, spkgen(r), sign(m, sskgen(r), r2)) = true.
equation forall m:blocksize, r:keyseed, r2:seed; 
	check2(m, spkgen2(r), sign2(m, sskgen2(r), r2)) = true.

equiv
  ! N3 new r: keyseed; (
    ! N gen_Oracle() := return(spkgen(r)) |
    ! N2 new r2: seed; gen_Oracle_1(x: blocksize) := return(sign(x, sskgen(r), r2)))|
  ! N4 gen_Oracle_2(m: blocksize, y: key, si: signature) := return(check(m, y, si)) [all]
<=(N3 * Psign(time, N2))=>
  ! N3 new r: keyseed; (
    ! N gen_Oracle() := return(spkgen2(r)) |
    ! N2 new r2: seed; gen_Oracle_1(x: blocksize) := return(sign2(x, sskgen2(r), r2)))|
  ! N4 gen_Oracle_2(m: blocksize, y: key, si: signature) := find j <= N2, k <= N3 suchthat defined(x[j, k], r[k]) && y = spkgen2(r[k]) && m = x[j,k] && check2(m, y, si) then return(true) else find k <= N3 suchthat defined(r[k]) && (y = spkgen2(r[k])) then return(false) else return(check(m,y,si)).

collision new r1: keyseed; new r2: keyseed; return(spkgen(r1) = spkgen(r2)) <=(Psigncoll)=> return(r1 = r2).
collision new r1: keyseed; new r2: keyseed; return(spkgen2(r1) = spkgen2(r2)) <=(Psigncoll)=> return(r1 = r2).
collision new r1: keyseed; new r2: keyseed; return(sskgen(r1) = sskgen(r2)) <=(Psigncoll)=> return(r1 = r2).
collision new r1: keyseed; new r2: keyseed; return(sskgen2(r1) = sskgen2(r2)) <=(Psigncoll)=> return(r1 = r2).

(* Public-key encryption (CCA2) *)

proba Penc.
proba Penccoll.

fun enc(blocksize, key, seed): bitstring.
fun skgen(keyseed):key.
fun pkgen(keyseed):key.
fun dec(bitstring, key): blocksizebot.

fun enc2(blocksize, key, seed): bitstring.
fun skgen2(keyseed):key.
fun pkgen2(keyseed):key.
fun dec2(bitstring, key): blocksizebot.

fun injbot(blocksize):blocksizebot [data].

const Z:blocksize.

equation forall m:blocksize, r:keyseed, r2:seed; 
	dec(enc(m, pkgen(r), r2), skgen(r)) = injbot(m).
equation forall m:blocksize, r:keyseed, r2:seed; 
	dec2(enc2(m, pkgen2(r), r2), skgen2(r)) = injbot(m).

equiv
  ! N3 new r: keyseed; (
    ! N gen_Oracle_1() := return(pkgen(r)) |
    ! N2 gen_Oracle_2(m: bitstring) := return(dec(m, skgen(r))))|
  ! N4 new r2: seed; gen_Oracle_3(x: blocksize, y: key) := return(enc(x,y,r2)) [all]
<=(N3 * Penc(time, N2))=>
  ! N3 new r: keyseed; (
    ! N gen_Oracle_1() := return(pkgen2(r)) |
    ! N2 gen_Oracle_2(m: bitstring) := find j <= N4 suchthat defined(m2[j], y[j], x2[j]) && y[j] = pkgen2(r) && m = m2[j] then return(injbot(x2[j])) else return(dec2(m, skgen2(r))))|
  ! N4 new r2: seed; new r3: seed; gen_Oracle_3(x: blocksize, y: key) := find k <= N3 suchthat defined(r[k]) && (y = pkgen2(r[k])) then (let x2:blocksize = x in (let m2:bitstring = enc2(Z, y, r2) in return(m2))) else return(enc(x,y,r3)).

collision new r1: keyseed; new r2: keyseed; return(pkgen(r1) = pkgen(r2)) <=(Penccoll)=> return(r1 = r2).
collision new r1: keyseed; new r2: keyseed; return(pkgen2(r1) = pkgen2(r2)) <=(Penccoll)=> return(r1 = r2).
collision new r1: keyseed; new r2: keyseed; return(skgen(r1) = skgen(r2)) <=(Penccoll)=> return(r1 = r2).
collision new r1: keyseed; new r2: keyseed; return(skgen2(r1) = skgen2(r2)) <=(Penccoll)=> return(r1 = r2).

(* Queries *)

query secret keyA.
query secret keyB.
query secret keyA [cv_onesession].
query secret keyB [cv_onesession].

channel c1, c2, c3, c4, c5, c6, c7, c8, c9, start, finish.

const A : host.
const B : host.

event beginA(host, host, skey).
event endB(host, host, skey).

query k: skey, y: host, x: host;
  event(endB(x, y, k)) ==> event(beginA(x, y, k)) public_vars keyA, keyB.









process 
	in(start, =());
new rkA: keyseed;
let pkA: key = spkgen(rkA) in
let skA: key = sskgen(rkA) in
new rkB: keyseed;
let pkB: key = pkgen(rkB) in
let skB: key = skgen(rkB) in
new rkS: keyseed;
let pkS: key = spkgen(rkS) in
let skS: key = sskgen(rkS) in
out(c7, (pkA, pkB, pkS));
((
  ! i_1 <= N
  in(c1[i_1], (=A, =pkA, cert1_1: signature, hostX: host, pkX: key, cert2_1: signature));
  if check(concat3(A, pkA), pkS, cert1_1) then
  if check(concat3(hostX, pkX), pkS, cert2_1) then
  new k_2: skey;
  new r1: seed;
  new r2: seed;
  event beginA(A, hostX, k_2);
  out(c2[i_1], (A, pkA, cert1_1, hostX, pkX, cert2_1, enc(concat1(k_2, A, hostX, sign(concat2(k_2, A, hostX), skA, r1)), pkX, r2)));
  in(finish[i_1], =());
  if hostX = B then
  (
    let keyA: skey = k_2
  )
  else
    out(c8[i_1], k_2)
) | (
  ! i_2 <= N
  in(c3[i_2], (hostY: host, pkY: key, cert1_2: signature, =B, =pkB, cert2_2: signature, m: bitstring));
  if check(concat3(hostY, pkY), pkS, cert1_2) then
  if check(concat3(B, pkB), pkS, cert2_2) then
  let injbot(concat1(k_3: skey, =hostY, =B, s: signature)) = dec(m, skB) in
  if check(concat2(k_3, hostY, B), pkY, s) then
  if hostY = A then
  (
    event endB(hostY, B, k_3);
    let keyB: skey = k_3
  )
  else
    out(c9[i_2], k_3)
) | (
  ! i_3 <= N
  in(c5[i_3], (h1: host, h2: host));
  if h2 = A then
    new r3_1: seed;
    out(c6[i_3], (h2, pkA, sign(concat3(h2, pkA), skS, r3_1)))
  else
    if h2 = B then
      new r3_2: seed;
      out(c6[i_3], (h2, pkB, sign(concat3(h2, pkB), skS, r3_2)))
    else
      find j2 = j2_1 <= N2 suchthat defined(Khost[j2_1], Kkey[j2_1]) && (Khost[j2_1] = h2) then
      new r3_3: seed;
      out(c6[i_3], (h2, Kkey[j2], sign(concat3(h2, Kkey[j2]), skS, r3_3)))
) | (
  ! i_4 <= N2
  in(c4[i_4], (Khost: host, Kkey: key))
))




(* EXPECTED
RESULT Could not prove secrecy of keyB.
0.332s (user 0.324s + system 0.008s), max rss 13536K
END *)
