
(* Signed Diffie-Hellman protocol *)

param n, q, nH, N, N2, nCDH, nCDH', n1, n2, n3.

type host.
type keyseed [large,fixed].
type seed [fixed].
type pkey [bounded].
type skey [bounded].
type blocksize.
type signature.

type Z [fixed].
type G [fixed].
type K [large,fixed].
type D [fixed].

fun exp(G,Z): G.
const g:G.

fun mult(Z,Z): Z.
equation builtin commut(mult).

(* exponents multiply *)

equation forall a:G, x:Z, y:Z;
  exp(exp(a,x), y) = exp(a, mult(x,y)).

(* the DDH assumption 

This does not work for two reasons:
1) a and b both get mapped to x (or perhaps both to y), as CryptoVerif
does not know a priori whether exp(g,x) or exp(g,y) should be used.
2) the fact that mult is commutative is not fully taken into account:
since the mapping z = exp(g, mult(x,y)) succeeds apparently,
the mapping z = exp(g, mult(y,x)) is not tried, but the transformation
will later fail when we check that the mappings of several expressions
are compatible.
These two problems could be considered bugs in the transformation mechanism,
since not all possibilities are considered. 

examplesnd/test/signedDH-simp-cv_onesession-distinctexp-DDH considers a modified
equivalence that solves these problems.
*) 

proba pDDH.

equiv
  ! n new x: Z; new y: Z; (
    gen_Oracle() := return(exp(g,x)) |
    gen_Oracle_1() := return(exp(g,y)) |
    gen_Oracle_2() := return(exp(g, mult(x,y))))
<=(pDDH(time) * n)=>
  ! n new x: Z; new y: Z; new z: Z; (
    gen_Oracle() := return(exp(g,x)) |
    gen_Oracle_1() := return(exp(g,y)) |
    gen_Oracle_2() := return(exp(g, z))).



(* h(K) is an entropy-smoothing hash-function family *)

fun h(K,G): D.

proba pESF.

equiv
  ! n new k: K; new delta: G; (
    gen_Oracle_1() := return(k) |
    gen_Oracle_2() := return(h(k,delta)))
<=(pESF(time) * n)=>
  ! n new k: K; new hash: D; (
    gen_Oracle_1() := return(k) |
    gen_Oracle_2() := return(hash)).


(* signatures *)

fun concatA(host, host, G, G):blocksize [data].
fun concatB(host, host, G, G):blocksize [data].
equation forall x:host, y:host, z:G, t:G, x':host, y':host, z':G, t':G;
   concatA(x,y,z,t) <> concatB(x',y',z',t').
    
proba Psign.
proba Psigncoll.

expand UF_CMA_signature(keyseed, pkey, skey, blocksize, signature, seed, skgen, pkgen, sign, check, Psign, Psigncoll).

const A,B:host.

(* query *)
query secret keyA.
query secret keyB.

channel start, cstart, cA1, cA2, cA3, cA4, cA5, cA6, cB1, cB2, cB3, cB4, cB5, cH, cHret, cK.





process
	in(start, ());
new k_1: K;
new rkA: keyseed;
let skA: skey = skgen(rkA) in
let pkA: pkey = pkgen(rkA) in
new rkB: keyseed;
let skB: skey = skgen(rkB) in
let pkB: pkey = pkgen(rkB) in
out(cstart, (k_1, pkA, pkB));
((
  in(cA1, hostB: host);
  if hostB = B then
  (
    new a_1: Z;
    let ga: G = exp(g, a_1) in
    out(cA2, (A, hostB, ga));
    in(cA3, (=A, =hostB, gb_1: G, s_1: signature));
    if check(concatB(A, hostB, ga, gb_1), pkB, s_1) then
    new r2_2: seed;
    let gab: G = exp(gb_1, a_1) in
    let kA: D = h(k_1, gab) in
    out(cA4, sign(concatA(A, hostB, ga, gb_1), skA, r2_2));
    in(cA5, ());
    let keyA: D = kA
  )
  else
    new a_2: Z;
    let ga_1: G = exp(g, a_2) in
    out(cA2, (A, hostB, ga_1));
    in(cA3, (=A, =hostB, gb_2: G, s_2: signature));
    new r2_3: seed;
    let gab_1: G = exp(gb_2, a_2) in
    let kA_1: D = h(k_1, gab_1) in
    out(cA4, sign(concatA(A, hostB, ga_1, gb_2), skA, r2_3));
    in(cA5, ());
    out(cA6, kA_1)
) | (
  in(cB1, (hostA: host, =B, ga_2: G));
  if hostA = A then
  (
    new b_1: Z;
    let gb_3: G = exp(g, b_1) in
    new r1_2: seed;
    out(cB2, (hostA, B, gb_3, sign(concatB(hostA, B, ga_2, gb_3), skB, r1_2)));
    in(cB3, s_3: signature);
    if check(concatA(hostA, B, ga_2, gb_3), pkA, s_3) then
    let gab_2: G = exp(ga_2, b_1) in
    let kB: D = h(k_1, gab_2) in
    let keyB: D = kB
  )
  else
    new b_2: Z;
    let gb_4: G = exp(g, b_2) in
    new r1_3: seed;
    out(cB2, (hostA, B, gb_4, sign(concatB(hostA, B, ga_2, gb_4), skB, r1_3)));
    in(cB3, s_4: signature);
    let gab_3: G = exp(ga_2, b_2) in
    let kB_1: D = h(k_1, gab_3) in
    out(cB4, kB_1)
))




(* EXPECTED
RESULT Could not prove secrecy of keyB; secrecy of keyA.
0.084s (user 0.068s + system 0.016s), max rss 42256K
END *)
