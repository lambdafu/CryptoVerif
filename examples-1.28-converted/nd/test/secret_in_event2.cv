(* FDH signature scheme *)

param qS.

type pkey [bounded].
type skey [bounded].
type seed [large,fixed].
type D [fixed].

(* One-way trapdoor permutation *)

proba POW.

def OW_trapdoor_perm2(seed, pkey, skey, D, pkgen, skgen, f, invf, POW) {

param nK, nf, n2.

const mark:bitstring.
fun pkgen(seed):pkey.
fun pkgen'(seed):pkey.
fun skgen(seed):skey.
fun f(pkey, D):D.
fun f'(pkey, D):D.
fun invf(skey, D):D.

(* invf is the inverse of f *)

equation forall r:seed, x:D; invf(skgen(r), f(pkgen(r), x)) = x.

(* f is the inverse of invf *)

equation forall r:seed, x:D; f(pkgen(r), invf(skgen(r), x)) = x.

(* Injectivity of f *)

equation forall k:pkey, x:D, x':D; (f(k,x) = f(k,x')) = (x = x').
equation forall k:pkey, x:D, x':D; (f'(k,x) = f'(k,x')) = (x = x').

(* injectivity of invf *)

equation forall k:skey, x:D, x':D; (invf(k,x) = invf(k,x')) = (x = x').

(* f/invf are inverse permutations; use this to remove some
   occurrences of invf in equality tests *)

equation forall r:seed, x:D, x':D; 
	(x' = invf(skgen(r),x)) = (f(pkgen(r),x') = x).

(* We can permute the distribution, for uniformly distributed random
   numbers x. Do that only when x is used in invf(skgen(r),x) *)

equiv
  ! nK new r: seed; (
    Opk() := return(pkgen(r)) |
    ! nf new x: D; (
      Oant() := return(invf(skgen(r),x)) |
      Oim() := return(x)))
<=(0)=> [computational]
  ! nK new r: seed [unchanged]; (
    Opk() := return(pkgen(r)) |
    ! nf new x: D; (
      Oant() := return(x) |
      Oim() := return(f(pkgen(r), x)))).

(* One-wayness *)

equiv
  ! nK new r: seed; (
    Opk() := return(pkgen(r)) |
    ! nf new x: D; (
      Oy() := return(f(pkgen(r), x)) |
      ! n2 Oeq(x': D) := return(x' = x) |
      Ox() := return(x)))
<=(nK * nf * POW(time + (nK-1) * time(pkgen) + (#Oy-1) * time(f)))=> [computational]
  ! nK new r: seed; (
    Opk() := return(pkgen'(r)) |
    ! nf new x: D [unchanged]; (
      Oy() := return(f'(pkgen'(r), x)) |
      ! n2 Oeq(x': D) := if defined(k) then return(x' = x) else return(false) |
      Ox() := let k:bitstring = mark in return(x))).

}


expand OW_trapdoor_perm2(seed, pkey, skey, D, pkgen, skgen, f, invf, POW).

(* Hash function, random oracle model *)

type hashkey [fixed].

expand ROM_hash(hashkey, bitstring, D, hash).

param qH [noninteractive].
channel hc1, hc2.


(* Queries *)

event bad(skey).
query x: skey;
  event(bad(x)) ==> false.

channel c0, c1, c2, c3, c4, c5, start.





process 
	(in(start, ());
new hk: hashkey;
new r_2: seed;
let pk: pkey = pkgen(r_2) in
let sk: skey = skgen(r_2) in
out(c0, pk);
((
  ! i_1 <= qS
  in(c1[i_1], m: bitstring);
  out(c2[i_1], invf(sk, hash(hk, m)))
) | (
  in(c3, (m': bitstring, s: D));
  if f(pk, s) = hash(hk, m') then
  find u = u_1 <= qS suchthat defined(m[u_1]) && (m' = m[u_1]) then
    yield
  else
    event bad(sk)
) | (
  ! i_2 <= qH
  in(hc1[i_2], x_2: bitstring);
  out(hc2[i_2], hash(hk, x_2))
))

)


(* EXPECTED
RESULT Could not prove event(bad(x)) ==> false.
0.040s (user 0.036s + system 0.004s), max rss 40352K
END *)
