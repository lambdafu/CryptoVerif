(* Denning-Sacco key distribution protocol. (corrected version) *)

(* In order to determine the proof, use interactive mode: 
   set interactiveMode = true.
The proof is as follows: *)

proof {
  crypto ind_cca2(enc) rkB;
  crypto uf_cma(sign) rkS;
  crypto uf_cma(sign) rkA;
  success;
  auto
}

(*

For the proof to succeed, it is important that "crypto enc rkB" is 
applied before "crypto sign rkA". This is because, when
A talks to B and we apply "crypto enc rkB", we replace the plaintext
with Z, and reuse the plaintext directly at the decryption site in
B, then by simplify check(..., pkA, sign(..., skA, r)) cancels out, and 
the computation of the signature under skA in this case disappears.
There is then one case less to consider when applying "crypto sign rkA".

*)

param N.
param N2.
param N3.
param N4.

type host [bounded].
type pkey [bounded].
type skey [bounded].
type keyseed [large,fixed].
type seed [fixed].
type spkey [bounded].
type sskey [bounded].
type skeyseed [large,fixed].
type sseed [fixed].
type signature [bounded].
type blocksize [fixed].
type blocksizebot [bounded].
type sblocksize [bounded].
type shkey [fixed]. (* distributed key *)

fun concat1(shkey, host, host, signature):blocksize [data].
fun concat2(shkey, host, host):sblocksize [data].
fun concat3(host, pkey):sblocksize [data].
fun concat4(host, spkey):sblocksize [data].

equation forall y:host,z:pkey,y2:shkey,z2:host,t2:host;
        concat3(y,z) <> concat2(y2,z2,t2).
equation forall y:host,z:pkey,y2:host,z2:spkey;	
	concat3(y,z) <> concat4(y2,z2).
equation forall y:host,z:spkey,y2:shkey,z2:host,t2:host;
        concat4(y,z) <> concat2(y2,z2,t2).

(* Public-key encryption (CCA2) *)

proba Penc.
proba Penccoll.

expand IND_CCA2_public_key_enc(keyseed, pkey, skey, blocksize, bitstring, seed, skgen, pkgen, enc, dec, injbot, Z, Penc, Penccoll).

(* Signatures *)

proba Psign.
proba Psigncoll.

expand UF_CMA_signature(skeyseed, spkey, sskey, sblocksize, signature, sseed, sskgen, spkgen, sign, check, Psign, Psigncoll).

(* Queries *)

query secret keyA [cv_onesession].
query secret keyB [cv_onesession].
query secret keyA.
query secret keyB.

const A : host.
const B : host.

event beginA(host, host, shkey).
event endB(host, host, shkey).

query k: shkey, y: host, x: host;
  event(endB(x, y, k)) ==> event(beginA(x, y, k)) public_vars keyA, keyB.
query k: shkey, y: host, x: host;
  inj-event(endB(x, y, k)) ==> inj-event(beginA(x, y, k)) public_vars keyA, keyB.













process 
	Ostart() :=
rkA <-R skeyseed;
pkA: spkey <- spkgen(rkA);
skA: sskey <- sskgen(rkA);
rkB <-R keyseed;
pkB: pkey <- pkgen(rkB);
skB: skey <- skgen(rkB);
rkS <-R skeyseed;
pkS: spkey <- spkgen(rkS);
skS: sskey <- sskgen(rkS);
return(pkA, pkB, pkS);
((
  foreach iA <= N do
  OA1(=A, =pkA, cert1_1: signature, hostX: host, pkX: pkey, cert2_1: signature) :=
  if check(concat4(A, pkA), pkS, cert1_1) then
  if check(concat3(hostX, pkX), pkS, cert2_1) then
  k_3 <-R shkey;
  r1_2 <-R sseed;
  r2_2 <-R seed;
  event beginA(A, hostX, k_3);
  return(A, pkA, cert1_1, hostX, pkX, cert2_1, enc(concat1(k_3, A, hostX, sign(concat2(k_3, A, hostX), skA, r1_2)), pkX, r2_2));
  OAfinish() :=
  if hostX = B then
    keyA: shkey <- k_3
  else
    return(k_3)
) | (
  foreach iB <= N do
  OB1(hostY: host, pkY: spkey, cert1_2: signature, =B, =pkB, cert2_2: signature, m_2: bitstring) :=
  if check(concat4(hostY, pkY), pkS, cert1_2) then
  if check(concat3(B, pkB), pkS, cert2_2) then
  let injbot(concat1(k_4: shkey, =hostY, =B, s: signature)) = dec(m_2, skB) in
  if check(concat2(k_4, hostY, B), pkY, s) then
  if hostY = A then
    event endB(hostY, B, k_4);
    keyB: shkey <- k_4
  else
    return(k_4)
) | (
  foreach iS <= N do
  OS(h1_1: host, h2_1: host) :=
  find j2_3 = j2_1 <= N2 suchthat defined(Khost[j2_1], Rkey[j2_1]) && (Khost[j2_1] = h2_1) then
  r3_2 <-R sseed;
  return(h2_1, Rkey[j2_3], sign(concat3(h2_1, Rkey[j2_3]), skS, r3_2))
) | (
  foreach iSS <= N do
  OSS(h1_2: host, h2_2: host) :=
  find j2_4 = j2_2 <= N2 suchthat defined(SKhost[j2_2], SRkey[j2_2]) && (SKhost[j2_2] = h2_2) then
  r3_3 <-R sseed;
  return(h2_2, SRkey[j2_4], sign(concat4(h2_2, SRkey[j2_4]), skS, r3_3))
) | (
  foreach iK <= N2 do
  OK(Khost: host, Kkey: pkey) :=
  Rkey: pkey <- (if Khost = B then pkB else Kkey)
) | (
  foreach iSK <= N2 do
  OSK(SKhost: host, SKkey: spkey) :=
  SRkey: spkey <- (if SKhost = A then pkA else SKkey)
))




(* EXPECTED
RESULT Could not prove inj-event(endB(x, y, k)) ==> inj-event(beginA(x, y, k)) with public variables keyA, keyB; secrecy of keyB.
0.200s (user 0.192s + system 0.008s), max rss 15132K
END *)
