
(** Chosen ciphertext secure symmetric encryption **)

(** The construction of an encryption scheme 
    using a pseudo-random function family
    and an unpredictable function family
    is shown to be IND-CCA2.
    See Section 7, "Sequences of Games", Victor Shoup. **)

param n, m, p, q, qE, qD.

type seed [large,fixed].
type S [large,fixed].
type K [large,fixed].

type N [large,fixed].
type L [fixed].
type W [fixed].

proba pPRF.
proba pUF.
proba pXOR.

(* f(S) is a pseudo-random function family *) 

expand PRF(seed, S, N, L, kgen, f, pPRF).

(* h(K) is a message authentication code (an unpredictable function family) *)

fun h(K,N,L): W.
fun h'(K,N,L): W.

equiv
  foreach i <= n do k <-R K; (
    foreach im <= m do Omac(y: N, z: L) := return(h(k,y,z)) |
    foreach ip <= p do Ocheck(y': N, z': L, t: W) := return(t = h(k,y',z')))
<=(pUF(time,n,m,p))=>
  foreach i <= n do k <-R K; (
    foreach im <= m do Omac(y: N, z: L) := return(h'(k,y,z)) |
    foreach ip <= p do Ocheck(y': N, z': L, t: W) := find u <= m suchthat defined(y[u], z[u]) && y' = y[u] && z' = z[u] then return(t = h'(k,y',z')) else return(false)).

fun xor(L,L): L.

(* the theory of xor implies several propositions *)

forall x:L, y:L; xor(x, xor(x,y)) = y.

equiv
  foreach i <= n do x <-R L; OX(y: L) := return(xor(x,y))
<=(0)=>
  foreach i <= n do x <-R L; OX(y: L) := return(x).

fun choose(bool,L,L): L.

(* choose(b,M,N) = if b then M else N *)

forall x:bool, y:L, z:L;
  (x && choose(x,y,z) = y) || (not(x) && choose(x,y,z) = z).

const reject:L.

(* query *)
query secret b.





process
  foreach i_7 <= q do
Ostart() :=
k <-R K;
sseed <-R seed;
s: S <- kgen(sseed);
b <-R bool;
return();
((
  foreach iE <= qE do
  OE(m0: L, m1: L) :=
  x' <-R N;
  tempE: L <- f(s, x');
  m': L <- choose(b, m1, m0);
  c': L <- xor(tempE, m');
  t': W <- h(k, x', c');
  return(x', c', t')
) | (
  foreach iD <= qD do
  OD(x_1: N, c: L, t: W) :=
  if t = h(k, x_1, c) then
    find u_1 = u_2 <= qE suchthat defined(x'[u_2], c'[u_2], t'[u_2]) && (x_1 = x'[u_2]) && (c = c'[u_2]) && (t = t'[u_2]) then
      return(reject)
    else
      tempD: L <- f(s, x_1);
      m_1: L <- xor(tempD, c);
      return(m_1)
  else
    return(reject)
))



(* EXPECTED
All queries proved.
0.040s (user 0.036s + system 0.004s), max rss 41104K
END *)
