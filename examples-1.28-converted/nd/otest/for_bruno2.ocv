
param N, N'.
param N1.
param N2.



type block [fixed, large].

(* define xor to exist over blocks *)
expand Xor(block, xor, zeroblock).

(*
equiv obvious
      foreach i <= N do r <-R block; O() := return(r = zeroblock) 
      <=( N / |block| )=> 
      foreach i <= N do r <-R block; O() := return(false).

equiv obvious2
      foreach i <= N do r <-R block; O(x:block) := return(r = x) 
      <=( N / |block| )=> 
      foreach i <= N do r <-R block; O(x:block) := return(false).
*)

equiv(jons_remove_xor )
  foreach i <= N do r <-R block; foreach i <= N' do O(b1: block, b2: block) := return(xor(b1, r) = b2)
<=(N / |block|)=>
  foreach i <= N do r <-R block; foreach i <= N' do O(b1: block, b2: block) := return(false).




query secret secret_bit.





   



process 
	Ostart() :=
r <-R block;
secret_bit <-R bool;
return();
((
  foreach i_1 <= N1 do
  Oleft(b1_1: block, b2_1: block) :=
  if secret_bit then
    return((xor(b1_1, r) = b2_1))
  else
    return(false)
) | (
  foreach i_2 <= N2 do
  Oright(b1_2: block, b2_2: block) :=
  if secret_bit then
    return(false)
  else
    return((xor(b1_2, r) = b2_2))
))



(* EXPECTED
All queries proved.
0.016s (user 0.016s + system 0.000s), max rss 10368K
END *)
