param n_f, n_x, nK, nF, nx.

(* set interactiveMode = true. *)

type pkey [bounded].
type skey [bounded].
type seed [large,fixed].
type D [fixed].

fun pkgen(seed):pkey.
fun skgen(seed):skey.
fun B(D):bool.
fun pkgen'(seed):pkey.
fun f'(pkey, D):D.
fun f(pkey,D):D.
fun invf(skey,D):D.
fun xor(bool,bool):bool.
equation builtin commut(xor).

equation forall r:seed,x:D; invf(skgen(r),f(pkgen(r),x))=x.
(* forall r:seed,y:D; f(pkgen(r),invf(skgen(r),y))=y. *)
equation forall pk:pkey,x:D,x':D; (f(pk,x)=f(pk,x'))=(x=x').
equation forall b:bool,b':bool; xor(xor(b,b'),b')=b.

equiv
  foreach i_f <= n_f do r <-R seed; (
    Opk() := return(pkgen(r)) |
    foreach j_f <= n_x do x <-R D; (
      Oy() := return(f(pkgen(r),x)) |
      OB() := return(B(x))))
<=(0)=>
  foreach i_f <= n_f do r <-R seed; (
    Opk() := return(pkgen'(r)) |
    foreach j_f <= n_x do x <-R D; b <-R bool; (
      Oy() := return(f'(pkgen'(r),x)) |
      OB() := return(b))).


(*
equiv
  foreach i_f <= n_f do
     r <-R seed;
     x' <-R D;
	(
	Opk():=return(pkgen(r)) |
	Oy():=return(f(pkgen(r),x')) |
	Om():=return(B(x'))
	)
<=(0)=>
  foreach i_f <= n_f do
     r <-R seed;
     x' <-R D;
	(
	Opk():=return(pkgen(r)) |
	Oy():=return(f(pkgen(r),x')) |
	Om():= b <-R bool; return(b)
	).
*)

equiv
  foreach iK <= nK do r <-R seed; (
    Opk() := return(pkgen(r)) |
    foreach iF <= nF do x <-R D; (
      Oant() := return(invf(skgen(r),x)) |
      Oim() := return(x) |
      OB() := return(B(invf(skgen(r), x)))))
<=(0)=>
  foreach iK <= nK do r <-R seed; (
    Opk() := return(pkgen(r)) |
    foreach iF <= nF do x <-R D; (
      Oant() := return(x) |
      Oim() := return(f(pkgen(r), x)) |
      OB() := return(B(x)))).


(*
  foreach i_f <= n_f do y <-R D; 
	Opk(pk:pkey) := return(y)
<=(0)=>
  foreach i_f <= n_f do y<-R D; 
	Opk(pk:pkey) := y'<- f(pk,y); return(y').
*)

equiv
  foreach ix <= nx do a <-R bool; OXor(x: bool) := return(xor(a,x))
<=(0)=>
  foreach ix <= nx do a <-R bool; OXor(x: bool) := return(a).


query secret bv.



process O(bv: bool, v0: bool, v1: bool) :=
r <-R seed;
pk: pkey <- pkgen(r);
sk: skey <- skgen(r);
x <-R D;
y: D <- f(pk, x);
y' <-R D;
if bv then
  z0: D <- y';
  z1: D <- y;
  x0: D <- invf(sk, z0);
  x1: D <- invf(sk, z1);
  u0: bool <- xor(B(x0), v0);
  u1: bool <- xor(B(x1), v1);
  vb: bool <- xor(u1, B(x));
  return(pk, x, y, y', u0, u1, vb)
else
  z0_1: D <- y;
  z1_1: D <- y';
  x0_1: D <- invf(sk, z0_1);
  x1_1: D <- invf(sk, z1_1);
  u0_1: bool <- xor(B(x0_1), v0);
  u1_1: bool <- xor(B(x1_1), v1);
  vb_1: bool <- xor(u0_1, B(x));
  return(pk, x, y, y', u0_1, u1_1, vb_1)



(* EXPECTED
RESULT Could not prove secrecy of bv.
0.032s (user 0.024s + system 0.008s), max rss 10796K
END *)
