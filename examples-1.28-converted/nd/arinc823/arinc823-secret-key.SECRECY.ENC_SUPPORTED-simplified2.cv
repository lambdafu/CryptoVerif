(* ARINC 823 
AMS protocol using a shared secret key
described in Attachment 8 of the ARINC specification 823 Part I. 

CryptoVerif model by Bruno Blanchet, INRIA Paris-Rocquencourt. 

Simplifications:
- one MAC size
- compress and encode = identity
- removed ground initiated trigger
- policy always BOTH (except for the first message)
*)

(**** Manual indications for the proof ****)

proof {
      set useKnownEqualitiesInCryptoTransform = false;
      auto;
      show_game occ;

      replace 150 "MAC2(K_UV_455, TBP_AMS_Init_REQ_302[@ri_485])"; (*MAC0_U_300[@ri_485]*)
      show_game occ;
      replace 148 "MAC2(K_UV_455, TBP_AMS_Init_REQ_252)"; (*MAC0_U_253*)
      crypto MAC2 *;

      simplify;
      success
}


(**** Declarations of types, constants, and function symbols ****)

(* Type for session ids, used internally in the model to distinguish
   each session of the protocol. *)

type session_ids [large, fixed].

(* Type of 32 bits numbers *)

type t_Rand32 [large, fixed]. 

(* Ids 
U = aircraft
V = ground entity *)

type t_id [fixed]. (* 8 bytes = 64 bits entity type, AMS_EntityType *)
const U, V: t_id.

(* AMS Message elements *)

type t_AMS_elem.
type t_software_part_number.
type t_policy_id.

fun buildAMS10_s_init_info(t_software_part_number, t_policy_id, t_id, t_id): t_AMS_elem [data].
fun buildAMS40_entity_id(t_id, t_id): t_AMS_elem [data].
const comp_algo_void: t_AMS_elem.

fun payload_with_1_element(t_AMS_elem): bitstring [data].
fun concat_AMS_element(t_AMS_elem, bitstring): bitstring [data].

(* Algorithms *)

type t_AMS_AlgID [bounded].
type t_MAClen [bounded].
type t_AuthAlgo [bounded].
type t_EncAlgo [bounded].

fun algo(t_MAClen, t_AuthAlgo, t_EncAlgo): t_AMS_AlgID [data].

const MAClen32: t_MAClen.
const HMAC_SHA256: t_AuthAlgo.
const AES128_CFB128: t_EncAlgo.

(* Policy types *)

type t_AMS_Policy [fixed]. (* 2 bits *)

const AUTH, BOTH: t_AMS_Policy.

(* Protocol ids *)

type t_AMS_PID [bounded]. (* 1 byte, "1" or "2" *)

const ams_pid1 (* public-key protocol *), ams_pid2 (* shared-key protocol *): t_AMS_PID.

(* Commands *)

type t_Cmd [fixed]. (* 4 bits *)

const Data_IND, Info_IND, DataCnf_IND, Release_REQ, Release_RSP_Minus, 
      Release_RSP_Plus, Init_IND, Init_REQ, Init_RSP_Minus, Init_RSP_Plus,
      Abort_IND: t_Cmd.

(* Counter *)

type t_Count [fixed].

const Count1: t_Count.
const Count_unspecified: t_Count. 
      (* Used as a dummy value to fill the count argument
      	 of event recv_msg when the message is sent unprotected. *)

(* MAC *)

type mac_key [large, fixed].

type t_SHA256_out [large, fixed]. (* 256 bits, output of SHA256 *)

fun MAC(mac_key, bitstring): t_SHA256_out.

fun sessionMAC(t_MAClen, mac_key, bitstring): bitstring.

(* sessionMAC is SUF-CMA *)

fun sessionMAC2(t_MAClen, mac_key, bitstring): bitstring.
param N, N2, N3.
type mac_32bits [fixed].

proba PPRF. 
      (* PPRF(t, qMAC, l, qKDF256, qKDF128) is the probability of 
         distinguishing MAC, KDF256, and KDF128 from independent pseudo-random
	 functions in time t, with qMAC, qKDF256, qKDF128 queries to
	 MAC, KDF256, and KDF128 respectively, with MAC queries of length
	 at most l. *)

equiv(suf_cma_truncated32_mac )
  ! N3 new k: mac_key; (
    ! N Omac(x: bitstring) := return(sessionMAC(MAClen32, k, x)) |
    ! N2 Ocheck(m: bitstring, ma: bitstring) := return(ma = sessionMAC(MAClen32, k, m)))
<=(N3 * (4*N2/|mac_32bits| + 2*PPRF(time + (N3-1)*(N+N2)*time(sessionMAC,maxlength(x)), N + N2, max(maxlength(x), maxlength(m)), 0, 0)))=> [computational]
  ! N3 new k: mac_key [unchanged]; (
    ! N Omac(x: bitstring) := return(sessionMAC2(MAClen32, k, x)) |
    ! N2 Ocheck(m: bitstring, ma: bitstring) := find j <= N suchthat defined(x[j]) && (m = x[j]) && ma = sessionMAC2(MAClen32, k, m) then return(true) else return(false)).

(* Encryption *)

type enc_key [large, fixed]. (* 128 bits *)
type t_IVdata [fixed].

type byte [fixed]. (* 1 byte = 8 bits *)
const CstDN: byte. (* 0x00 *)
const CstUP: byte. (* 0x01 *)
fun buildIVdata(byte, t_Count): t_IVdata [data].

fun E'(enc_key, t_IVdata, bitstring): bitstring.
fun D'(enc_key, t_IVdata, bitstring): bitstring.

equation forall k: enc_key, IVdata: t_IVdata, msg: bitstring;
      D'(k, IVdata, E'(k, IVdata, msg)) = msg.

(* encryption is IND-CPA provided IVdata is distinct
   for each encryption *)

proba Penc.
	(* Penc(t, N, l) is the probability of breaking the IND-CPA property of encryption
	   in time t, with N queries to the left-right encryption oracle, of length at most l
	   (for one encryption key). *)

(* Z(x) is a bitstring of the same length as x, containing only zeroes *)
fun Z(bitstring): bitstring.

fun E''(enc_key, t_IVdata, bitstring): bitstring.

event repeated_IVdata.

equiv
  ! N2 new k: enc_key; ! N Oenc(IVdata: t_IVdata, msg: bitstring) := return(E'(k, IVdata, msg))
<=(N2 * Penc(time + (N2-1)*(N*time(E', maxlength(msg)) + N*time(Z, maxlength(msg))), N, maxlength(msg)))=>
  ! N2 new k: enc_key; ! N Oenc(IVdata: t_IVdata, msg: bitstring) := find i <= N suchthat defined(IVdata[i], r[i]) && (IVdata = IVdata[i]) then event_abort repeated_IVdata else let r: bitstring = E''(k, IVdata, Z(msg)) in return(r).

(* Hash function HASH is collision resistant *)

type hash_key [large,fixed].
proba Phash.
expand CollisionResistant_hash(hash_key, bitstring, t_SHA256_out, HASH, Phash).

fun concat_hash(bitstring, t_Rand32): bitstring [data].

fun KDF256(mac_key, t_SHA256_out, t_id, t_id): mac_key.
fun KDF128(mac_key, t_SHA256_out, t_id, t_id): enc_key.

(* MAC is HMAC_SHA256, it is SUF-CMA;
   KDF256, KDF128 are PRFs, even when they share the same key as the MAC *)

param qMAC, qVer, qKDF256, qKDF128, qColl.
fun MAC2(mac_key, bitstring): t_SHA256_out.

equiv
  ! N new k: mac_key; (
    ! qMAC O_mac(m: bitstring) := return(MAC(k, m)) |
    ! qVer O_Ver(mv: bitstring, mac: t_SHA256_out) := return(mac = MAC(k, mv)) |
    ! qKDF256 O_KDF256(X2: t_SHA256_out, U2: t_id, V2: t_id) := return(KDF256(k, X2, U2, V2)) |
    ! qKDF128 O_KDF128(X3: t_SHA256_out, U3: t_id, V3: t_id) := return(KDF128(k, X3, U3, V3)))
<=(N * (4 * qVer / |t_SHA256_out| + 
PPRF(time + (N-1)*(qMAC * time(MAC, maxlength(m)) + qVer * time(MAC, maxlength(mv)) + qKDF256 * time(KDF256) + qKDF128 * time(KDF128)), qMAC + qVer, max(maxlength(m), maxlength(mv)), qKDF256, qKDF128) +
PPRF(time + (N-1)*(qMAC * time(MAC, maxlength(m)) + qVer * time(MAC, maxlength(mv)) + qKDF256 * time(KDF256) + qKDF128 * time(KDF128)), qMAC + qVer, max(maxlength(m), maxlength(mv)), 0, 0)))=>
  ! N new k: mac_key; (
    ! qMAC O_mac(m: bitstring) := return(MAC2(k, m)) |
    ! qVer O_Ver(mv: bitstring, mac: t_SHA256_out) := find j <= qMAC suchthat defined(m[j]) && mv = m[j] && mac = MAC2(k, mv) then return(true) else return(false) |
    ! qKDF256 O_KDF256(X2: t_SHA256_out, U2: t_id, V2: t_id) := find [unique] j2 <= qKDF256 suchthat defined(X2[j2], U2[j2], V2[j2], r2[j2]) && X2 = X2[j2] && U2 = U2[j2] && V2 = V2[j2] then return(r2[j2]) else new r2: mac_key; return(r2) |
    ! qKDF128 O_KDF128(X3: t_SHA256_out, U3: t_id, V3: t_id) := find [unique] j3 <= qKDF128 suchthat defined(X3[j3], U3[j3], V3[j3], r3[j3]) && X3 = X3[j3] && U3 = U3[j3] && V3 = V3[j3] then return(r3[j3]) else new r3: enc_key; return(r3)).

(* MAC is HMAC_SHA256, it is collision resistant *)

equiv
  ! N new k: mac_key; (
    ! qMAC O_mac(m: bitstring) := return(MAC2(k, m)) |
    ! qColl O_coll(m1: bitstring, m2: bitstring) [useful_change] := return(MAC2(k, m1) = MAC2(k, m2)))
<=((6 * qColl + 2 * qColl * qColl + 2 * qMAC * qColl + 0.5 * qMAC * qMAC) / |t_SHA256_out| + 
   2 * PPRF(time, qMAC + 2 * qColl, max(maxlength(m), maxlength(m2), maxlength(m1)), 0, 0))=>
  ! N new k: mac_key; (
    ! qMAC O_mac(m: bitstring) := return(MAC2(k, m)) |
    ! qColl O_coll(m1: bitstring, m2: bitstring) := return(m1 = m2)).
	

(* Time *)

type t_AMS_Time [fixed].

fun check_time(t_AMS_Time, t_AMS_Time): bool.
     (* check_time(tU, tV) is supposed to check that 
     	tV - 60 seconds <= tU <= tV + 120 seconds. *)

table table_times(t_AMS_Time).
      (* table used to remember all times tU at which the
      	 aircraft started a session, to prevent it from	
	 starting two sessions with the same tU. *)

(* Supplementary address type *)

type t_AMS_SuppAddr.

(* Session identifiers *)

type t_SID [fixed]. (* 3 bits *)
const SID0, SID1, SID2, SID3, SID4, SID5: t_SID.

(* Building AMS messages *)

type t_AMS_IMI. (* empty or "PM1." *)
type t_AMS_ID.

(* t_AMS_SuppAddr has variable length, but starts with / and ends with .
   so it can be distinguished from the PID, and its length can be determined. *)
fun buildAMS_id1(t_AMS_SuppAddr, t_AMS_IMI, t_AMS_PID): t_AMS_ID [data].
fun buildAMS_id2(t_AMS_PID): t_AMS_ID [data].

type t_AMS_Header. (* 2 bytes = 16 bits *)

fun buildAMS_Header(bool (*R1 parameter, ignored*), t_AMS_Policy, t_SID, t_Cmd): t_AMS_Header [data].

fun buildAMS_msg_prefix_Init(t_AMS_ID, t_AMS_Header, bitstring, t_AMS_AlgID, t_AMS_Time): bitstring [data].
fun buildAMS_msg_prefix_Rest(t_AMS_ID, t_AMS_Header, bitstring, t_Count): bitstring [data].
fun buildAMS_RSP(bitstring, t_AMS_AlgID, t_AMS_Time, t_Rand32): bitstring [data].

fun buildMAC_arg(t_id, t_id, bitstring): bitstring [data].
fun build_msg_Init(bitstring, t_SHA256_out): bitstring [data].
fun buildAMS_appendix_Init(t_AMS_AlgID, t_AMS_Time, t_SHA256_out): bitstring [data].
fun concat(bitstring, bitstring): bitstring. (* concatenation; it is NOT compos, because the
    		      		  	     	lengths of the two concatenated bitstrings is not known. *)
fun split_message(t_MAClen, bitstring): bitstring.
    			    		(* split_message(l, m) returns a pair (m1, m2) such that
					   m is the concatenation of m1 and m2, and m2 has length l.
					   In this protocol, m2 is the MAC, m1 is the rest of the message. *)

(* Tables of message counters
   We simulate a distinct table for each session by
   adding a unique session identifier as first argument. *)

table received_count_table(session_ids, t_Count).
table sent_count_table(session_ids, t_Count).

(**** Security properties ****)

(* Secrecy *)

fun test(bool, bitstring, bitstring): bitstring.
equation forall x:bitstring,y:bitstring; test(true,x,y) = x.
equation forall x:bitstring,y:bitstring; test(false,x,y) = y.
equation forall b:bool,x:bitstring; test(b,x,x) = x.

equation forall b:bool,x:bitstring,y:bitstring; 
       Z(test(b, x, y)) =
       test(b, Z(x), Z(y)).

query secret b.

(**** The protocol ****)

param Naircraft, Nground, Nground_init, Nground_init_react, Nmessage.
channel c_gen1, c_gen2, c_aircraft0, c_aircraft0', c_aircraft1, c_aircraft2, c_aircraft3, c_aircraft4, 
	c_ground1, c_ground2, 
	choicechannel, pub.

(* The process tunnel_protocol models the secure session data exchange
   (Attachment 8, Section 8.3) *)



(* Secure session initiation, aircraft-initiated (Attachement 8, Section 8.2.1) *)


    (*tunnel_protocol(ams_pid2, common_comp_algo_id, policy_id,
      KMAC_UV, KENC_UV, MAClen, common_enc_algo, sid, CstDN, CstUP, U, V)*)

 (* tunnel_protocol(ams_pid2, common_comp_algo_id, policy_id,
      KMAC_UV, KENC_UV, MAClen, common_enc_algo, sid, CstUP, CstDN, V, U)*)

(* Putting the whole system together *)

process 
	in(c_gen1, ());
new b: bool;
new K_UV: mac_key;
new hk: hash_key;
out(c_gen2, hk);
((
  ! i_1 <= Naircraft
  in(c_aircraft1[i_1], (software_part_number_1: t_software_part_number, policy_id_1: t_policy_id, ams_dstaddr_1: t_AMS_SuppAddr, ams_imi_1: t_AMS_IMI, sid_1: t_SID, tU_1: t_AMS_Time));
  get table_times(=tU_1) in
    yield
  else
    insert table_times(tU_1);
    let MAClen: t_MAClen = MAClen32 in
    new current_session_id_1: session_ids;
    let s_init_info: t_AMS_elem = buildAMS10_s_init_info(software_part_number_1, policy_id_1, U, V) in
    let ams_payload: bitstring = concat_AMS_element(s_init_info, payload_with_1_element(comp_algo_void)) in
    let ams_id: t_AMS_ID = buildAMS_id1(ams_dstaddr_1, ams_imi_1, ams_pid2) in
    let ams_header: t_AMS_Header = buildAMS_Header(false, AUTH, sid_1, Init_REQ) in
    let alg_ID_U: t_AMS_AlgID = algo(MAClen, HMAC_SHA256, AES128_CFB128) in
    let AMS_Init_REQ_prefix: bitstring = buildAMS_msg_prefix_Init(ams_id, ams_header, ams_payload, alg_ID_U, tU_1) in
    let TBP_AMS_Init_REQ: bitstring = buildMAC_arg(U, V, AMS_Init_REQ_prefix) in
    let MAC0_U: t_SHA256_out = MAC(K_UV, TBP_AMS_Init_REQ) in
    let AMS_Appendix: bitstring = buildAMS_appendix_Init(alg_ID_U, tU_1, MAC0_U) in
    let AMS_Init_REQ: bitstring = build_msg_Init(AMS_Init_REQ_prefix, MAC0_U) in
    out(c_aircraft2[i_1], AMS_Init_REQ);
    in(c_aircraft3[i_1], AMS_Init_RSP_1: bitstring);
    let (AMS_Init_RSP_prefix_1: bitstring, mac2_1: bitstring) = split_message(MAClen, AMS_Init_RSP_1) in
    let buildAMS_msg_prefix_Rest(ams_id2: t_AMS_ID, ams_header2: t_AMS_Header, buildAMS_RSP(AMS_payload2: bitstring, AlgSel: t_AMS_AlgID, =tU_1, RandV: t_Rand32), =Count1) = AMS_Init_RSP_prefix_1 in
    let buildAMS_Header(R1: bool, =AUTH, sid2: t_SID, =Init_RSP_Plus) = ams_header2 in
    let X_UV: t_SHA256_out = HASH(hk, concat_hash(AMS_Appendix, RandV)) in
    let KMAC_UV: mac_key = KDF256(K_UV, X_UV, U, V) in
    let KENC_UV: enc_key = KDF128(K_UV, X_UV, U, V) in
    let TBP_AMS_Init_RSP: bitstring = buildMAC_arg(V, U, AMS_Init_RSP_prefix_1) in
    if mac2_1 = sessionMAC(MAClen, KMAC_UV, TBP_AMS_Init_RSP) then
    insert received_count_table(current_session_id_1, Count1);
    let ams_pid: t_AMS_PID = ams_pid2 in
    let dir_send: byte = CstDN in
    let dir_recv: byte = CstUP in
    let my_id: t_id = U in
    let other_id: t_id = V in
    out(c_aircraft4[i_1], ());
    ((
      ! i_5 <= Nmessage
      in(choicechannel[i_5, i_1], (AMS_payload1_1: bitstring, AMS_payload2_1: bitstring, ams_dstaddr_2: t_AMS_SuppAddr, ams_imi_2: t_AMS_IMI, count_1: t_Count, cmd_1: t_Cmd));
      get sent_count_table(=current_session_id_1, =count_1) in
        yield
      else
        if Z(AMS_payload1_1) = Z(AMS_payload2_1) then
        let AMS_payload: bitstring = test(b, AMS_payload1_1, AMS_payload2_1) in
        insert sent_count_table(current_session_id_1, count_1);
        let encrypted_AMS_payload: bitstring = E'(KENC_UV, buildIVdata(dir_send, count_1), AMS_payload) in
        let ams_id_1: t_AMS_ID = buildAMS_id1(ams_dstaddr_2, ams_imi_2, ams_pid) in
        let ams_header_1: t_AMS_Header = buildAMS_Header(false, BOTH, sid_1, cmd_1) in
        let AMS_Data_IND_prefix: bitstring = buildAMS_msg_prefix_Rest(ams_id_1, ams_header_1, encrypted_AMS_payload, count_1) in
        let TBP_AMS_Data_IND: bitstring = buildMAC_arg(my_id, other_id, AMS_Data_IND_prefix) in
        let mac_1: bitstring = sessionMAC(MAClen, KMAC_UV, TBP_AMS_Data_IND) in
        let AMS_Data_IND: bitstring = concat(AMS_Data_IND_prefix, mac_1) in
        out(pub[i_5, i_1], AMS_Data_IND)
    ) | (
      ! i_6 <= Nmessage
      in(pub[i_6, i_1], AMS_Data_IND_1: bitstring);
      let (AMS_Data_IND_prefix_1: bitstring, mac_2: bitstring) = split_message(MAClen, AMS_Data_IND_1) in
      let TBP_AMS_Data_IND_1: bitstring = buildMAC_arg(other_id, my_id, AMS_Data_IND_prefix_1) in
      if mac_2 = sessionMAC(MAClen, KMAC_UV, TBP_AMS_Data_IND_1) then
      let buildAMS_msg_prefix_Rest(ams_id_2: t_AMS_ID, ams_header_2: t_AMS_Header, encrypted_AMS_payload_1: bitstring, MsgCount: t_Count) = AMS_Data_IND_prefix_1 in
      let buildAMS_Header(R1_1: bool, protect_mode: t_AMS_Policy, sid_2: t_SID, cmd_2: t_Cmd) = ams_header_2 in
      get received_count_table(=current_session_id_1, =MsgCount) in
        yield
      else
        insert received_count_table(current_session_id_1, MsgCount);
        let AMS_payload_1: bitstring = D'(KENC_UV, buildIVdata(dir_recv, MsgCount), encrypted_AMS_payload_1)
    ))
) | (
  ! i_4 <= Nground
  in(c_ground1[i_4], (tV: t_AMS_Time, app_data: bitstring, AMS_Init_REQ_1: bitstring));
  new current_session_id_2: session_ids;
  let build_msg_Init(AMS_Init_REQ_prefix_1: bitstring, MAC0_U_1: t_SHA256_out) = AMS_Init_REQ_1 in
  let TBP_AMS_Init_REQ_1: bitstring = buildMAC_arg(U, V, AMS_Init_REQ_prefix_1) in
  if MAC0_U_1 = MAC(K_UV, TBP_AMS_Init_REQ_1) then
  let buildAMS_msg_prefix_Init(ams_id_3: t_AMS_ID, ams_header_3: t_AMS_Header, ams_payload_1: bitstring, alg_ID_U_1: t_AMS_AlgID, tU_2: t_AMS_Time) = AMS_Init_REQ_prefix_1 in
  let AMS_Appendix_1: bitstring = buildAMS_appendix_Init(alg_ID_U_1, tU_2, MAC0_U_1) in
  if check_time(tU_2, tV) then
  let buildAMS_Header(R1_2: bool, =AUTH, sid_3: t_SID, =Init_REQ) = ams_header_3 in
  let algo(MAClen_1: t_MAClen, =HMAC_SHA256, enc_algo: t_EncAlgo) = alg_ID_U_1 in
  let common_enc_algo: t_EncAlgo = AES128_CFB128 in
  let concat_AMS_element(s_init_info_1: t_AMS_elem, payload_with_1_element(comp_algo_id: t_AMS_elem)) = ams_payload_1 in
  let buildAMS10_s_init_info(software_part_number_2: t_software_part_number, policy_id_2: t_policy_id, =U, =V) = s_init_info_1 in
  new RandV_1: t_Rand32;
  let X_UV_1: t_SHA256_out = HASH(hk, concat_hash(AMS_Appendix_1, RandV_1)) in
  let KMAC_UV_1: mac_key = KDF256(K_UV, X_UV_1, U, V) in
  let KENC_UV_1: enc_key = KDF128(K_UV, X_UV_1, U, V) in
  let AMS_payload_2: bitstring = concat_AMS_element(comp_algo_void, app_data) in
  insert sent_count_table(current_session_id_2, Count1);
  let ams_id_4: t_AMS_ID = buildAMS_id2(ams_pid2) in
  let ams_header_4: t_AMS_Header = buildAMS_Header(false, AUTH, sid_3, Init_RSP_Plus) in
  let AlgSel_1: t_AMS_AlgID = algo(MAClen_1, HMAC_SHA256, common_enc_algo) in
  let AMS_Init_RSP_prefix_2: bitstring = buildAMS_msg_prefix_Rest(ams_id_4, ams_header_4, buildAMS_RSP(AMS_payload_2, AlgSel_1, tU_2, RandV_1), Count1) in
  let TBP_AMS_Init_RSP_1: bitstring = buildMAC_arg(V, U, AMS_Init_RSP_prefix_2) in
  let mac_3: bitstring = sessionMAC(MAClen_1, KMAC_UV_1, TBP_AMS_Init_RSP_1) in
  let AMS_Init_RSP_2: bitstring = concat(AMS_Init_RSP_prefix_2, mac_3) in
  let ams_pid_1: t_AMS_PID = ams_pid2 in
  let dir_send_1: byte = CstUP in
  let dir_recv_1: byte = CstDN in
  let my_id_1: t_id = V in
  let other_id_1: t_id = U in
  out(c_ground2[i_4], AMS_Init_RSP_2);
  ((
    ! i_5 <= Nmessage
    in(choicechannel[i_5, i_4], (AMS_payload1_2: bitstring, AMS_payload2_2: bitstring, ams_dstaddr_3: t_AMS_SuppAddr, ams_imi_3: t_AMS_IMI, count_2: t_Count, cmd_3: t_Cmd));
    get sent_count_table(=current_session_id_2, =count_2) in
      yield
    else
      if Z(AMS_payload1_2) = Z(AMS_payload2_2) then
      let AMS_payload_3: bitstring = test(b, AMS_payload1_2, AMS_payload2_2) in
      insert sent_count_table(current_session_id_2, count_2);
      let encrypted_AMS_payload_2: bitstring = E'(KENC_UV_1, buildIVdata(dir_send_1, count_2), AMS_payload_3) in
      let ams_id_5: t_AMS_ID = buildAMS_id1(ams_dstaddr_3, ams_imi_3, ams_pid_1) in
      let ams_header_5: t_AMS_Header = buildAMS_Header(false, BOTH, sid_3, cmd_3) in
      let AMS_Data_IND_prefix_2: bitstring = buildAMS_msg_prefix_Rest(ams_id_5, ams_header_5, encrypted_AMS_payload_2, count_2) in
      let TBP_AMS_Data_IND_2: bitstring = buildMAC_arg(my_id_1, other_id_1, AMS_Data_IND_prefix_2) in
      let mac_4: bitstring = sessionMAC(MAClen_1, KMAC_UV_1, TBP_AMS_Data_IND_2) in
      let AMS_Data_IND_2: bitstring = concat(AMS_Data_IND_prefix_2, mac_4) in
      out(pub[i_5, i_4], AMS_Data_IND_2)
  ) | (
    ! i_6 <= Nmessage
    in(pub[i_6, i_4], AMS_Data_IND_3: bitstring);
    let (AMS_Data_IND_prefix_3: bitstring, mac_5: bitstring) = split_message(MAClen_1, AMS_Data_IND_3) in
    let TBP_AMS_Data_IND_3: bitstring = buildMAC_arg(other_id_1, my_id_1, AMS_Data_IND_prefix_3) in
    if mac_5 = sessionMAC(MAClen_1, KMAC_UV_1, TBP_AMS_Data_IND_3) then
    let buildAMS_msg_prefix_Rest(ams_id_6: t_AMS_ID, ams_header_6: t_AMS_Header, encrypted_AMS_payload_3: bitstring, MsgCount_1: t_Count) = AMS_Data_IND_prefix_3 in
    let buildAMS_Header(R1_3: bool, protect_mode_1: t_AMS_Policy, sid_4: t_SID, cmd_4: t_Cmd) = ams_header_6 in
    get received_count_table(=current_session_id_2, =MsgCount_1) in
      yield
    else
      insert received_count_table(current_session_id_2, MsgCount_1);
      let AMS_payload_4: bitstring = D'(KENC_UV_1, buildIVdata(dir_recv_1, MsgCount_1), encrypted_AMS_payload_3)
  ))
))



(* EXPECTED
All queries proved.
2.020s (user 2.016s + system 0.004s), max rss 16888K
END *)
