(* The function that receives messages on channel c3
   does not have the same return type everywhere:
   in both cases, it returns a type bitstring,
   but in one case it is a tuple, which is decomposed
   into an OCaml tuple, and in the other case, it is
   a non-tuple bitstring.
   This is rejected when generating an implementation. *)


(*

WooLam shared-key auth protocol (1992, computer)
Corrections of Gordon, Jeffrey CSFW'01

A -> B : A
B -> A : N (fresh)
A -> B : { m3, B, N }_kAS
B -> S : A,B,{ m3, B, N }_kAS
S -> B : { m5, A, N }_kBS
B: verify { m5, A, N }_kBS = the message from S

Correct.
*)

param N, N2, N3, Nh.

type nonce [large,fixed].
type host [bounded].
type mkey [bounded].
type mkeyseed [fixed].
type key [bounded].
type keyseed [fixed].
type seed [fixed].
type macs [bounded].
type tag [bounded].
type maxenc [bounded].
type maxmac [bounded].

table keytbl (key, mkey, host).

fun concat1(tag, host, nonce):maxenc [data].

(* Shared-key encryption (CPA Stream cipher) *)

proba Penc.

expand IND_CPA_sym_enc(keyseed, key, maxenc, maxmac, seed, kgen, enc, dec, injbot, Z, Penc).

(* The function Z returns for each bitstring, a bitstring
   of the same length, consisting only of zeroes. *)
const Zconcat1:maxenc.
equation forall y:tag, h:host, z:nonce; 
	Z(concat1(y,h,z)) = Zconcat1.

(* Mac *)

proba Pmac.

expand UF_CMA_mac(mkeyseed, mkey, maxmac, macs, mkgen, mac, check, Pmac).

(* We model an unbounded number of honest and dishonest participants.
   Participants honest(...) are honest, dishonest(...) are dishonest *)

type hname.
fun honest(hname):host [data].
fun dishonest(hname):host [data].

equation forall x1:hname, x2:hname; honest(x1) <> dishonest(x2).

(* Queries *)

channel c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13,
	start, finish.

const tag3: tag.
const tag5: tag.

event beginA(host).
event beginAfull(host, host, nonce).
event endB(host, host, nonce).

query z: nonce, y: host, x: host;
  event(endB(x, y, z)) ==> event(beginAfull(x, y, z)).
query z: nonce, y: host, x: host;
  event(endB(x, y, z)) ==> event(beginA(x)).
query z: nonce, y: host, x: host;
  inj-event(endB(x, y, z)) ==> inj-event(beginAfull(x, y, z)).
query z: nonce, y: host, x: host;
  inj-event(endB(x, y, z)) ==> inj-event(beginA(x)).

implementation type keyseed = 128;
               type mkeyseed = 160;
               table keytbl = "keytbl";
               type key = 128;
               type mkey = "string" [ serial = "id", "id" ];
	       type hname = "string";
               type host = "string" [serial = "id", "id" ];
               fun mkgen = "mac_kgen";
               fun kgen = "sym_kgen";
               type maxmac = "string";
               type macs = "string";
               type seed = 128;
	       type nonce = 64;
               fun mac = "(mac Cryptokit.MAC.hmac_sha1)";
               fun enc = "(sym_r_enc (Cryptokit.Cipher.aes ~mode:Cryptokit.Cipher.CBC ~pad:Cryptokit.Padding.length))";
               fun concat1 = "concat_str_str_str" [ inverse = "unconcat_str_str_str" ];
               const tag5 = "\"tag5\"";
               fun dec = "(sym_r_dec 16 (Cryptokit.Cipher.aes ~mode:Cryptokit.Cipher.CBC ~pad:Cryptokit.Padding.length))";
               fun injbot = "injbot" [inverse = "injbot_inv" ];
	       fun honest = "id" [inverse = "id" ];
               const tag3 = "\"tag3\"";
               fun check = "(mac_check Cryptokit.MAC.hmac_sha1)".
               






    






process 
	(((
  ! i_1 <= Nh
  in(start[i_1], hostname: hname);
  let A: host = honest(hostname) in
  new rKas: keyseed;
  let kAS: key = kgen(rKas) in
  new rmKas: mkeyseed;
  let mkAS: mkey = mkgen(rmKas) in
  insert keytbl(kAS, mkAS, A);
  out(c13[i_1], ());
  ((
    ! i_2 <= N
    in(c1[i_2, i_1], hostB2: host);
    event beginA(hostB2);
    out(c2[i_2, i_1], A);
    in(c3[i_2, i_1], (n_1: nonce, ret_bitstring: bitstring));
    event beginAfull(hostB2, A, n_1);
    new r1: seed;
    let e1: maxmac = enc(concat1(tag3, hostB2, n_1), kAS, r1) in
    if true = false then
      out(c4[i_2, i_1], ret_bitstring)
    else
      out(c4[i_2, i_1], (e1, mac(e1, mkAS)))
  ) | (
    ! i_3 <= N
    in(c5[i_3, i_1], hostA2: host);
    new N_14: nonce;
    out(c6[i_3, i_1], N_14);
    in(c7[i_3, i_1], (m_3: maxmac, macm_1: macs));
    out(c8[i_3, i_1], (hostA2, A, m_3, macm_1));
    in(c9[i_3, i_1], (m2: maxmac, macm2: macs));
    if check(m2, mkAS, macm2) then
    if injbot(concat1(tag5, hostA2, N_14)) = dec(m2, kAS) then
    out(c10[i_3, i_1], ());
    in(c11[i_3, i_1], ());
    let honest(x_2: hname) = hostA2 in
    event endB(A, hostA2, N_14)
  ))
) | (
  ! i_4 <= N
  in(c11[i_4], (hostA1: host, hostB0: host, m_4: maxmac, macm_2: macs));
  get keytbl(kbs: key, mkbs: mkey, =hostB0) in
  get keytbl(kas: key, mkas: mkey, =hostA1) in
  if check(m_4, mkas, macm_2) then
  let injbot(concat1(=tag3, =hostB0, n_2: nonce)) = dec(m_4, kas) in
  new r3: seed;
  let e3: maxmac = enc(concat1(tag5, hostA1, n_2), kbs, r3) in
  out(c12[i_4], (e3, mac(e3, mkbs)))
) | (
  ! i_5 <= N2
  in(c10[i_5], (Khost: host, Kkey: key, Kmkey: mkey));
  let dishonest(x_3: hname) = Khost in
  insert keytbl(Kkey, Kmkey, Khost)
))

)

(* EXPECTED
All queries proved.
0.096s (user 0.096s + system 0.000s), max rss 12260K
END *)
