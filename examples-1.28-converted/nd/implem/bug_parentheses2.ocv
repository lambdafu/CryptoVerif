(* Needham Schroeder public key protocol. *)

(* In order to determine the proof, use interactive mode: 
   set interactiveMode = true.
The proof is as follows: *)

(*
proof {
crypto uf_cma(sign) rkS;
crypto ind_cca2(enc) rkA;
crypto ind_cca2(enc) rkB;
success;
auto
}*)

param N.
param N2.
param N3.
param N4.

type nonce [fixed,large].
type host [bounded].
type pkey [bounded].
type skey [bounded].
type keyseed [large,fixed].
type seed [fixed].
type spkey [bounded].
type sskey [bounded].
type skeyseed [large,fixed].
type sseed [fixed].
type signature [bounded].
type blocksize [fixed].
type blocksizebot [bounded].
type sblocksize [fixed].
type role [bounded].
type hostname [bounded].
type keypair [bounded].
type skeypair [bounded].


implementation type sseed=8;
               type skeyseed=8;
               type keyseed=8;
               type seed=8;
               type nonce=8;
               type host="string" [serial = "id", "id"];
               type pkey="pkey" [serial = "pkey_to","pkey_from"];
               type skey="skey" [serial = "skey_to","skey_from"];
               type signature="string";
               type spkey="pkey" [serial = "pkey_to","pkey_from"];
               type sskey="skey" [serial = "skey_to","skey_from"].

table keytbl(host,pkey).
implementation table keytbl="keytbl".


fun get_hostname():hostname.
fun concat1(nonce, host):blocksize [data].
fun concat2(nonce, nonce):blocksize [data].
fun concat3(pkey, host):sblocksize [data].
fun concat4(hostname, role):host [data].
fun pad(nonce):blocksize [data].

fun kp(pkey,skey):keypair [data].
fun skp(spkey,sskey):skeypair [data].

equation forall z:nonce,t:nonce,y2:nonce,z2:host;
	concat2(z,t) <> concat1(y2,z2).
equation forall y:nonce,y2:nonce,z2:host;
	pad(y) <> concat1(y2,z2).
equation forall z:nonce,t:nonce,y2:nonce;
	concat2(z,t) <> pad(y2).

(* Public-key encryption (IND-CCA2) *)

proba Penc.
proba Penccoll.

expand IND_CCA2_public_key_enc(keyseed, pkey, skey, blocksize, bitstring, seed, skgen, pkgen, enc, dec, injbot, Z, Penc, Penccoll).

(* Signatures *)

proba Psign.
proba Psigncoll.

expand UF_CMA_signature(skeyseed, spkey, sskey, sblocksize, signature, sseed, sskgen, spkgen, sign, check, Psign, Psigncoll).

(* Queries *)

query secret NaA [cv_onesession].
query secret NaB [cv_onesession].
query secret NbA [cv_onesession].
query secret NbB [cv_onesession].

query secret NaA.
query secret NaB.
query secret NbA.
query secret NbB.

const roleA:role.
const roleB:role.

(*implementation*)

implementation fun concat1="concat_str_str" [inverse = "unconcat_str_str"];
               fun concat2="concat_str_str" [inverse =  "unconcat_str_str"];
               fun concat3="concat_pk_str" [inverse =  "unconcat_pk_str"];
               fun concat4="concat_str_str" [inverse =  "unconcat_str_str"];
               fun sign="(pk_r_sign Cryptokit.Hash.sha256 Cryptokit.Padding.length)";
               fun get_hostname="get_hostname";
               fun check="(pk_r_check_sign Cryptokit.Hash.sha256 Cryptokit.Padding.length)";
               fun enc="(pk_r_enc Cryptokit.Padding.length)";
               fun dec="(pk_r_dec Cryptokit.Padding.length)";
               fun injbot="injbot" [inverse =  "injbot_inv"];
               fun pad="(pad Cryptokit.Padding.length 64)" [inverse = "(pad_inv Cryptokit.Padding.length)"];
               fun kp="id" [inverse="id"];
               fun skp="id" [inverse="id"];
               const roleA="\"A\"";
               const roleB="\"B\"".


letfun kgen() =  k <-R keyseed;  kp (pkgen(k) ,skgen(k) ).
letfun kgen_s() =  k <-R skeyseed;  skp (spkgen(k) ,sskgen(k) ).

implementation fun kgen = "(pk_kgen 1024)".
implementation fun kgen_s = "(pk_kgen 1024)".









process 
OStart() :=
let skp(pkS: spkey, skS: sskey) = (k_2 <-R skeyseed; skp(spkgen(k_2), sskgen(k_2))) in
return(pkS);
((
  OAGK() :=
  A: host <- concat4(get_hostname, roleA);
  let kp(pkA: pkey, skA: skey) = (k_3 <-R keyseed; kp(pkgen(k_3), skgen(k_3))) in
  insert keytbl(A, pkA);
  return(pkA);
  foreach i_20 <= N do
  OA1(hostX: host) :=
  return(A, hostX);
  OA3(pkX: pkey, =hostX, ms_1: signature) :=
  if check((z: sblocksize <- concat3(pkX, hostX); z), pkS, ms_1) then
  Na_1 <-R nonce;
  r3_2 <-R seed;
  return(enc(concat1(Na_1, A), pkX, r3_2));
  OA5(m_3: bitstring) :=
  let injbot(concat2(=Na_1, Nb: nonce)) = dec(m_3, skA) in
  r4 <-R seed;
  return(enc(pad(Nb), pkX, r4));
  OAFinish() :=
  if defined(B) then
  if hostX = B then
    NaA: nonce <- Na_1;
    NbA: nonce <- Nb
  else
    return(Na_1, Nb)
) | (
  OBGK() :=
  B: host <- concat4(get_hostname, roleB);
  let kp(pkB: pkey, skB: skey) = (k_4 <-R keyseed; kp(pkgen(k_4), skgen(k_4))) in
  insert keytbl(B, pkB);
  return(pkB);
  foreach i_21 <= N do
  OB7(m_4: bitstring) :=
  let injbot(concat1(Na_2: nonce, hostY: host)) = dec(m_4, skB) in
  return(B, hostY);
  OB9(pkY: pkey, =hostY, ms_2: signature) :=
  if check(concat3(pkY, hostY), pkS, ms_2) then
  Nb_1 <-R nonce;
  r5 <-R seed;
  return(enc(concat2(Na_2, Nb_1), pkY, r5));
  OB11(m3: bitstring) :=
  let injbot(pad(=Nb_1)) = dec(m3, skB) in
  return();
  OBFinish() :=
  if defined(A) then
  if hostY = A then
    NaB: nonce <- Na_2;
    NbB: nonce <- Nb_1
  else
    return(Na_2, Nb_1)
) | (
  foreach i_22 <= N do
  OS13(h1: host, h2: host) :=
  get keytbl(Khost: host, Rkey: pkey) suchthat Khost = h2 in
  r3_3 <-R sseed;
  return(Rkey, h2, sign(concat3(Rkey, h2), skS, r3_3))
) | (
  foreach i_23 <= N2 do
  OK12(Khost_1: host, Kkey: pkey) :=
  if defined(A, B, pkA, pkB) && (Khost_1 <> A) && (Khost_1 <> B) then
  insert keytbl(Khost_1, Kkey)
))




(* EXPECTED
RESULT Could not prove secrecy of NbB; secrecy of NbA; secrecy of NaB; secrecy of NaA; one-session secrecy of NbB; one-session secrecy of NbA; one-session secrecy of NaB; one-session secrecy of NaA.
3.088s (user 3.080s + system 0.008s), max rss 22036K
END *)
