(* Wide-Mouth-Frog protocol, version without timestamps,
   but with tags.
   Proving secrecy of a payload.
   (Script written for a paper with Martin Abadi and 
   Hubert Comon-Lundh, CAV'09) *)

param N, N2.

type host [bounded].
type key [fixed].
type keyseed [fixed].
type seed [fixed].
type maxenc [bounded].
type tag [fixed].
type payload [fixed].

const c0: tag.
const c1: tag.

fun concat(tag, host, key):maxenc [data].
fun pad(payload):maxenc [data].

(* Shared-key encryption (IND-CPA + INT-CTXT Stream cipher) *)

proba Penc.
proba Pencctxt.

expand IND_CPA_INT_CTXT_sym_enc(keyseed, key, maxenc, bitstring, seed, kgen, encrypt, decrypt, injbot, Z, Penc, Pencctxt).

(* The function Z returns for each bitstring, a bitstring
   of the same length, consisting only of zeroes. *)
const Zconcat:maxenc.
forall x:tag,h:host,k:key; 
	Z(concat(x,h,k)) = Zconcat.

const Zpayload:maxenc.
forall x:payload; Z(pad(x)) = Zpayload.


fun test(bool, payload, payload):payload.
forall x:payload, y:payload; test(true, x,y) = x.
forall x:payload, y:payload; test(false, x,y) = y.


(* Queries *)

query secret switch.

(* Honest hosts *)

const a : host.
const b : host.

(* Channels *)

channel c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14.

set mergeBranches = false.





                         






process 
	in(c13, (m0: payload, m1: payload));
new switch: bool;
let payload_1: payload = test(switch, m0, m1) in
new rKas: keyseed;
let Kas: key = kgen(rKas) in
new rKbs: keyseed;
let Kbs: key = kgen(rKbs) in
out(c14, ());
((
  ! i_1 <= N
  in(c2[i_1], (xA_1: host, xB_1: host));
  if (xA_1 = a) || (xA_1 = b) then
  let KAs: key = (if xA_1 = a then Kas else Kbs) in
  if (xB_1 = a) || (xB_1 = b) then
  (
    new rKab_1: keyseed;
    let Kab: key = kgen(rKab_1) in
    new r_2: seed;
    out(c3[i_1], (xA_1, encrypt(concat(c0, xB_1, Kab), KAs, r_2)))
  )
  else
    new rKab_2: keyseed;
    let Kab_1: key = kgen(rKab_2) in
    new r_3: seed;
    out(c3[i_1], (xA_1, encrypt(concat(c0, xB_1, Kab_1), KAs, r_3)))
) | (
  ! i_2 <= N
  in(c8[i_2], xB_2: host);
  if (xB_2 = a) || (xB_2 = b) then
  let KBs: key = (if xB_2 = a then Kas else Kbs) in
  out(c9[i_2], ());
  in(c10[i_2], m_2: bitstring);
  let injbot(concat(=c1, xA_2: host, kab: key)) = decrypt(m_2, KBs) in
  if (xA_2 = a) || (xA_2 = b) then
  new r_4: seed;
  out(c11[i_2], encrypt(pad(payload_1), kab, r_4))
) | (
  ! i_3 <= N
  in(c6[i_3], (xA_3: host, m_3: bitstring));
  find jA = jA_1 <= N2 suchthat defined(Khs[jA_1], h[jA_1]) && (xA_3 = h[jA_1]) then
  let KAs_1: key = Khs[jA] in
  let injbot(concat(=c0, xB_3: host, kab_1: key)) = decrypt(m_3, KAs_1) in
  find jB = jB_1 <= N2 suchthat defined(Khs[jB_1], h[jB_1]) && (xB_3 = h[jB_1]) then
  let KBs_1: key = Khs[jB] in
  new r_5: seed;
  out(c7[i_3], encrypt(concat(c1, xA_3, kab_1), KBs_1, r_5))
) | (
  ! i_4 <= N2
  in(c12[i_4], (h: host, k: key));
  let Khs: key = (if h = a then Kas else if h = b then Kbs else k)
))




(* EXPECTED
All queries proved.
0.780s (user 0.744s + system 0.036s), max rss 72176K
END *)
