(* Version in which the participants only talk to A and B 
   Using two series of function symbols to prevent repeated applications
   of the same cryptographic rule.
*)

param N.
param N2.
param N3.

type nonce [large,fixed].
type host [bounded].
type mkey [bounded].
type mkeyseed [fixed].
type key [fixed].
type keyseed [fixed].
type seed [fixed].
type macs [fixed].
type maxenc [bounded].
type maxmac [bounded].

fun concat1(nonce, nonce, host, host):maxenc [data].
fun concat2(nonce, key):maxenc [data].

equation forall y:nonce,z:nonce,t:host,u:host, y2:nonce,z2:key; concat1(y,z,t,u) <> concat2(y2,z2).

(* Shared-key encryption (CPA Stream cipher) *)

proba Penc.

expand IND_CPA_sym_enc(keyseed, key, maxenc, maxmac, seed, kgen, enc, dec, injbot, Z, Penc).

(* The function Z returns for each bitstring, a bitstring
   of the same length, consisting only of zeroes. *)
const Zconcat1:maxenc.
const Zconcat2:maxenc.
equation forall y:nonce,z:nonce,t:host,u:host; 
	Z(concat1(y,z,t,u)) = Zconcat1.
equation forall y:nonce,z:key; 
	Z(concat2(y,z)) = Zconcat2.

(* Mac *)

proba Pmac.

expand UF_CMA_mac(mkeyseed, mkey, maxmac, macs, mkgen, mac, check, Pmac).

(* Queries *)

query secret keyA [onesession].
query secret keyB [onesession].

query secret keyA.
query secret keyB.

channel c1, c2, c3, c4, c5, c6, c7, c8, c9, start, finish.
const A : host.
const B : host.

event endA(host, host, nonce, key).
event endB(host, host, nonce, key).
event beginA(host, host, nonce).
event beginB(host, host, nonce).

query k: key, n: nonce, y: host, x: host;
  event(endA(x, y, n, k)) ==> event(beginB(x, y, n)) public_vars keyA, keyB.
query k: key, n: nonce, y: host, x: host;
  event(endB(x, y, n, k)) ==> event(beginA(x, y, n)) public_vars keyA, keyB.
query k: key, n: nonce, y: host, x: host;
  inj-event(endA(x, y, n, k)) ==> inj-event(beginB(x, y, n)) public_vars keyA, keyB.
query k: key, n: nonce, y: host, x: host;
  inj-event(endB(x, y, n, k)) ==> inj-event(beginA(x, y, n)) public_vars keyA, keyB.







	
process 
	in(start, ());
new rKas: keyseed;
let Kas: key = kgen(rKas) in
new rmKas: mkeyseed;
let mKas: mkey = mkgen(rmKas) in
new rKbs: keyseed;
let Kbs: key = kgen(rKbs) in
new rmKbs: mkeyseed;
let mKbs: mkey = mkgen(rmKbs) in
out(c9, ());
((
  ! i_1 <= N
  in(start[i_1], ());
  new M_1: nonce;
  new Na_1: nonce;
  new s1: seed;
  let ea1: maxmac = enc(concat1(Na_1, M_1, A, B), Kas, s1) in
  event beginA(A, B, M_1);
  out(c1[i_1], (M_1, A, B, ea1, mac(ea1, mKas)));
  in(c2[i_1], (=M_1, ea2_1: maxmac, ma2_1: macs));
  if check(ea2_1, mKas, ma2_1) then
  let injbot(concat2(=Na_1, k: key)) = dec(ea2_1, Kas) in
  event endA(A, B, M_1, k);
  let keyA: key = k
) | (
  ! i_2 <= N
  in(c3[i_2], (M_2: nonce, =A, =B, ea: maxmac, ma_1: macs));
  new Nb_1: nonce;
  new s2: seed;
  let e2: maxmac = enc(concat1(Nb_1, M_2, A, B), Kbs, s2) in
  event beginB(A, B, M_2);
  out(c4[i_2], (M_2, A, B, ea, ma_1, e2, mac(e2, mKbs)));
  in(c5[i_2], (=M_2, ea2_2: maxmac, ma2_2: macs, eb2: maxmac, mb2: macs));
  if check(eb2, mKbs, mb2) then
  let injbot(concat2(=Nb_1, k_1: key)) = dec(eb2, Kbs) in
  out(c6[i_2], (M_2, ea2_2, ma2_2));
  in(finish[i_2], ());
  event endB(A, B, M_2, k_1);
  let keyB: key = k_1
) | (
  ! i_3 <= N
  in(c7[i_3], (M_3: nonce, =A, =B, ea1_1: maxmac, ma1: macs, eb1: maxmac, mb1: macs));
  if check(ea1_1, mKas, ma1) then
  let injbot(concat1(Na_2: nonce, =M_3, =A, =B)) = dec(ea1_1, Kas) in
  if check(eb1, mKbs, mb1) then
  let injbot(concat1(Nb_2: nonce, =M_3, =A, =B)) = dec(eb1, Kbs) in
  new k_2: key;
  new s3: seed;
  new s4: seed;
  let e1: maxmac = enc(concat2(Na_2, k_2), Kas, s3) in
  let e2_1: maxmac = enc(concat2(Nb_2, k_2), Kbs, s4) in
  out(c8[i_3], (M_3, e1, mac(e1, mKas), e2_1, mac(e2_1, mKbs)))
))



(* EXPECTED
RESULT Could not prove inj-event(endB(x, y, n, k)) ==> inj-event(beginA(x, y, n)) with public variables keyA, keyB.
0.200s (user 0.184s + system 0.016s), max rss 47888K
END *)
