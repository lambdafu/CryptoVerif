(* Needham Schroeder shared key protocol.
   Removed last two messages of key confirmation, so that
   the secrecy of the key is preserved in the cryptographic sense.
   Semantic security of the key should not be preserved, due to a
   (well-known) flaw in the protocol.
 *)

param N.
param N2.
param N3.

type nonce [large,fixed].
type host [bounded].
type mkey [bounded].
type mkeyseed [fixed].
type key [fixed].
type keyseed [fixed].
type seed [fixed].
type macs [fixed].

fun concat1(nonce, host, key, macs, bitstring):bitstring [data].
fun concat3(key, host):bitstring [data].
equation forall y:key,z:host,y2:nonce,z2:host,t2:key,u2:macs,v2:bitstring;
	concat3(y,z) <> concat1(y2,z2,t2,u2,v2).

(* Shared-key encryption (CPA Stream cipher) *)

proba Penc.

expand IND_CPA_sym_enc(keyseed, key, bitstring, bitstring, seed, kgen, enc, dec, injbot, Z, Penc).

(* The function Z returns for each bitstring, a bitstring
   of the same length, consisting only of zeroes. *)
fun Zconcat1(bitstring):bitstring.
const Zconcat3:bitstring.
equation forall y:nonce,z:host,t:key,v:macs,u:bitstring;
	Z(concat1(y,z,t,v,u)) = Zconcat1(Z(u)).
equation forall y:key,z:host; 
	Z(concat3(y,z)) = Zconcat3.
equation forall m:bitstring, r:keyseed, r2:seed; 
	Z(enc(m, kgen(r), r2)) = Z(m).

(* Mac *)

proba Pmac.

expand UF_CMA_mac(mkeyseed, mkey, bitstring, macs, mkgen, mac, check, Pmac).

(* Queries *)

query secret keyA [cv_onesession].
query secret keyB [cv_onesession].

query secret keyA.
query secret keyB.

channel c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, start, finish.
const A : host.
const B : host.









process 
	in(start, ());
new rKas: keyseed;
let Kas: key = kgen(rKas) in
new rmKas: mkeyseed;
let mKas: mkey = mkgen(rmKas) in
new rKbs: keyseed;
let Kbs: key = kgen(rKbs) in
new rmKbs: mkeyseed;
let mKbs: mkey = mkgen(rmKbs) in
out(c11, ());
((
  ! i_1 <= N
  in(c1[i_1], h_1: host);
  new Na: nonce;
  out(c2[i_1], (A, h_1, Na));
  in(c3[i_1], (m2: bitstring, mac2_2: macs));
  if check(m2, mKas, mac2_2) then
  let injbot(concat1(=Na, =h_1, k: key, mac3: macs, m_2: bitstring)) = dec(m2, Kas) in
  out(c4[i_1], (m_2, mac3));
  in(finish[i_1], ());
  if h_1 = B then
  (
    let keyA: key = k
  )
  else
    out(c9[i_1], k)
) | (
  ! i_2 <= N
  in(c5[i_2], (m4: bitstring, mac4: macs));
  if check(m4, mKbs, mac4) then
  let injbot(concat3(k_1: key, h_2: host)) = dec(m4, Kbs) in
  if h_2 = A then
  (
    let keyB: key = k_1
  )
  else
    out(c10[i_2], k_1)
) | (
  ! i_3 <= N
  in(c7[i_3], (h1: host, h2: host, n: nonce));
  find j1 = j1_1 <= N2 suchthat defined(Khost[j1_1], Rmkey[j1_1], Rkey[j1_1]) && (Khost[j1_1] = h1) then
  find j2 = j2_1 <= N2 suchthat defined(Khost[j2_1], Rmkey[j2_1], Rkey[j2_1]) && (Khost[j2_1] = h2) then
  new k_2: key;
  new r3: seed;
  let e3: bitstring = enc(concat3(k_2, h1), Rkey[j2], r3) in
  let mac3_1: macs = mac(e3, Rmkey[j2]) in
  new r4: seed;
  let e4: bitstring = enc(concat1(n, h2, k_2, mac3_1, e3), Rkey[j1], r4) in
  out(c8[i_3], (e4, mac(e4, Rmkey[j1])))
) | (
  ! i_4 <= N2
  in(c6[i_4], (Khost: host, Kkey: key, Kmkey: mkey));
  let Rkey: key = (if Khost = A then Kas else if Khost = B then Kbs else Kkey) in
  let Rmkey: mkey = (if Khost = A then mKas else if Khost = B then mKbs else Kmkey)
))




(* EXPECTED
RESULT Could not prove secrecy of keyB.
0.404s (user 0.392s + system 0.012s), max rss 61664K
END *)
