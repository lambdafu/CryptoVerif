(* encryption scheme by Bellare and Rogaway, Random Oracles are
Practical: a Paradigm for Designing Efficient Protocols, CCS'93, 
section 3.2: variant
	E(x) = f(r) || H(r) xor x || H2(r || H(r) xor x) 
(CCA2) *)

(* In order to determine the proof, use interactive mode: 
   set interactiveMode = true.
The proof is as follows: *)

proof {
crypto rom(hash);
show_game occ;
insert 57 "let concat(xh2',xh2'') = xh2 in"; 
       (* inserted just before "out(hc4, ...)" to distinguish 
          cases depending on whether xh2 is concat(...) or not *)
crypto rom(hash2);
remove_assign binder pk;
crypto ow(f) r_3;
crypto remove_xor(xor) *;
success
}

(*
NOTE: When allowing move of lets, CryptoVerif swaps hash2 and hash
in the decryption oracle. Correspondingly, we need to swap 
crypto hash2 and crypto hash in proof...


After crypto f r, the simplification proceeds as follows:
(This is an old version of the games.)

in(start, ());
new r_94: keyseed;
out(c9, pkgen2(r_94));
(
  (
    (
      ! !_39 <= N
      in(c1[!_39], x_50: seed);
      new r2_83: hasht;
      find @i_91 <= N3 suchthat defined(r_78[@i_91], a[@i_91], r2_80[@i_91]) && (f(pkgen2(r_94), x_50) = a[@i_91]) then
        out(c2[!_39], r2_80[@i_91]);
        0
      orfind @i_90 <= N suchthat defined(r_81[@i_90], x_50[@i_90], r2_83[@i_90]) && (x_50 = x_50[@i_90]) then
        out(c2[!_39], r2_83[@i_90]);
        0
      else
        let r_81: bitstring = cst_bitstring in
        out(c2[!_39], r2_83);
        0
    |
      ! !_40 <= N
      in(c1[!_40], (x_49: seed, y: hasht));
      new r2_65: hasht2;
      find @i_73 <= N3 suchthat defined(r_58[@i_73], a[@i_73], b[@i_73], r2_61[@i_73]) && ((f(pkgen2(r_94), x_49) = a[@i_73]) && (y = b[@i_73])) then
        out(c2[!_40], r2_61[@i_73]);
        0
      orfind @i_72 <= N suchthat defined(r_62[@i_72], x_49[@i_72], y[@i_72], r2_65[@i_72]) && ((x_49 = x_49[@i_72]) && (y = y[@i_72])) then
        out(c2[!_40], r2_65[@i_72]);
        0
      else
        let r_62: bitstring = cst_bitstring in
        out(c2[!_40], r2_65);
        0
    )
  |
    ! !_41 <= N3
    in(c5[!_41], (a: seed, b: hasht, c: hasht2));
    find i <= N4 suchthat defined(aT[i], bT[i], cT[i]) && ((a = aT[i]) && ((b = bT[i]) && (c = cT[i]))) then
      0
    else
      new r2_80: hasht;
      find @i_89 <= N4 suchthat defined(r_75[@i_89], y_93[@i_89], r2_77[@i_89]) && (a = f2(pkgen2(r_94), y_93[@i_89])) then
        let m_48: hasht = xor(r2_77[@i_89], b) in
        new r2_61: hasht2;
        find @i_71 <= N4 suchthat defined(r_54[@i_71], bT[@i_71], r2_57[@i_71]) && ((@i_89 = @i_71) && (b = bT[@i_71])) then
          if (c = r2_57[@i_71]) then
		[IMPOSSIBLE here we would have (a = aT[i]) && (b = bT[i]) && (c = cT[i]) for i = @i_89 = @i_71]
        orfind @i_70 <= N3 suchthat defined(r_58[@i_70], a[@i_70], b[@i_70], r2_61[@i_70]) && ((a = a[@i_70]) && (b = b[@i_70])) then
          if (c = r2_61[@i_70]) then
		[IMPOSSIBLE r2_61[@i_70] not published]
        else
          let r_58: bitstring = cst_bitstring in
          if (c = r2_61) then
		[IMPOSSIBLE c does not depend on r2_61]
	[THE ABOVE PART CAN BE REPLACED WITH 0, THUS REMOVING THE REFERENCE TO r2_77]
      orfind @i_88 <= N3 suchthat defined(r_78[@i_88], a[@i_88], r2_80[@i_88]) && (a = a[@i_88]) then
        let m_48: hasht = xor(r2_80[@i_88], b) in
        new r2_61: hasht2;
        find @i_71 <= N4 suchthat defined(r_54[@i_71], y_93[@i_71], bT[@i_71], r2_57[@i_71]) && ((a = f2(pkgen2(r_94), y_93[@i_71])) && (b = bT[@i_71])) then
          if (c = r2_57[@i_71]) then
          out(c6[!_41], m_48);
          0
        orfind @i_70 <= N3 suchthat defined(r_58[@i_70], a[@i_70], b[@i_70], r2_61[@i_70]) && ((a = a[@i_70]) && (b = b[@i_70])) then
          if (c = r2_61[@i_70]) then
          out(c6[!_41], m_48);
          0
        orfind @i_69 <= N suchthat defined(r_62[@i_69], x_49[@i_69], y[@i_69], r2_65[@i_69]) && ((a = f(pkgen2(r_94), x_49[@i_69])) && (b = y[@i_69])) then
          if (c = r2_65[@i_69]) then
          out(c6[!_41], m_48);
          0
        else
          let r_58: bitstring = cst_bitstring in
          if (c = r2_61) then
          out(c6[!_41], m_48);
          0
      orfind @i_87 <= N suchthat defined(r_81[@i_87], x_50[@i_87], r2_83[@i_87]) && (a = f(pkgen2(r_94), x_50[@i_87])) then
        let m_48: hasht = xor(r2_83[@i_87], b) in
        new r2_61: hasht2;
        find @i_70 <= N3 suchthat defined(r_58[@i_70], a[@i_70], b[@i_70], r2_61[@i_70]) && ((a = a[@i_70]) && (b = b[@i_70])) then
          if (c = r2_61[@i_70]) then
          out(c6[!_41], m_48);
          0
        orfind @i_69 <= N suchthat defined(r_62[@i_69], x_49[@i_69], y[@i_69], r2_65[@i_69]) && ((x_50[@i_87] = x_49[@i_69]) && (b = y[@i_69])) then
          if (c = r2_65[@i_69]) then
          out(c6[!_41], m_48);
          0
        else
          let r_58: bitstring = cst_bitstring in
          if (c = r2_61) then
          out(c6[!_41], m_48);
          0
      else
        let r_78: bitstring = cst_bitstring in
        let m_48: hasht = xor(r2_80, b) in
        new r2_61: hasht2;
        find @i_71 <= N4 suchthat defined(r_54[@i_71], y_93[@i_71], bT[@i_71], r2_57[@i_71]) && ((a = f2(pkgen2(r_94), y_93[@i_71])) && (b = bT[@i_71])) then
          if (c = r2_57[@i_71]) then
          out(c6[!_41], m_48);
          0
        orfind @i_70 <= N3 suchthat defined(r_58[@i_70], a[@i_70], b[@i_70], r2_61[@i_70]) && ((a = a[@i_70]) && (b = b[@i_70])) then
          if (c = r2_61[@i_70]) then
          out(c6[!_41], m_48);
          0
        orfind @i_69 <= N suchthat defined(r_62[@i_69], x_49[@i_69], y[@i_69], r2_65[@i_69]) && ((a = f(pkgen2(r_94), x_49[@i_69])) && (b = y[@i_69])) then
          if (c = r2_65[@i_69]) then
          out(c6[!_41], m_48);
          0
        else
          let r_58: bitstring = cst_bitstring in
          if (c = r2_61) then
          out(c6[!_41], m_48);
          0
  )
|
  ! !_42 <= N4
  in(c7[!_42], (m1: hasht, m2: hasht));
  new b1: bool;
  let menc_45: hasht = test(b1, m1, m2) in
  new y_93: seed;
  let aT: seed = f2(pkgen2(r_94), y_93) in
  new r2_77: hasht;
  find @i_86 <= N4 suchthat defined(r_75[@i_86], r2_77[@i_86]) && (!_42 = @i_86) then
	[IMPOSSIBLE r_75[!_42] defined later]
  orfind @i_85 <= N3 suchthat defined(r_78[@i_85], a[@i_85], r2_80[@i_85]) && (f2(pkgen2(r_94), y_93) = a[@i_85]) then
	[IMPOSSIBLE a[@i_85] does not depend on y_93 and f2(pkgen2(r_94), y_93) characterizes y_93]
  else
    let r_75: bitstring = cst_bitstring in
    let bT: hasht = xor(r2_77, menc_45) in
    new r2_57: hasht2;
    find @i_68 <= N4 suchthat defined(r_54[@i_68], bT[@i_68], r2_57[@i_68]) && ((!_42 = @i_68) && (bT = bT[@i_68])) then
	[IMPOSSIBLE r_54[!_42] defined later]
    orfind @i_67 <= N3 suchthat defined(r_58[@i_67], a[@i_67], b[@i_67], r2_61[@i_67]) && ((f2(pkgen2(r_94), y_93) = a[@i_67]) && (bT = b[@i_67])) then
	[IMPOSSIBLE a[@i_67] does not depend on y_93 and f2(pkgen2(r_94), y_93) characterizes y_93]
    else
      let r_54: bitstring = cst_bitstring in
      let cT: hasht2 = r2_57 in
      out(c8[!_42], (aT, bT, r2_57));
      0
)



finally remains

  ! !_42 <= N4
  in(c7[!_42], (m1: hasht, m2: hasht));
  new b1: bool;
  let menc_45: hasht = test(b1, m1, m2) in
  new y_93: seed;
  let aT: seed = f2(pkgen2(r_94), y_93) in
  new r2_77: hasht;
    let r_75: bitstring = cst_bitstring in
    let bT: hasht = xor(r2_77, menc_45) in
    new r2_57: hasht2;
      let r_54: bitstring = cst_bitstring in
      let cT: hasht2 = r2_57 in
      out(c8[!_42], (aT, bT, r2_57));
      0

and one can apply crypto xor r2_77
*)

param nx, qD.

type pkey [bounded].
type skey [bounded].
type keyseed [large,fixed].
type hasht [large,fixed].
type hasht2 [large,fixed].
type seed [large,fixed]. 

(* One-way trapdoor permutation *)

proba POW.

expand OW_trapdoor_perm(keyseed, pkey, skey, seed, pkgen, skgen, f, mf, POW).

(* Hash function, random oracle model *)

type hashkey [fixed].

expand ROM_hash(hashkey, seed, hasht, hash).

param qH [noninteractive].
channel hc1, hc2.


(* Another hash function, random oracle model *)

expand ROM_hash(hashkey, bitstring, hasht2, hash2).

fun concat(seed,hasht):bitstring [data].

param qH2 [noninteractive].
channel hc3, hc4.


(* Xor *)

expand Xor(hasht, xor, zero).

(* Implementing a test as a function.
   Useful to avoid expanding if, which is necessary for this proof. *)

fun test(bool, hasht, hasht):hasht.
equation forall x:hasht,y:hasht; test(true,x,y) = x.
equation forall x:hasht,y:hasht; test(false,x,y) = y.

(* Queries *)

query secret b1 [onesession].

channel c5, c6, c7, c8, c9, hstart, hret, start.





process 
	in(hstart, ());
new hk: hashkey;
new hk2: hashkey;
out(hret, ());
((
  ! i_1 <= qH
  in(hc1[i_1], x_5: seed);
  out(hc2[i_1], hash(hk, x_5))
) | (
  ! i_2 <= qH2
  in(hc3[i_2], xh2: bitstring);
  out(hc4[i_2], hash2(hk2, xh2))
) | (
  in(start, ());
  new r_3: keyseed;
  let sk: skey = skgen(r_3) in
  let pk: pkey = pkgen(r_3) in
  out(c9, pk);
  ((
    ! i_3 <= qD
    in(c5[i_3], (a_1: seed, b: hasht, c: hasht2));
    if defined(aT, bT, cT) && (a_1 = aT) && (b = bT) && (c = cT) then
      yield
    else
      let x_6: seed = mf(sk, a_1) in
      let m: hasht = xor(hash(hk, x_6), b) in
      if c = hash2(hk2, concat(x_6, b)) then
      out(c6[i_3], m)
  ) | (
    in(c7, (m1: hasht, m2: hasht));
    new b1: bool;
    let menc: hasht = test(b1, m1, m2) in
    new x_7: seed;
    let aT: seed = f(pk, x_7) in
    let bT: hasht = xor(hash(hk, x_7), menc) in
    let cT: hasht2 = hash2(hk2, concat(x_7, bT)) in
    out(c8, (aT, bT, cT))
  ))
))




(* EXPECTED
All queries proved.
0.116s (user 0.108s + system 0.008s), max rss 44288K
END *)
