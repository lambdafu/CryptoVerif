(* Signed Diffie-Hellman protocol
   This file proves a forward secrecy property. *)

param N, N2.

type host [bounded].
type keyseed [large,fixed].
type seed [fixed].
type pkey [bounded].
type skey [bounded].
type blocksize [bounded].
type signature [bounded].

type Z [large,bounded].
type G [large,bounded].
type D [fixed].

proof {
success; (* prove query x:G, y:G, k:D, k':D; event endB(A, B, x, y, k) && endA(A, B, x, y, k') ==> k = k'. *)
crypto uf_cma_corrupt(sign) rkA;
success; (* prove query x:G, y:G, k:D; event inj:endB(A, B, x, y, k) ==> inj:endA(A, B, x, y, k) || evAcorrupted. *)
crypto uf_cma_corrupt(sign) rkB;
success; (* prove query x:G, y:G, k:D; event inj:endA(A, B, x, y, k) ==> inj:beginB(A, B, x, y) || evBcorrupted. *)
crypto rom(h);
crypto cdh(exp) a_1 b_1;
simplify;
success
}

(* the CDH assumption *) 

proba pCDH.

expand CDH(G, Z, g, exp, mult, pCDH).

(* h in the random oracle model *)

type hashkey [fixed].

expand ROM_hash(hashkey, G, D, h).

param nH [noninteractive].
channel hc1, hc2.


(* signatures *)

fun concatA(host, host, G, G):blocksize [data].
fun concatB(host, host, G, G):blocksize [data].
equation forall x:host, y:host, z:G, t:G, x':host, y':host, z':G, t':G;
   concatA(x,y,z,t) <> concatB(x',y',z',t').
    
proba Psign.
proba Psigncoll.

expand UF_CMA_signature(keyseed, pkey, skey, blocksize, signature, seed, skgen, pkgen, sign, check, Psign, Psigncoll).

const A,B:host.

(* query *)
query secret kA_secret.

event endA(host, host, G, G, D).
event beginB(host, host, G, G).
event endB(host, host, G, G, D).
event evAcorrupted.
event evBcorrupted.

query k: D, y: G, x: G;
  inj-event(endA(A, B, x, y, k)) ==> (inj-event(beginB(A, B, x, y)) || event(evBcorrupted)) public_vars kA_secret.
query k: D, y: G, x: G;
  inj-event(endB(A, B, x, y, k)) ==> (inj-event(endA(A, B, x, y, k)) || event(evAcorrupted)) public_vars kA_secret.
query k': D, k: D, y: G, x: G;
  event(endB(A, B, x, y, k)) && event(endA(A, B, x, y, k')) ==> (k = k') public_vars kA_secret.

channel start, cstart, cA1, cA2, cA3, cA4, cA5, cA6, cA7, cA8, cB1, cB2, cB3, cB4, cB5, cB6, cH, cHret, cK, cCorruptA, cCorruptB.











process
	in(start, ());
new hk: hashkey;
new rkA: keyseed;
let skA: skey = skgen(rkA) in
let pkA: pkey = pkgen(rkA) in
new rkB: keyseed;
let skB: skey = skgen(rkB) in
let pkB: pkey = pkgen(rkB) in
out(cstart, (pkA, pkB));
((
  ! i_1 <= N
  in(cA1[i_1], hostB: host);
  new a_1: Z;
  let Aga: G = exp(g, a_1) in
  out(cA2[i_1], (A, hostB, Aga));
  in(cA3[i_1], (=A, =hostB, Agb: G, s_1: signature));
  find j2_3 = j2_1 <= N2 suchthat defined(Khost[j2_1], Rkey[j2_1]) && (Khost[j2_1] = hostB) then
  let pkhostB: pkey = Rkey[j2_3] in
  if check(concatB(A, hostB, Aga, Agb), pkhostB, s_1) then
  new r2_1: seed;
  let sA: signature = sign(concatA(A, hostB, Aga, Agb), skA, r2_1) in
  let gab: G = exp(Agb, a_1) in
  let kA: D = h(hk, gab) in
  event endA(A, hostB, Aga, Agb, kA);
  out(cA4[i_1], sA);
  in(cA5[i_1], ());
  if hostB = B then
  (
    if defined(Acorrupted) then
      out(cA6[i_1], kA)
    else
      if defined(Bcorrupted) then
        out(cA6[i_1], kA)
      else
        let kA_secret: D = kA
  )
  else
    out(cA6[i_1], kA)
) | (
  ! i_2 <= N
  in(cB1[i_2], (hostA: host, =B, Bga: G));
  new b_1: Z;
  let Bgb: G = exp(g, b_1) in
  new r1_1: seed;
  event beginB(hostA, B, Bga, Bgb);
  out(cB2[i_2], (hostA, B, Bgb, sign(concatB(hostA, B, Bga, Bgb), skB, r1_1)));
  in(cB3[i_2], s_2: signature);
  find j2_4 = j2_2 <= N2 suchthat defined(Khost[j2_2], Rkey[j2_2]) && (Khost[j2_2] = hostA) then
  let pkhostA: pkey = Rkey[j2_4] in
  if check(concatA(hostA, B, Bga, Bgb), pkhostA, s_2) then
  let gab_1: G = exp(Bga, b_1) in
  let kB: D = h(hk, gab_1) in
  event endB(hostA, B, Bga, Bgb, kB);
  if hostA = A then
    find j_14 = j_15 <= N suchthat defined(hostB[j_15], Aga[j_15], Agb[j_15], kA[j_15]) && (hostB[j_15] = B) && (Aga[j_15] = Bga) && (Agb[j_15] = Bgb) then
      yield
    else
      out(cB4[i_2], kB)
  else
    out(cB4[i_2], kB)
) | (
  ! i_3 <= nH
  in(hc1[i_3], x_3: G);
  out(hc2[i_3], h(hk, x_3))
) | (
  ! i_4 <= N2
  in(cK[i_4], (Khost: host, Kkey: pkey));
  let Rkey: pkey = (if Khost = B then pkB else if Khost = A then pkA else Kkey)
) | (
  in(cCorruptA, ());
  let Acorrupted: bool = true in
  event evAcorrupted;
  out(cCorruptA, skA)
) | (
  in(cCorruptB, ());
  let Bcorrupted: bool = true in
  event evBcorrupted;
  out(cCorruptB, skB)
))



(* EXPECTED
All queries proved.
3.484s (user 3.440s + system 0.044s), max rss 118992K
END *)
