(* encryption scheme by Bellare and Rogaway, Random Oracles are
Practical: a Paradigm for Designing Efficient Protocols, CCS'93, 
section 3.1: E(x) = f(r) || H(r) xor x (CPA) *)

(* In order to determine the proof, use interactive mode: 
   set interactiveMode = true.
The proof is as follows: *)

proof {
crypto rom(hash);
remove_assign binder pk;
crypto ow(f) r_2;
crypto remove_xor(xor) *;
success
}

param nx.

type key [bounded].
type keyseed [large,fixed].
type hasht [large,fixed].
type seed [large,fixed]. 

(* One-way trapdoor permutation *)

proba POW.

expand OW_trapdoor_perm(keyseed, key, key, seed, pkgen, skgen, f, mf, POW).

(* Hash function, random oracle model *)

type hashkey [fixed].

expand ROM_hash(hashkey, seed, hasht, hash).

param qH [noninteractive].
channel hc1, hc2.


(* Xor *)

expand Xor(hasht, xor, zero).

(* Implementing a test as a function.
   Useful to avoid expanding if, which is necessary for this proof. *)

fun test(bool, hasht, hasht):hasht.
equation forall x:hasht,y:hasht; test(true,x,y) = x.
equation forall x:hasht,y:hasht; test(false,x,y) = y.

(* Queries *)

query secret b1 [onesession].

channel c1, c2, c3, c4, c5, hstart, hret, start.



process 
	in(hstart, ());
new hk: hashkey;
out(hret, ());
((
  ! i_1 <= qH
  in(hc1[i_1], x_4: seed);
  out(hc2[i_1], hash(hk, x_4))
) | (
  in(start, ());
  new r_2: keyseed;
  let sk: key = skgen(r_2) in
  let pk: key = pkgen(r_2) in
  out(c5, pk);
  in(c3, (m1: hasht, m2: hasht));
  new b1: bool;
  let menc: hasht = test(b1, m1, m2) in
  new x_5: seed;
  let a_1: seed = f(pk, x_5) in
  let b: hasht = xor(hash(hk, x_5), menc) in
  out(c4, (a_1, b))
))




(* EXPECTED
All queries proved.
0.036s (user 0.032s + system 0.004s), max rss 40448K
END *)
