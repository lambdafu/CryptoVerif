(*

Woo and Lam public-key auth protocol (1997)

A -> B: A
B -> A: N
A -> B: { A, B, N }_skA
B -> S: A
S -> B: A, { A, pkA }_skS

Correct


SArename Rkey
crypto sign rkS
crypto sign rkA
success

Session identifier: (A, N)
Authentication in one direction only.
The adversary can forge a signature for a message that has already
been signed, so the signature {A,B,N}_skA is not authenticated.

*)

param N.
param N2.
param N3.
param N4.

type nonce [large,fixed].
type host [bounded].
type pkey [bounded].
type skey [bounded].
type keyseed [large,fixed].
type seed [fixed].
type signature [bounded].
type blocksize [fixed].
type blocksizebot [bounded].

fun concat1(host, host, nonce):blocksize [data].
fun concat2(host, pkey):blocksize [data].

forall x:host, y:host, z:nonce, x2:host, y2:pkey;
	concat1(x,y,z) <> concat2(x2,y2).

(* Signatures *)

proba Psign.
proba Psigncoll.

expand UF_CMA_signature(keyseed, pkey, skey, blocksize, signature, seed, sskgen, spkgen, sign, check, Psign, Psigncoll).

(* Queries *)

channel c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14,
	start, finish.

const A:host.
const B:host.
fun acceptA(host):bitstring.
fun acceptB(host):bitstring.

event fullA(host,bitstring).
event fullB(host,bitstring).

query y: bitstring;
  inj-event(fullB(A, y)) ==> inj-event(fullA(B, y)).










process 
	in(start, ());
new rkA: keyseed;
let pkA: pkey = spkgen(rkA) in
let skA: skey = sskgen(rkA) in
new rkB: keyseed;
let pkB: pkey = spkgen(rkB) in
let skB: skey = sskgen(rkB) in
new rkS: keyseed;
let pkS: pkey = spkgen(rkS) in
let skS: skey = sskgen(rkS) in
out(c13, (pkA, pkB, pkS));
((
  ! i_1 <= N
  in(c1[i_1], hostB0: host);
  out(c2[i_1], A);
  in(c3[i_1], n_1: nonce);
  new r1_1: seed;
  let m3: signature = sign(concat1(A, hostB0, n_1), skA, r1_1) in
  event fullA(hostB0, (A, n_1));
  out(c4[i_1], (m3, acceptA(hostB0)))
) | (
  ! i_2 <= N
  in(c5[i_2], hostA0: host);
  new n_2: nonce;
  out(c6[i_2], n_2);
  in(c7[i_2], m_1: signature);
  out(c8[i_2], hostA0);
  in(c9[i_2], (=hostA0, pkA2: pkey, m4: signature));
  if check(concat2(hostA0, pkA2), pkS, m4) then
  if check(concat1(hostA0, B, n_2), pkA2, m_1) then
  event fullB(hostA0, (hostA0, n_2));
  out(c14[i_2], acceptB(hostA0))
) | (
  ! i_3 <= N
  in(c10[i_3], hostA: host);
  find j2 = j2_1 <= N2 suchthat defined(Khost[j2_1], Rkey[j2_1]) && (Khost[j2_1] = hostA) then
  let pka: pkey = Rkey[j2] in
  new r2_1: seed;
  out(c11[i_3], (hostA, pka, sign(concat2(hostA, pka), skS, r2_1)))
) | (
  ! i_4 <= N2
  in(c12[i_4], (Khost: host, Kkey: pkey));
  let Rkey: pkey = (if Khost = A then pkA else if Khost = B then pkB else Kkey)
))




(* EXPECTED
All queries proved.
0.116s (user 0.108s + system 0.008s), max rss 44272K
END *)
