(* Needham Schroeder shared key protocol.
   Corrected version.
   Removed last two messages of key confirmation, so that
   the secrecy of the key is preserved in the cryptographic sense. *)

param N.
param N2.
param N3.

type nonce [large,fixed].
type host [bounded].
type mkey [bounded].
type mkeyseed [fixed].
type key [fixed].
type keyseed [fixed].
type seed [fixed].
type macs [fixed].

fun concat1(nonce, host, key, macs, bitstring):bitstring [data].
fun concat2(host, nonce):bitstring [data].
fun concat3(key, host, nonce):bitstring [data].

equation forall y:key,z:host,t:nonce,y2:nonce,z2:host,t2:key,u2:macs,v2:bitstring;
	concat3(y,z,t) <> concat1(y2,z2,t2,u2,v2).
equation forall z:host,t:nonce,y2:nonce,z2:host,t2:key,u2:macs,v2:bitstring;
	concat2(z,t) <> concat1(y2,z2,t2,u2,v2).
equation forall z:host,t:nonce,y2:key,z2:host,t2:nonce;
	concat2(z,t) <> concat3(y2,z2,t2).

(* Shared-key encryption (CPA Stream cipher) *)

proba Penc.

expand IND_CPA_sym_enc(keyseed, key, bitstring, bitstring, seed, kgen, enc, dec, injbot, Z, Penc).

(* The function Z returns for each bitstring, a bitstring
   of the same length, consisting only of zeroes. *)
fun Zconcat1(bitstring):bitstring.
const Zconcat2:bitstring.
const Zconcat3:bitstring.
equation forall y:nonce,z:host,t:key,v:macs,u:bitstring;
	Z(concat1(y,z,t,v,u)) = Zconcat1(Z(u)).
equation forall y:host,z:nonce; 
	Z(concat2(y,z)) = Zconcat2.
equation forall y:key,z:host,t:nonce; 
	Z(concat3(y,z,t)) = Zconcat3.
equation forall m:bitstring, r:keyseed, r2:seed; 
	Z(enc(m, kgen(r), r2)) = Z(m).

(* Mac *)

proba Pmac.

expand UF_CMA_mac(mkeyseed, mkey, bitstring, macs, mkgen, mac, check, Pmac).

(* Queries *)

channel c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13,
	start, cAK, cBK.
const A : host.
const B : host.
fun acceptA(host):bitstring.
fun acceptB(host):bitstring.

event partA(host, bitstring).
event fullA(host, key, bitstring).
event partB(host, bitstring).
event fullB(host, key, bitstring).

query x: bitstring;
  event(partA(B, x)) ==> event(partB(A, x)) public_vars keyA.
query x: bitstring, k: key;
  event(fullB(A, k, x)) ==> event(fullA(B, k, x)) public_vars keyA.
query x: bitstring;
  inj-event(partA(B, x)) ==> inj-event(partB(A, x)) public_vars keyA.
query x: bitstring, k: key;
  inj-event(fullB(A, k, x)) ==> inj-event(fullA(B, k, x)) public_vars keyA.
query k': key, x: bitstring, k: key;
  event(fullA(B, k, x)) && event(fullB(A, k', x)) ==> (k = k') public_vars keyA.

query secret keyA [cv_onesession].
query secret keyA.









process 
	in(start, ());
new rKas: keyseed;
let Kas: key = kgen(rKas) in
new rmKas: mkeyseed;
let mKas: mkey = mkgen(rmKas) in
new rKbs: keyseed;
let Kbs: key = kgen(rKbs) in
new rmKbs: mkeyseed;
let mKbs: mkey = mkgen(rmKbs) in
out(start, ());
((
  ! i_1 <= N
  in(c1[i_1], (h_1: host, bm_1: bitstring, mac1_1: macs));
  new Na: nonce;
  out(c3[i_1], (A, h_1, Na, bm_1, mac1_1));
  in(c4[i_1], (m2: bitstring, mac2_2: macs));
  if check(m2, mKas, mac2_2) then
  let injbot(concat1(=Na, =h_1, k: key, mac3: macs, m_2: bitstring)) = dec(m2, Kas) in
  event partA(h_1, ());
  event fullA(h_1, k, m_2);
  if h_1 = B then
  (
    let keyA: key = k in
    out(c5[i_1], (m_2, mac3, acceptA(h_1)))
  )
  else
    out(c5[i_1], (m_2, mac3, acceptA(h_1)));
    in(cAK[i_1], ());
    out(cAK[i_1], k)
) | (
  ! i_2 <= N
  in(c6[i_2], h_2: host);
  new J: nonce;
  new r2_1: seed;
  let e2: bitstring = enc(concat2(h_2, J), Kbs, r2_1) in
  event partB(h_2, ());
  out(c7[i_2], (e2, mac(e2, mKbs)));
  in(c8[i_2], (m4: bitstring, mac4: macs));
  if check(m4, mKbs, mac4) then
  let injbot(concat3(k_1: key, =h_2, =J)) = dec(m4, Kbs) in
  event fullB(h_2, k_1, m4);
  if h_2 = A then
    out(c12[i_2], acceptB(h_2))
  else
    out(c12[i_2], acceptB(h_2));
    in(cBK[i_2], ());
    out(cBK[i_2], k_1)
) | (
  ! i_3 <= N
  in(c10[i_3], (h1: host, h2: host, n: nonce, bm_2: bitstring, mac1_2: macs));
  find j1 = j1_1 <= N2 suchthat defined(Khost[j1_1], Rmkey[j1_1], Rkey[j1_1]) && (Khost[j1_1] = h1) then
  find j2 = j2_1 <= N2 suchthat defined(Khost[j2_1], Rmkey[j2_1], Rkey[j2_1]) && (Khost[j2_1] = h2) then
  if check(bm_2, Rmkey[j2], mac1_2) then
  let injbot(concat2(=h1, j_9: nonce)) = dec(bm_2, Rkey[j2]) in
  new k_2: key;
  new r3: seed;
  let e3: bitstring = enc(concat3(k_2, h1, j_9), Rkey[j2], r3) in
  let mac3_1: macs = mac(e3, Rmkey[j2]) in
  new r4: seed;
  let e4: bitstring = enc(concat1(n, h2, k_2, mac3_1, e3), Rkey[j1], r4) in
  out(c11[i_3], (e4, mac(e4, Rmkey[j1])))
) | (
  ! i_4 <= N2
  in(c9[i_4], (Khost: host, Kkey: key, Kmkey: mkey));
  let Rkey: key = (if Khost = A then Kas else if Khost = B then Kbs else Kkey) in
  let Rmkey: mkey = (if Khost = A then mKas else if Khost = B then mKbs else Kmkey)
))




(* EXPECTED
RESULT Could not prove event(fullA(B, k, x)) && event(fullB(A, k', x)) ==> (k = k') with public variables keyA; inj-event(fullB(A, k, x)) ==> inj-event(fullA(B, k, x)) with public variables keyA; inj-event(partA(B, x)) ==> inj-event(partB(A, x)) with public variables keyA; event(fullB(A, k, x)) ==> event(fullA(B, k, x)) with public variables keyA.
0.920s (user 0.916s + system 0.004s), max rss 19148K
END *)
