(*
Running example for correspondences paper.
Inspired freely from Woo and Lam public-key auth protocol (1997)

B -> A: N, B
A -> B: { pkA, B, N }_skA

*)

param N.
param N2.
param N3.
param N4.

type nonce [large,fixed].
type host [bounded].
type pkey [bounded].
type skey [bounded].
type keyseed [large,fixed].
type seed [fixed].
type signature [bounded].
type blocksize [fixed].
type blocksizebot [bounded].

fun concat1(pkey, host, nonce):blocksize [data].

(* Signatures *)

proba Psign.
proba Psigncoll.

expand UF_CMA_signature(keyseed, pkey, skey, blocksize, signature, seed, skgen, pkgen, sign, check, Psign, Psigncoll).

(* Queries *)

channel c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13.
const B:host.
event eA(pkey,host,nonce).
event eB(pkey,host,nonce).

query z: nonce, y: host, x: pkey;
  event(eB(x, y, z)) ==> event(eA(x, y, z)).
query z: nonce, y: host, x: pkey;
  inj-event(eB(x, y, z)) ==> inj-event(eA(x, y, z)).





process 
	in(c0, ());
new rkA: keyseed;
let pkA: pkey = pkgen(rkA) in
let skA: skey = skgen(rkA) in
out(c1, pkA);
((
  ! i_1 <= N
  in(c2[i_1], (xN: nonce, xB: host));
  event eA(pkA, xB, xN);
  new r_1: seed;
  out(c3[i_1], sign(concat1(pkA, xB, xN), skA, r_1))
) | (
  ! i_2 <= N
  in(c4[i_2], xpkA: pkey);
  new n: nonce;
  out(c5[i_2], (n, B));
  in(c6[i_2], s: signature);
  if check(concat1(xpkA, B, n), xpkA, s) then
  if xpkA = pkA then
  event eB(xpkA, B, n)
))




(* EXPECTED
All queries proved.
0.036s (user 0.036s + system 0.000s), max rss 10992K
END *)
