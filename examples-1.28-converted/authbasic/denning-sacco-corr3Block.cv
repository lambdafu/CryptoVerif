(* Denning-Sacco key distribution protocol. (corrected version) *)

(* In order to determine the proof, use interactive mode: 
   set interactiveMode = true.
The proof is as follows: *)

proof {
  success; (* for fullB(A,k,x) && fullA(B,k',x) ==> k = k'. *)
  crypto ind_cca2(enc) rkB;
  crypto uf_cma(sign) rkS;
  crypto uf_cma(sign) rkA;
  success
}

(*

Authentication in one direction only.
There is no injectivity (replay attack possible).
The certificates are not authenticated because our definition of
signatures allows the adversary to forge a second signature for
a message that has been signed.

*)

param N.
param N2.
param N3.
param N4.

type nonce [large,fixed].
type host [bounded].
type pkey [bounded].
type skey [bounded].
type keyseed [large,fixed].
type seed [fixed].
type spkey [bounded].
type sskey [bounded].
type skeyseed [large,fixed].
type sseed [fixed].
type signature [bounded].
type blocksize [fixed].
type blocksizebot [bounded].
type sblocksize [bounded].
type shkey [fixed]. (* distributed key *)

fun concat1(shkey, host, host, signature):blocksize [data].
fun concat2(shkey, host, host):sblocksize [data].
fun concat3(host, pkey):sblocksize [data].
fun concat4(host, spkey):sblocksize [data].

forall y:host,z:pkey,y2:shkey,z2:host,t2:host;
        concat3(y,z) <> concat2(y2,z2,t2).
forall y:host,z:pkey,y2:host,z2:spkey;	
	concat3(y,z) <> concat4(y2,z2).
forall y:host,z:spkey,y2:shkey,z2:host,t2:host;
        concat4(y,z) <> concat2(y2,z2,t2).

(* Public-key encryption (CCA2) *)

proba Penc.
proba Penccoll.

expand IND_CCA2_public_key_enc(keyseed, pkey, skey, blocksize, bitstring, seed, skgen, pkgen, enc, dec, injbot, Z, Penc, Penccoll).

(* Signatures *)

proba Psign.
proba Psigncoll.

expand UF_CMA_signature(skeyseed, spkey, sskey, sblocksize, signature, sseed, sskgen, spkgen, sign, check, Psign, Psigncoll).

(* Queries *)

channel c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, 
	start, finish, cAK, cBK.

const A : host.
const B : host.
fun acceptA(host):bitstring.
fun acceptB(host):bitstring.

event fullA(host, shkey, bitstring).
event fullB(host, shkey, bitstring).

query secret keyA.
query x: bitstring, k: shkey;
  inj-event(fullB(A, k, x)) ==> inj-event(fullA(B, k, x)) public_vars keyA. (* WRONG: replay attack *)
query x: bitstring, k: shkey;
  event(fullB(A, k, x)) ==> event(fullA(B, k, x)) public_vars keyA.
query k': shkey, x: bitstring, k: shkey;
  event(fullB(A, k, x)) && event(fullA(B, k', x)) ==> (k = k') public_vars keyA. 













process 
	in(start, ());
new rkA: skeyseed;
let pkA: spkey = spkgen(rkA) in
let skA: sskey = sskgen(rkA) in
new rkB: keyseed;
let pkB: pkey = pkgen(rkB) in
let skB: skey = skgen(rkB) in
new rkS: skeyseed;
let pkS: spkey = spkgen(rkS) in
let skS: sskey = sskgen(rkS) in
out(c7, (pkA, pkB, pkS));
((
  ! i_1 <= N
  in(c1[i_1], (=A, =pkA, cert1_1: signature, hostX: host, pkX: pkey, cert2_1: signature));
  if check(concat4(A, pkA), pkS, cert1_1) then
  if check(concat3(hostX, pkX), pkS, cert2_1) then
  new k_3: shkey;
  new r1_2: sseed;
  new r2_2: seed;
  let m1enc: bitstring = enc(concat1(k_3, A, hostX, sign(concat2(k_3, A, hostX), skA, r1_2)), pkX, r2_2) in
  let m1_2: bitstring = (A, pkA, cert1_1, hostX, pkX, cert2_1, m1enc) in
  event fullA(hostX, k_3, (A, pkA, hostX, pkX, m1enc));
  if hostX = B then
  (
    let keyA: shkey = k_3 in
    out(c2[i_1], (m1_2, acceptA(hostX)))
  )
  else
    out(c2[i_1], (m1_2, acceptA(hostX)));
    in(cAK[i_1], ());
    out(cAK[i_1], k_3)
) | (
  ! i_2 <= N
  in(c3[i_2], (hostY: host, pkY: spkey, cert1_2: signature, =B, =pkB, cert2_2: signature, m_2: bitstring));
  if check(concat4(hostY, pkY), pkS, cert1_2) then
  if check(concat3(B, pkB), pkS, cert2_2) then
  let injbot(concat1(k_4: shkey, =hostY, =B, s: signature)) = dec(m_2, skB) in
  if check(concat2(k_4, hostY, B), pkY, s) then
  event fullB(hostY, k_4, (hostY, pkY, B, pkB, m_2));
  if hostY = A then
    out(c9[i_2], acceptB(hostY))
  else
    out(c9[i_2], acceptB(hostY));
    in(cBK[i_2], ());
    out(cBK[i_2], k_4)
) | (
  ! i_3 <= N
  in(c5[i_3], (h1_1: host, h2_1: host));
  find j2_3 = j2_1 <= N2 suchthat defined(Khost[j2_1], Rkey[j2_1]) && (Khost[j2_1] = h2_1) then
  new r3_2: sseed;
  out(c6[i_3], (h2_1, Rkey[j2_3], sign(concat3(h2_1, Rkey[j2_3]), skS, r3_2)))
) | (
  ! i_4 <= N
  in(c11[i_4], (h1_2: host, h2_2: host));
  find j2_4 = j2_2 <= N2 suchthat defined(SKhost[j2_2], SRkey[j2_2]) && (SKhost[j2_2] = h2_2) then
  new r3_3: sseed;
  out(c12[i_4], (h2_2, SRkey[j2_4], sign(concat4(h2_2, SRkey[j2_4]), skS, r3_3)))
) | (
  ! i_5 <= N2
  in(c4[i_5], (Khost: host, Kkey: pkey));
  let Rkey: pkey = (if Khost = B then pkB else Kkey)
) | (
  ! i_6 <= N2
  in(c10[i_6], (SKhost: host, SKkey: spkey));
  let SRkey: spkey = (if SKhost = A then pkA else SKkey)
))




(* EXPECTED
RESULT Could not prove inj-event(fullB(A, k, x)) ==> inj-event(fullA(B, k, x)) with public variables keyA.
0.232s (user 0.220s + system 0.012s), max rss 58384K
END *)
