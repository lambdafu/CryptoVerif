(* PRF-ODH2 is a consequence of GDH and ROM. It corresponds to mmPRF-ODH in https://eprint.iacr.org/2017/517, but again with several challenge queries using the same or different DH pairs and argument of the PRF.

   G, Z, g, exp, exp', mult are as in DH_basic.
   prf(G, prf_in): prf_out: pseudo-random function that takes as argument a group
   element (in G) and an element in prf_in, and produces a result in 
   prf_out.
   The type prf_out must be "bounded" or "nonuniform".

   pPRF_ODH(t, n, n'): probability of breaking the PRF-ODH2 assumption
   in time t with n queries to the PRF (prf(g^ab, m)) 
   and n' queries to prf(X^a, m) or prf(X^b, m).

   The function prf is defined by this macro. It must not be declared
   elsewhere, and it can be used only after expanding the macro.
   All other arguments must be declared before this macro. *)

def PRF_ODH2_1starg(G, Z, prf_in1, prf_in2, prf_out, g, exp, exp', mult, prf, pPRF_ODH) {

fun prf(G, prf_in1, prf_in2): prf_out.

(* The PRF-ODH assumption *)

event ev_abort.

param na, na1, na2, nb, nb1, nb2, naDH9, nbDH9. 

table prf_dh_val(na, nb, prf_in1, prf_in2, prf_out).

equiv(prf_odh(prf))
    foreach ia <= na do a <-R Z; (
      OA() := return(exp(g,a)) | 
      Oa() [10] := return(a) |
      foreach ia1 <= na1 do Oa1(ma1:G, xa1:prf_in1, xa2:prf_in2) := return(prf(exp(ma1, a), xa1, xa2)) |
      foreach ia2 <= na2 do Oa2(jb <= nb, xa1': prf_in1, xa2': prf_in2) [useful_change] := return(prf(exp(g, mult(b[jb], a)), xa1', xa2')) |
      foreach iaDH9 <= naDH9 do ODHa9(x:Z) [2] := return(exp(g, mult(a, x)))
    ) |
    foreach ib <= nb do b <-R Z; (
      OB() := return(exp(g,b)) |
      Ob() [10] := return(b) |
      foreach ib1 <= nb1 do Ob1(mb1:G, xb1:prf_in1, xb2:prf_in2) := return(prf(exp(mb1, b), xb1, xb2)) |
      foreach ib2 <= nb2 do Ob2(ja <= na, xb1': prf_in1, xb2': prf_in) := return(prf(exp(g, mult(a[ja], b)), xb1', xb2')) |
      foreach ibDH9 <= nbDH9 do ODHb9(x:Z) [2] := return(exp(g, mult(b, x)))
    )
<=(na * nb * pPRF_ODH(time +
     (na + nb + #Oa1 + #Ob1 + #Oa2 + #Ob2 - 3 + #ODHa9 + #ODHb9)*time(exp)+
     (#Oa1 + #Ob1 + #Oa2 + #Ob2 - 1)*
       time(prf, max(maxlength(xa1), maxlength(xb1), maxlength(xa1'), maxlength(xb1')),
                 max(maxlength(xa2), maxlength(xb2), maxlength(xa2'), maxlength(xb2'))),
     na1 + nb1 + na2 + nb2,
     na1 + nb1))=>
    foreach ia <= na do a <-R Z; (
      OA() := return(exp'(g,a)) |
      Oa() :=
      	 (* Abort when a must not be compromised *)
	 get prf_dh_val(=ia, jb, x1, x2, c) in event_abort ev_abort else
         let ka:bool = true in return(a) |
      foreach ia1 <= na1 do Oa1(ma1:G, xa1:prf_in1, xa2: prf_in2) :=
      	 find j' <= nb suchthat defined(b[j']) && exp'(ma1,a) = exp'(g, mult(a,b[j'])) then
	 (
	    (* In this case, that's the same as Oa2 *)
	    if defined(kb[j']) then (* b[j'] compromised *) return(prf(exp'(ma1, a), xa1, xa2)) else
            if defined(ka) then (* a compromised *) return(prf(exp'(ma1, a), xa1, xa2)) else
	    (* At this point, a and b[j'] are not compromised, and must never be compromised in the future *)
	    get[unique] prf_dh_val(=ia, =j', =xa1, =xa2, c) in return(c) else
	    ca1 <-R prf_out;
	    insert prf_dh_val(ia, j', xa1, xa2, ca1);
	    return(ca1)
	 )
	 else
	    return(prf(exp'(ma1, a), xa1, xa2)) |
      foreach ia2 <= na2 do Oa2(jb <= nb, xa1': prf_in1, xa2':prf_in2) :=
	 if defined(kb[jb]) then (* b[jb] compromised *) return(prf(exp'(g, mult(b[jb], a)), xa1', xa2')) else
         if defined(ka) then (* a compromised *) return(prf(exp'(g, mult(b[jb], a)), xa1', xa2')) else
	 (* At this point, a and b' are not compromised, and must never be compromised in the future *)
	 get[unique] prf_dh_val(=ia, =jb, =xa1', xa2', c) in return(c) else
         ca2 <-R prf_out;
	 insert prf_dh_val(ia, jb, xa1', xa2', ca2);
	 return(ca2) |
      foreach iaDH9 <= naDH9 do ODHa9(x:Z) := return(exp'(g, mult(a, x)))
    ) |
    foreach ib <= nb do b <-R Z; (
      OB() := return(exp'(g,b)) |
      Ob() :=
      	 (* Abort when b must not be compromised *)
	 get prf_dh_val(ja, =ib, x1, x2, c) in event_abort ev_abort else
         let kb:bool = true in return(b) |
      foreach ib1 <= nb1 do Ob1(mb1:G, xb1:prf_in1, xb2: prf_in2) :=
      	 find j' <= na suchthat defined(a[j']) && exp'(mb1,b) = exp'(g, mult(a[j'],b)) then
	 (
	    (* In this case, that's the same as Oa2 *)
	    if defined(ka[j']) then (* a[j'] compromised *) return(prf(exp'(mb1, b), xb1, xb2)) else
            if defined(kb) then (* b compromised *) return(prf(exp'(mb1, b), xb1, xb2)) else
	    (* At this point, b and a[j'] are not compromised, and must never be compromised in the future *)
	    get[unique] prf_dh_val(=j', =ib, =xb1, =xb2, c) in return(c) else
	    cb1 <-R prf_out;
	    insert prf_dh_val(j', ib, xb1, xb2, cb1);
	    return(cb1)
	 )
	 else
	    return(prf(exp'(mb1, b), xb1, xb2)) |
      foreach ib2 <= nb2 do Ob2(ja <= na, xb1': prf_in1, xb2':prf_in2) :=
	 if defined(ka[ja]) then (* a[ja] compromised *) return(prf(exp'(g, mult(a[ja], b)), xb1', xb2')) else
         if defined(kb) then (* b compromised *) return(prf(exp'(g, mult(a[ja], b)), xb1', xb2')) else
	 (* At this point, b and a[ja] are not compromised, and must never be compromised in the future *)
	 get[unique] prf_dh_val(=ja, =ib, =xb1', =xb2', c) in return(c) else
         cb2 <-R prf_out;
	 insert prf_dh_val(ja, ib, xb1', xb2', cb2);
	 return(cb2) |
      foreach ibDH9 <= nbDH9 do ODHb9(x:Z) := return(exp'(g, mult(b, x)))
    ).
	 
}


def PRF_ODH2_2ndarg(G, Z, prf_in1, prf_in2, prf_out, g, exp, exp', mult, prf, pPRF_ODH) {

fun prf(prf_in1, G, prf_in2): prf_out.

(* The PRF-ODH assumption *)

event ev_abort.

param na, na1, na2, nb, nb1, nb2, naDH9, nbDH9. 

table prf_dh_val(na, nb, prf_in1, prf_in2, prf_out).

equiv(prf_odh(prf))
    foreach ia <= na do a <-R Z; (
      OA() := return(exp(g,a)) | 
      Oa() [10] := return(a) |
      foreach ia1 <= na1 do Oa1(ma1:G, xa1:prf_in1, xa2:prf_in2) := return(prf(xa1, exp(ma1, a), xa2)) |
      foreach ia2 <= na2 do Oa2(jb <= nb, xa1': prf_in1, xa2': prf_in2) [useful_change] := return(prf(xa1', exp(g, mult(b[jb], a)), xa2')) |
      foreach iaDH9 <= naDH9 do ODHa9(x:Z) [2] := return(exp(g, mult(a, x)))
    ) |
    foreach ib <= nb do b <-R Z; (
      OB() := return(exp(g,b)) |
      Ob() [10] := return(b) |
      foreach ib1 <= nb1 do Ob1(mb1:G, xb1:prf_in1, xb2:prf_in2) := return(prf(xb1, exp(mb1, b), xb2)) |
      foreach ib2 <= nb2 do Ob2(ja <= na, xb1': prf_in1, xb2': prf_in) := return(prf(xb1', exp(g, mult(a[ja], b)), xb2')) |
      foreach ibDH9 <= nbDH9 do ODHb9(x:Z) [2] := return(exp(g, mult(b, x)))
    )
<=(na * nb * pPRF_ODH(time +
     (na + nb + #Oa1 + #Ob1 + #Oa2 + #Ob2 - 3 + #ODHa9 + #ODHb9)*time(exp)+
     (#Oa1 + #Ob1 + #Oa2 + #Ob2 - 1)*
       time(prf, max(maxlength(xa1), maxlength(xb1), maxlength(xa1'), maxlength(xb1')),
                 max(maxlength(xa2), maxlength(xb2), maxlength(xa2'), maxlength(xb2'))),
     na1 + nb1 + na2 + nb2,
     na1 + nb1))=>
    foreach ia <= na do a <-R Z; (
      OA() := return(exp'(g,a)) |
      Oa() :=
      	 (* Abort when a must not be compromised *)
	 get prf_dh_val(=ia, jb, x1, x2, c) in event_abort ev_abort else
         let ka:bool = true in return(a) |
      foreach ia1 <= na1 do Oa1(ma1:G, xa1:prf_in1, xa2: prf_in2) :=
      	 find j' <= nb suchthat defined(b[j']) && exp'(ma1,a) = exp'(g, mult(a,b[j'])) then
	 (
	    (* In this case, that's the same as Oa2 *)
	    if defined(kb[j']) then (* b[j'] compromised *) return(prf(xa1, exp'(ma1, a), xa2)) else
            if defined(ka) then (* a compromised *) return(prf(xa1, exp'(ma1, a), xa2)) else
	    (* At this point, a and b[j'] are not compromised, and must never be compromised in the future *)
	    get[unique] prf_dh_val(=ia, =j', =xa1, =xa2, c) in return(c) else
	    ca1 <-R prf_out;
	    insert prf_dh_val(ia, j', xa1, xa2, ca1);
	    return(ca1)
	 )
	 else
	    return(prf(xa1, exp'(ma1, a), xa2)) |
      foreach ia2 <= na2 do Oa2(jb <= nb, xa1': prf_in1, xa2':prf_in2) :=
	 if defined(kb[jb]) then (* b[jb] compromised *) return(prf(xa1', exp'(g, mult(b[jb], a)), xa2')) else
         if defined(ka) then (* a compromised *) return(prf(xa1', exp'(g, mult(b[jb], a)), xa2')) else
	 (* At this point, a and b' are not compromised, and must never be compromised in the future *)
	 get[unique] prf_dh_val(=ia, =jb, =xa1', xa2', c) in return(c) else
         ca2 <-R prf_out;
	 insert prf_dh_val(ia, jb, xa1', xa2', ca2);
	 return(ca2) |
      foreach iaDH9 <= naDH9 do ODHa9(x:Z) := return(exp'(g, mult(a, x)))
    ) |
    foreach ib <= nb do b <-R Z; (
      OB() := return(exp'(g,b)) |
      Ob() :=
      	 (* Abort when b must not be compromised *)
	 get prf_dh_val(ja, =ib, x1, x2, c) in event_abort ev_abort else
         let kb:bool = true in return(b) |
      foreach ib1 <= nb1 do Ob1(mb1:G, xb1:prf_in1, xb2: prf_in2) :=
      	 find j' <= na suchthat defined(a[j']) && exp'(mb1,b) = exp'(g, mult(a[j'],b)) then
	 (
	    (* In this case, that's the same as Oa2 *)
	    if defined(ka[j']) then (* a[j'] compromised *) return(prf(xb1, exp'(mb1, b), xb2)) else
            if defined(kb) then (* b compromised *) return(prf(xb1, exp'(mb1, b), xb2)) else
	    (* At this point, b and a[j'] are not compromised, and must never be compromised in the future *)
	    get[unique] prf_dh_val(=j', =ib, =xb1, =xb2, c) in return(c) else
	    cb1 <-R prf_out;
	    insert prf_dh_val(j', ib, xb1, xb2, cb1);
	    return(cb1)
	 )
	 else
	    return(prf(xb1, exp'(mb1, b), xb2)) |
      foreach ib2 <= nb2 do Ob2(ja <= na, xb1': prf_in1, xb2':prf_in2) :=
	 if defined(ka[ja]) then (* a[ja] compromised *) return(prf(xb1', exp'(g, mult(a[ja], b)), xb2')) else
         if defined(kb) then (* b compromised *) return(prf(xb1', exp'(g, mult(a[ja], b)), xb2')) else
	 (* At this point, b and a[ja] are not compromised, and must never be compromised in the future *)
	 get[unique] prf_dh_val(=ja, =ib, =xb1', =xb2', c) in return(c) else
         cb2 <-R prf_out;
	 insert prf_dh_val(ja, ib, xb1', xb2', cb2);
	 return(cb2) |
      foreach ibDH9 <= nbDH9 do ODHb9(x:Z) := return(exp'(g, mult(b, x)))
    ).
	 
}


(* square PRF-ODH2 and PRF-ODH2
   This is a "square" variant of PRF_ODH2.

   G, Z, g, exp, exp', mult are as in DH_basic.
   prf(G, prf_in): prf_out: pseudo-random function that takes as argument a group
   element (in G) and an element in prf_in, and produces a result in 
   prf_out.
   The type prf_out must be "bounded" or "nonuniform".

   pPRF_ODH(t, n, n'): probability of breaking the PRF-ODH2 assumption
   in time t with n queries to the PRF (prf(g^ab, m)) 
   and n' queries to prf(X^a, m) or prf(X^b, m).
   pSQPRF_ODH(t, n, n'): probability of breaking the square PRF-ODH2 assumption
   in time t with n queries to the PRF (prf(g^aa, m)) 
   and n' queries to prf(X^a, m).

   The function prf is defined by this macro. It must not be declared
   elsewhere, and it can be used only after expanding the macro.
   All other arguments must be declared before this macro. *)

def square_PRF_ODH2_2ndarg(G, Z, prf_in1, prf_in2, prf_out, g, exp, exp', mult, prf, pPRF_ODH, pSQPRF_ODH) {

fun prf(prf_in1, G, prf_in2): prf_out.

(* The (square) PRF-ODH2 assumption *)

event ev_abort.

param na, na1, na2, naDH9.

table prf_dh_val(na, na, prf_in1, prf_in2, prf_out).

equiv(prf_odh(prf))
    foreach ia <= na do a <-R Z; (
      OA() := return(exp(g,a)) | 
      Oa() [10] := return(a) |
      foreach ia1 <= na1 do Oa1(ma1:G, xa1:prf_in1, xa2: prf_in2) := return(prf(xa1, exp(ma1, a), xa2)) |
      foreach ia2 <= na2 do Oa2(ja <= na, xa1': prf_in1, xa2':prf_in2) [useful_change] := return(prf(xa1', exp(g, mult(a[ja], a)), xa2')) |
      foreach iaDH9 <= naDH9 do ODHa9(x:Z) [2] := return(exp(g, mult(a, x)))
    )
<=(na * pSQPRF_ODH(time + (na + #Oa1 + #Oa2 - 2 + #ODHa9)*time(exp) +
      (#Oa1 + #Oa2 - 1) * time(prf, max(maxlength(xa1),maxlength(xa1')), max(maxlength(xa2),maxlength(xa2'))), na2, na1) +
   na*(na-1)/2 * pPRF_ODH(time + (na + #Oa1 + #Oa2 - 3 + #ODHa9)*time(exp) +
      (#Oa1 + #Oa2 - 1) * time(prf, max(maxlength(xa1),maxlength(xa1')), max(maxlength(xa2),maxlength(xa2'))), 2*na2, 2*na1))=>
    foreach ia <= na do a <-R Z; (
      OA() := return(exp'(g,a)) |
      Oa() :=
      	 (* Abort when a must not be compromised *)
         get prf_dh_val(=ia, ja, x1, x2, c) in event_abort ev_abort else
         get prf_dh_val(ja, =ia, x1, x2, c) in event_abort ev_abort else
         let ka:bool = true in return(a) |
      foreach ia1 <= na1 do Oa1(ma1:G, xa1:prf_in1, xa2:prf_in2) :=
      	 find j' <= na suchthat defined(a[j']) && exp'(ma1,a) = exp'(g, mult(a[j'],a)) then
	 (
	    (* In this case, that's the same as Oa2 *)
	    if defined(ka[j']) then (* a[j'] compromised *) return(prf(xa1, exp'(ma1, a), xa2)) else
            if defined(ka) then (* a compromised *) return(prf(xa1, exp'(ma1, a), xa2)) else
	    (* At this point, a and a[j'] are not compromised, and must never be compromised in the future *)
	    get[unique] prf_dh_val(=ia, =j', =xa1, =xa2, c) in return(c) else
	    get[unique] prf_dh_val(=j', =ia, =xa1, =xa2, c) in return(c) else
	    ca1 <-R prf_out;
	    insert prf_dh_val(ia, j', xa1, xa2, ca1);
	    return(ca1)
	 )
	 else
	    return(prf(xa1, exp'(ma1, a), xa2)) |
      foreach ia2 <= na2 do Oa2(ja <= na, xa1':prf_in1, xa2': prf_in2) :=
	 if defined(ka[ja]) then (* a[ja] compromised *) return(prf(xa1', exp'(g, mult(a[ja], a)), xa2')) else
         if defined(ka) then (* a compromised *) return(prf(xa1', exp'(g, mult(a[ja], a)), xa2')) else
	 (* At this point, a and a[ja] are not compromised, and must never be compromised in the future *)
	 get[unique] prf_dh_val(=ia, =ja, =xa1', =xa2', c) in return(c) else
	 get[unique] prf_dh_val(=ja, =ia, =xa1', =xa2', c) in return(c) else
         ca2 <-R prf_out;
	 insert prf_dh_val(ia, ja, xa1', xa2', ca2);
	 return(ca2) |
      foreach iaDH9 <= naDH9 do ODHa9(x:Z) := return(exp'(g, mult(a, x)))
    ).
	 
}
