(* Denning-Sacco key distribution protocol. (corrected version) *)


def IND_CCA2_public_key_enc_all_args_XX(keyseed, pkey, skey, cleartext, ciphertext, enc_seed, skgen, skgen2, pkgen, pkgen2, enc, enc_r, enc_r2, dec, dec2, injbot, Z, Penc, Penccoll) {

param N, N', N2, N3, N4.

fun enc_r(cleartext, pkey, enc_seed): ciphertext.
fun skgen(keyseed):skey.
fun pkgen(keyseed):pkey.
fun dec(ciphertext, skey): bitstringbot.

fun enc_r2(cleartext, pkey, enc_seed): ciphertext.
fun skgen2(keyseed):skey.
fun pkgen2(keyseed):pkey.
fun dec2(ciphertext, skey): bitstringbot.

letfun enc(m: cleartext, pk: pkey) =
       r <-R enc_seed; enc_r(m,pk,r).

fun injbot(cleartext):bitstringbot [data].

(* The function Z returns for each bitstring, a bitstring
   of the same length, consisting only of zeroes. *)
fun Z(cleartext):cleartext.

equation forall m:cleartext, r:keyseed, r2:enc_seed; 
	dec(enc_r(m, pkgen(r), r2), skgen(r)) = injbot(m).
equation forall m:cleartext, r:keyseed, r2:enc_seed; 
	dec2(enc_r2(m, pkgen2(r), r2), skgen2(r)) = injbot(m).

table cipher(N3,cleartext,ciphertext).

letproba Penc_multikey(t:time,N,N2,N3,N4:number,lenc,ldec:length) =
  N3 * (N + N4) * Penc(t + (N4+N-1) * time(enc_r, lenc) +
  (N3-1)*(time(pkgen) + time(skgen) + N2 * time(dec, ldec) + N * time(enc_r, lenc)), N2).

equiv(ind_cca2(enc))
       foreach i3 <= N3 do r <-R keyseed; (
           Opk() [2] := return(pkgen(r)) |
	   foreach i2 <= N2 do Odec(m:ciphertext) := return(dec(m, skgen(r))) |
           foreach i <= N do r1 <-R enc_seed; Oenc(x1:cleartext) := return(enc_r(x1, pkgen(r),r1))) |
       foreach i4 <= N4 do r2 <-R enc_seed; Oenc2(x:cleartext, y:pkey) [3] := return(enc_r(x,y,r2)) [all]
     <=(Penc_multikey(time,N,N2,N3,N4,max(maxlength(x),maxlength(x1)), maxlength(m)))=> 
       foreach i3 <= N3 do r <-R keyseed; (
           Opk() := return(pkgen2(r)) |
	   foreach i2 <= N2 do Odec(m:ciphertext) :=
	        get cipher(=i3, x, =m) in
		  return(injbot(x))
		else
		  return(dec2(m, skgen2(r))) |
	   foreach i <= N do r1 <-R enc_seed; Oenc(x1:cleartext) :=
			m1 <- enc_r2(Z(x1), pkgen2(r), r1);
			insert cipher(i3, x1, m1);
			return(m1)) |
       foreach i4 <= N4 do Oenc2(x:cleartext, y:pkey) :=
		find k <= N3 suchthat defined(r[k]) && y = pkgen2(r[k]) then
			(r2 <-R enc_seed; 
			m2 <- enc_r2(Z(x), y, r2);
			insert cipher(k, x, m2);
			return(m2))
		else r3 <-R enc_seed; return(enc_r(x,y,r3)).

(* Manual version, which can transform only some occurrences of encryption:
   just use oracle Opk to discharge the public key in occurrences of encryption
   that you do not want to transform.
   It renames only the encryption function symbol for the occurrences that are transformed,
   so it can be applied again to other occurrences. *)

table cipher1(cleartext, ciphertext).

equiv(ind_cca2_partial(enc))
       r <-R keyseed; (
           Opk() := return(pkgen(r)) |
	   foreach i2 <= N2 do Odec(m:ciphertext) := return(dec(m, skgen(r))) |
           foreach i <= N do r1 <-R enc_seed; Oenc(x1:cleartext) [useful_change] := return(enc_r(x1, pkgen(r),r1)))
     <=(N * Penc(time + (N-1) * time(enc_r, maxlength(x1)), N2))=> [manual]
       r <-R keyseed; (
           Opk() := return(pkgen(r)) |
	   foreach i2 <= N2 do Odec(m:ciphertext) :=
                get cipher1(x, =m) in return(injbot(x)) else
		return(dec(m, skgen(r))) |
	   foreach i <= N do r1 <-R enc_seed; Oenc(x1:cleartext) :=
			m1 <- enc_r2(Z(x1), pkgen(r), r1);
			insert cipher1(x1, m1);
			return(m1)).

collision r1 <-R keyseed; r2 <-R keyseed; 
	return(pkgen(r1) = pkgen(r2)) <=(Penccoll)=> return(false).
collision r1 <-R keyseed; r2 <-R keyseed; 
	return(pkgen(r1) = pkgen2(r2)) <=(Penccoll)=> return(false).
collision r1 <-R keyseed; r2 <-R keyseed; 
	return(pkgen2(r1) = pkgen2(r2)) <=(Penccoll)=> return(false).
collision r1 <-R keyseed; r2 <-R keyseed; 
	return(skgen(r1) = skgen(r2)) <=(Penccoll)=> return(false).
collision r1 <-R keyseed; r2 <-R keyseed; 
	return(skgen(r1) = skgen2(r2)) <=(Penccoll)=> return(false).
collision r1 <-R keyseed; r2 <-R keyseed; 
	return(skgen2(r1) = skgen2(r2)) <=(Penccoll)=> return(false).

}

def IND_CCA2_public_key_enc_XX(keyseed, pkey, skey, cleartext, ciphertext, skgen, pkgen, enc, dec, injbot, Z, Penc, Penccoll) {

type enc_seed [bounded].
expand IND_CCA2_public_key_enc_all_args_XX(keyseed, pkey, skey, cleartext, ciphertext, enc_seed, skgen, skgen2, pkgen,pkgen2,  enc, enc_r, enc_r2, dec, dec2, injbot, Z, Penc, Penccoll).

}


(*
All queries are true except
inj-event(fullB(A, k, x)) ==> inj-event(fullA(B, k, x))
due to a replay attack.
*)

(* In order to determine the proof, use interactive mode:
   set interactiveMode = true.
The proof is as follows: *)

proof {
  show_equiv ind_cca2(enc);
  success; (* for fullB(A,k,x) && fullA(B,k',x) ==> k = k'. *)
  crypto ind_cca2(enc) rkB;
  crypto uf_cma(sign) rkS;
  crypto uf_cma(sign) rkA;
  success;
  auto
}

(*

Authentication in one direction only.
There is no injectivity (replay attack possible).
The certificates are not authenticated because our definition of
signatures allows the adversary to forge a second signature for
a message that has been signed.

*)

param NA, NB, NS, NSS, NK, NSK.

type nonce [large,fixed].
type host [bounded].
type pkey [bounded].
type skey [bounded].
type keyseed [large,fixed].
type spkey [bounded].
type sskey [bounded].
type skeyseed [large,fixed].
type signature [bounded].
type blocksize [fixed].
type blocksizebot [bounded].
type sblocksize [bounded].
type shkey [fixed]. (* distributed key *)

fun concat1(shkey, host, host, signature):blocksize [data].
fun concat2(shkey, host, host):sblocksize [data].
fun concat3(host, pkey):sblocksize [data].
fun concat4(host, spkey):sblocksize [data].

equation forall y:host,z:pkey,y2:shkey,z2:host,t2:host;
        concat3(y,z) <> concat2(y2,z2,t2).
equation forall y:host,z:pkey,y2:host,z2:spkey;
	concat3(y,z) <> concat4(y2,z2).
equation forall y:host,z:spkey,y2:shkey,z2:host,t2:host;
        concat4(y,z) <> concat2(y2,z2,t2).

(* Public-key encryption (CCA2) *)

proba Penc.
proba Penccoll.

expand IND_CCA2_public_key_enc_XX(keyseed, pkey, skey, blocksize, bitstring, skgen, pkgen, enc, dec, injbot, Z, Penc, Penccoll).

const Zblocksize: blocksize.
equation forall x: blocksize; Z(x) = Zblocksize.

(* Signatures *)

proba Psign.
proba Psigncoll.

expand UF_CMA_proba_signature(skeyseed, spkey, sskey, sblocksize, signature, sskgen, spkgen, sign, check, Psign, Psigncoll).

(* Tables *)

table enc_key_tbl(host, pkey).
table sign_key_tbl(host, spkey).

(* Queries *)

channel c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12,
	start, finish, cAK, cBK.

const A : host.
const B : host.
fun acceptA(host):bitstring.
fun acceptB(host):bitstring.

event fullA(host, shkey, bitstring).
event fullB(host, shkey, bitstring).

query secret keyA.
query x: bitstring, k: shkey;
  inj-event(fullB(A, k, x)) ==> inj-event(fullA(B, k, x)) public_vars keyA. (* WRONG: replay attack *)
query x: bitstring, k: shkey;
  event(fullB(A, k, x)) ==> event(fullA(B, k, x)) public_vars keyA.
query k': shkey, x: bitstring, k: shkey;
  event(fullB(A, k, x)) && event(fullA(B, k', x)) ==> (k = k') public_vars keyA.

let processA(pkA: spkey, skA: sskey, pkS: spkey) =
	in(c1, (=A, =pkA, cert1:signature, hostX: host, pkX:pkey, cert2:signature));
	if check(concat4(A, pkA), pkS, cert1) then
	if check(concat3(hostX, pkX), pkS, cert2) then
	new k:shkey;
	let m1enc = enc(concat1(k, A, hostX, sign(concat2(k, A, hostX), skA)), pkX) in
	let m1 = (A, pkA, cert1, hostX, pkX, cert2, m1enc) in
	(* Last message and OK *)
	event fullA(hostX, k, (A, pkA, hostX, pkX, m1enc));
	if hostX = B then
		(let keyA:shkey = k in out(c2, (m1, acceptA(hostX))))
	else
		(out(c2, (m1, acceptA(hostX))); in(cAK, ()); out(cAK, k)).

let processB(pkB: pkey, skB: skey, pkS: spkey) =
	in(c3, (hostY:host, pkY:spkey, cert1:signature, =B, =pkB, cert2:signature, m:bitstring));
	if check(concat4(hostY, pkY), pkS, cert1) then
	if check(concat3(B, pkB), pkS, cert2) then
        let injbot(concat1(k, =hostY, =B, s)) = dec(m,skB) in
	if check(concat2(k, hostY, B), pkY, s) then
	(* OK *)
	event fullB(hostY, k, (hostY, pkY, B, pkB, m));
        if hostY = A then
		(out(c9, acceptB(hostY)))
	else
		(out(c9, acceptB(hostY)); in(cBK, ()); out(cBK, k)).

let processK(pkB: pkey) =
	in(c4, (Khost: host, Kkey: pkey));
	if Khost = B then
	   insert enc_key_tbl(B, pkB)
	else
	   insert enc_key_tbl(Khost, Kkey).

let processS(skS: sskey) =
	in(c5, (h1: host, h2: host));
	get enc_key_tbl(=h2, kh2) in
	out(c6, (h2, kh2, sign(concat3(h2, kh2), skS))).

let processSK(pkA: spkey) =
	in(c10, (SKhost: host, SKkey: spkey));
	if SKhost = A then
	   insert sign_key_tbl(A, pkA)
	else
	   insert sign_key_tbl(SKhost, SKkey).

let processSS(skS: sskey) =
	in(c11, (h1: host, h2: host));
	get sign_key_tbl(=h2, kh2) in
	out(c12, (h2, kh2, sign(concat4(h2, kh2), skS))).

process
	in(start, ());
	new rkA: skeyseed;
	let pkA = spkgen(rkA) in
	let skA = sskgen(rkA) in
	new rkB: keyseed;
	let pkB = pkgen(rkB) in
	let skB = skgen(rkB) in
	new rkS: skeyseed;
	let pkS = spkgen(rkS) in
	let skS = sskgen(rkS) in
	out(c7, (pkA, pkB, pkS));
	((! i <= NA processA(pkA, skA, pkS)) |
	 (! i <= NB processB(pkB, skB, pkS)) |
	 (! i <= NS processS(skS)) |
	 (! i <= NSS processSS(skS)) |
	 (! i <= NK processK(pkB)) |
	 (! i <= NSK processSK(pkA)))


(* EXPECTED
RESULT Could not prove inj-event(fullB(A, k, x)) ==> inj-event(fullA(B, k, x)) with public variables keyA.
0.220s (user 0.212s + system 0.008s), max rss 23916K
END *)

(* EXPECTPV
RESULT secret keyA is true.
RESULT inj-event(fullB(A,k_2,x)) ==> inj-event(fullA(B,k_2,x)) public_vars keyA is false.
RESULT (query encoded as inj-event(fullB(A,k_2,x)) ==> inj-event(fullA(B,k_2,x)))
RESULT (but event(fullB(A,k_2,x)) ==> event(fullA(B,k_2,x)) is true.)
RESULT event(fullB(A,k_2,x)) ==> event(fullA(B,k_2,x)) public_vars keyA is true.
RESULT event(fullB(A,k_2,x)) && event(fullA(B,k',x)) ==> k_2 = k' public_vars keyA is true.
0.164s (user 0.156s + system 0.008s), max rss 13536K
END *)
