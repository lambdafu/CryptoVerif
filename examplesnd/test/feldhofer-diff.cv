(* Example by Stephanie Delaune et al *)

(*******************************************************************************
FELDHOFER

[B] Martin Feldhofer, Sandra Dominikus, and Johannes Wolkerstorfer.
Strong authentication for RFID systems using the AES algorithm. In
Marc Joye and Jean-Jacques Quisquater, editors, Cryptographic Hard-
ware and Embedded Systems - CHES 2004: 6th International Workshop
Cambridge, MA, USA, August 11-13, 2004. Proceedings, volume 3156
of Lecture Notes in Computer Science, pages 357â€“370. Springer, 2004.

R --> T : nr
T --> R : enc(<nr,nt>,k)
R --> T : enc(<nt,nr>,k)

*******************************************************************************)


param NT, NR, NK.

type nonce [large,fixed].
type key [fixed].
type maxenc [bounded].


fun concat1(nonce, nonce):maxenc [data].



(* Shared-key encryption (IND-CPA + INT-CTXT Stream cipher) *)

proba Penc.
proba Pencctxt.

expand IND_CPA_INT_CTXT_sym_enc(key, maxenc, bitstring, enc, dec, injbot, Z, Penc, Pencctxt).

const Zconcat1:maxenc.
equation forall y:nonce,z:nonce; 
        Z(concat1(y,z)) = Zconcat1.


channel c0, c1, c2, c3, c4, c5, c6, c7, cok, cko, startid, finishid, startsess, finishsess.


let processT(k:key) = 
    in(c0, xnr:nonce); 
    new nt:nonce;
    let et = enc(concat1(xnr,nt),k) in
    out(c1, et);
    in(c2,xt:bitstring);
    let injbot(concat1(=nt,=xnr)) = dec(xt,k) in out(cok,()) else out(cko,()).

let multiple = 
    ( ! iK <= NK
      in(startid, ());
      new kTn:key;
      let kTm:key = kTn in
      out(finishid, ());
      ! iT <= NT
      in(startsess, ());
      out(finishsess, ());
      processT(kTm)
      )| (
      !iR <= NR
      in(c3,());
      new nr: nonce;
      out(c4, nr);
      in(c5, xr:bitstring);
      find u =i <= NT, v =j <= NK suchthat
      defined(kTm[j]) && (let injbot(concat1(=nr, xnt:nonce)) = dec(xr, kTm[j]) in true else false) 
      then
      (let injbot(concat1(=nr, xnt:nonce)) = dec(xr, kTm[v]) in 
      let er = enc(concat1(xnt,nr),kTm[v]) in
      out(c6, er) else out(c7,())) else out(c7,())).


let single = 
    ( ! iK <= NK
      in(startid, ());
      out(finishid, ());
      ! iT <= NT
      in(startsess, ());
      new kTn:key;      
      let kTs:key = kTn  in  
      out(finishsess, ());
      processT(kTs)
      )| (
      !iR <= NR
      in(c3,());
      new nr: nonce;
      out(c4, nr);
      in(c5, xr:bitstring);
      find u =i <= NT, v =j <= NK suchthat
      defined(kTs[i,j])  &&  (let injbot(concat1(=nr, xnt:nonce)) = dec(xr, kTs[i,j]) in true else false) 
      then
      (let injbot(concat1(=nr,xnt:nonce)) = dec(xr,kTs[u,v]) in
      let er = enc(concat1(xnt,nr),kTs[u,v]) in
      out(c6, er) else out(c7,())) else out(c7,())).

equivalence single multiple

(* EXPECTED
RESULT Could not prove indistinguishability between game 1 and game 2.
0.080s (user 0.076s + system 0.004s), max rss 18148K
END *)
