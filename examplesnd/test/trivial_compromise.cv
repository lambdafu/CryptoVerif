(* Example to test "success simplify".
   It manages to use security of signatures in the presence of compromise,
   without using ufcma_corrupt *)

proof {
  success simplify;
  auto
}

param N.
param N2.
param N3.
param N4.

type nonce [large,fixed].
type host [bounded].
type pkey [bounded].
type skey [bounded].
type keyseed [large,fixed].
type spkey [bounded].
type sskey [bounded].
type skeyseed [large,fixed].
type signature [bounded].
type blocksize [fixed].
type blocksizebot [bounded].
type sblocksize [bounded].
type shkey [fixed]. (* distributed key *)


(* Signatures *)

proba Psign.
proba Psigncoll.

expand UF_CMA_proba_signature(skeyseed, spkey, sskey, sblocksize, signature, sskgen, spkgen, sign, check, Psign, Psigncoll).

(* Queries *)

channel c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12,
	start, finish, cAK, cBK.

event forged.

query event(forged) ==> false.

let processS(sk: sskey) =
	in(c1, m: sblocksize);
	out(c2, sign(m, sk)).

let processT(pk: spkey) =
	in(c3, (m': sblocksize, s: signature));
	if check(m', pk, s) then
	find i <= N suchthat defined(m[i]) && m' = m[i] then yield else
	if defined(compromise) then yield else
	event_abort forged.

let processC(sk: sskey) =
        in(c4, ());
	let compromise: bool = true in
	out(c5, sk).

process
	in(start, ());
	new rk: skeyseed;
	let pk = spkgen(rk) in
	let sk = sskgen(rk) in
	out(c7, pk);
	((! i <= N processS(sk)) |
	 (! i <= N2 processT(pk)) |
	 processC(sk))


(* EXPECTED
All queries proved.
0.176s (user 0.160s + system 0.016s), max rss 44532K
END *)
