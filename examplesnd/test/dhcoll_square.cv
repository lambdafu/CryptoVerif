type G [large,bounded].
type Z [large, bounded].


proba PCollKey1.
proba PCollKey2.
proba PCollKey3.

expand square_DH_proba_collision(G, Z, g, exp, exp', mult, PCollKey1, PCollKey2, PCollKey3).

param NA, NT.
channel c1, c2.

event bad.

query event(bad).

let pA =
    ! i <= NA
    in(c1, ());
    new a: Z;
    out(c2, a).
    
let ptest =
    ! i <= NT
    in(c1, (a1: Z, b1: Z, a2: Z, b2: Z));
    find i1 <= NA suchthat defined(a[i1]) && a[i1] = a1 then
    find j1 <= NA suchthat defined(a[j1]) && a[j1] = b1 then
    find i2 <= NA suchthat defined(a[i2]) && a[i2] = a2 then
    find j2 <= NA suchthat defined(a[j2]) && a[j2] = b2 then
    if exp(g, mult(a[i1], a[j1])) = exp(g, mult(a[i2], a[j2])) then
    (if not (((i1 = i2) && (j1 = j2)) || ((i1 = j2) && (j1 = i2))) then
       event bad
     else
       out(c2, ())).
 
process
       pA | ptest

(* EXPECTED
All queries proved.
0.064s (user 0.064s + system 0.000s), max rss 16468K
END *)
