(* Sessions Alice-Bob.
Proves secrecy, forward secrecy, and message authenticity, including
absence of replays for 4DH, or with a replay cache.
*)

set useKnownEqualitiesWithFunctionsInMatching = true.

proof {

crypto uf_cma(sign) signAseed;

out_game "g1.cv" occ;
(* Case distinction inserted before new ephSecBA1: Z in RecvAKE_Alice *)
insert before "new ephSecBA1: Z" "find j <= Nsend, k <= Nprinc suchthat defined (sephPubAB1[j], pubA[k]) && pow8(sephPubAB_1) = pow8(sephPubAB1[j]) && pow8(x_pubB_1) = pow8(pubA[k]) && u_6 <> k then";
(* Case distinction inserted between "in(ch5" and "let g1n1" in SendAKE_Bob *) 

insert after "in(ch5" "find u1 <= Nprinc suchthat defined(signAseed[u1], pubA[u1]) && pow8(x_pubA_1) = pow8(pubA[u1]) && u_16 <> u1 then";

insert after "in(ch1_1" "let (subGtoG(x1'), subGtoG(x2'), subGtoG(x3'), subGtoG(x4'), subGtoG(x5')) = (x1,x2,x3,x4,x5) in"; 
crypto rom(H5);
out_game "g2.cv" occ;
(* Case distinction inserted before new ephSecBA2: Z in RecvAKE_Alice_3DH *)
insert before "new ephSecBA2: Z" "find j2 <= Nsend, k2 <= Nprinc suchthat defined (sephPubAB1[j2], pubA[k2]) && pow8(sephPubAB_2) = pow8(sephPubAB1[j2]) && pow8(x_pubB_2) = pow8(pubA[k2]) && u_2 <> k2 then";
(* Case distinction inserted after "in(ch7" in SendAKE_Bob *) 

insert after "in(ch7" "find u2 <= Nprinc suchthat defined(signAseed[u2], pubA[u2]) && pow8(x_pubA_2) = pow8(pubA[u2]) && u_16 <> u2 then";

insert after "in(ch1_2" "let (subGtoG(x1_1'), subGtoG(x2_1'), subGtoG(x3_1'), subGtoG(x4_1')) = (x1_1,x2_1,x3_1,x4_1) in"; 
crypto rom(H4);
out_game "g3.cv";
crypto gdh(gexp_div_8) [variables: secA0 -> a, sephSecAB1 -> a, ephSecAB1 -> a, ephSecBA1 -> a, ephSecBA1' -> a, ephSecBA2 -> a, ephSecBA2' -> a  .];
crypto int_ctxt(enc) *;
crypto ind_cpa(enc) *;
success
}


type emkey [fixed,large]. 

type Z [bounded,large,nonuniform]. (* Exponents *)
type G [bounded,large,nonuniform]. (* Diffie-Hellman group *)
type subG [bounded,large,nonuniform]. (* Diffie-Hellman group *)

(* Type of principals *)
type prin [bounded].

(* Honest principals *)
const alice, bob: prin.

(* Gap Diffie-Hellman *)

(* Note: the secret keys in Signal are really normalized to be multiples of k,
   as specified in RFC 7748. The normalization is commented out in the exponentiation
   function:
https://github.com/signalapp/libsignal-protocol-javascript/blob/f5a838f1ccc9bddb5e93b899a63de2dea9670e10/native/curve25519-donna.c/#L860
   but done when generating a key pair:
https://github.com/signalapp/libsignal-protocol-javascript/blob/f5a838f1ccc9bddb5e93b899a63de2dea9670e10/src/curve25519_wrapper.js#L25
*)
expand DH_X25519(G, Z, g, gexp, mult, subG, g_8, gexp_div_8, gexp_div_8', pow8, subGtoG, is_zero, is_zero_subG).
proba pGDH.
proba pDistRerandom.
expand GDH_single(subG, Z, g_8, gexp_div_8, gexp_div_8', mult, pGDH, pDistRerandom).

(* Generate enc key - 4DH *)

type hashkey2 [large,fixed].
expand ROM_hash_large_5(hashkey2, G, G, G, G, G, emkey, H5, hashoracle2, qH2).

(* Generate enc key - 3DH *)

type hashkey3 [large,fixed].
expand ROM_hash_large_4(hashkey3, G, G, G, G, emkey, H4, hashoracle3, qH3).

(* End of key derivation functions *)

(* Signatures *)

type keyseed [large, fixed].
type pkey [bounded].
type skey [bounded].
type t_sign.
proba Psign.
proba Psigncoll.
expand UF_CMA_proba_signature(keyseed, pkey, skey, G, t_sign, skgen, pkgen, sign, checksign, Psign, Psigncoll).

(* AEAD *)

type t_data.
proba Penc.
proba Pencctxt.

expand AEAD(emkey, bitstring, bitstring, t_data, enc, dec, injbot, Zero, Penc, Pencctxt).

(* test(b,x,y) returns x when b = true and y when b is false *)

fun test(bool, bitstring, bitstring): bitstring.
equation forall x:bitstring,y:bitstring; test(true,x,y) = x.
equation forall x:bitstring,y:bitstring; test(false,x,y) = y.
equation forall b0:bool,x:bitstring; test(b0,x,x) = x.
equation forall b0:bool,x:bitstring,y:bitstring; Zero(test(b0,x,y)) = test(b0,Zero(x),Zero(y)).

const const1: bitstring.
fun concat5(G,pkey,G,pkey,G):t_data [data].


param Nprinc, Nsend, Nrecv, Nsend2, Nrecv2, Nrecv3, Nrecv4, Nrecv5, Nrecv6, Nsignedprekey, Nsignedprekey2.
channel start, ch0, recprin, outprin, chprin, ch1, ch2, ch3, ch4, ch5, ch6, ch7, ch8, ch9, ch10, ch11, ch12, ch13, ch14, ch15, ch16, ch17, ch18, ch19, ch20, ch21, ch22, ch23, ch24, ch25, ch26, ch27, ch28, ch29, ch30, cCorrupt.

table keys(Z, G, skey, pkey).

(* Replay cache *)

table replaycache(G, G).

(* Security properties *)

event Send(G, pkey, G, pkey, G, G, G, G, bitstring).
event Recv(G, pkey, G, pkey, G, G, G, G, bitstring).
event Send3(G, pkey, G, pkey, G, G, G, bitstring).
event Recv3(G, pkey, G, pkey, G, G, G, bitstring).
(* Arguments of events 
   - public keys of sender (DH and signature)
   - public keys of receiver (DH and signature)
   - signed ephemeral
   - one-time ephemeral [for 4DH only]
   - sender first ephemeral
   - sender second ephemeral
   - sent message
*)


query a0:G,as:pkey,b0:G,bs:pkey,sb:G,ob:G,a1:G,ob2:G,a12:G,a2:G,m:bitstring;
      inj-event(Recv(a0,as,b0,bs,sb,ob,a1,a2,m)) ==> inj-event(Send(a0,as,b0,bs,sb,ob2,a12,a2,m)) && pow8(ob) = pow8(ob2) && pow8(a1) = pow8(a12)
      public_vars secb.
query a0:G,as:pkey,b0:G,bs:pkey,sb:G,a1:G,a12:G,a2:G,m:bitstring;
      event(Recv3(a0,as,b0,bs,sb,a1,a2,m)) ==> event(Send3(a0,as,b0,bs,sb,a12,a2,m)) && pow8(a1) = pow8(a12)
      public_vars secb.

(* Without the anti-replay countermeasure, CryptoVerif should not
   prove the following query, because there is a replay attack.
   With the countermeasure, the replay attack disappears,
   so CryptoVerif should prove this query *)
query a0:G,as:pkey,b0:G,bs:pkey,sb:G,a1:G,a12:G,a2:G,m:bitstring;
      inj-event(Recv3(a0,as,b0,bs,sb,a1,a2,m)) ==> inj-event(Send3(a0,as,b0,bs,sb,a12,a2,m)) && pow8(a1) = pow8(a12) 
      public_vars secb.


query secret secb [cv_bit].

(* Bob generating prekeys and running the protocol, with Alice
   or with any other participant *)

let SendAKE(hk2: hashkey2, hk3: hashkey3) =
   (* Signed prekey *)
   in(ch1, pubB: G);
   get keys(secB, =pubB, secBsign, pubBsign) in
   new sephSecAB1: Z;
   let sephPubAB1: G = gexp(g, sephSecAB1) in
   let signature = sign(sephPubAB1, secBsign) in
   out(ch2, (sephPubAB1,signature));
   ((
   ! Nsignedprekey
   (* One-time prekey *)
   in(ch3, ());
   new ephSecAB1: Z;
   let ephPubAB = gexp(g, ephSecAB1) in
   out(ch4, ephPubAB);
   (* 2nd part of key exchange, 
      using prekey ephPubAB and signed prekey sephPubAB1 *)
   in(ch5, (x_pubA: G,x_pubAsign: pkey, ephPubBA: G, ephPubBA': G, msgenc: bitstring));
   let g1n1 = gexp(x_pubA,sephSecAB1) in
   let g2n1 = gexp(ephPubBA, secB) in
   let g3n1 = gexp(ephPubBA, sephSecAB1) in
   let g4n1 = gexp(ephPubBA, ephSecAB1) in
   let sharedn1 = gexp(ephPubBA', sephSecAB1) in
   let kENC = H5(hk2, g1n1, g2n1, g3n1, g4n1, sharedn1) in
   let injbot(msg) = dec(msgenc, concat5(x_pubA, x_pubAsign, pubB, pubBsign, ephPubBA'), kENC) in
   get keys(secA, =x_pubA, secAsign, pubAsign) suchthat pubB <> x_pubA in
     event Recv(x_pubA,x_pubAsign,pubB,pubBsign,sephPubAB1,ephPubAB,ephPubBA,ephPubBA',msg)
   else
     out(ch5, msg)
   )|(
   ! Nsignedprekey2
   (* Version without the optional one-time prekey *)
   in(ch7, (x_pubA: G,x_pubAsign: pkey, ephPubBA: G, ephPubBA2: G, msgenc: bitstring));

   (* Protection against replays 
     	It is important to use the ephemeral ephPubBA2 in the replay cache,
	and not ephPubBA. 
	With curve25519, there can be 8 ephemerals yielding the same 
	Diffie-Hellman shared value, so a replay might be possible
	with a different ephemeral. It is indeed possible with ephPubBA,
	but not with ephPubBA2, because ephPubBA2 appears in the additional
	data of authenticated by encryption, so a modified ephPubBA2
	is rejected. *)
   get replaycache(=x_pubA, =ephPubBA2) in yield else
   insert replaycache(x_pubA, ephPubBA2);


   let g1n3 = gexp(x_pubA,sephSecAB1) in
   let g2n3 = gexp(ephPubBA, secB) in
   let g3n3 = gexp(ephPubBA, sephSecAB1) in
   let sharedn3 = gexp(ephPubBA2, sephSecAB1) in
   let kENC = H4(hk3, g1n3, g2n3, g3n3, sharedn3) in
   let injbot(msg) = dec(msgenc, concat5(x_pubA, x_pubAsign, pubB, pubBsign, ephPubBA2), kENC) in
   get keys(secA, =x_pubA, secAsign, pubAsign) suchthat pubB <> x_pubA in
     event Recv3(x_pubA,x_pubAsign,pubB,pubBsign,sephPubAB1,ephPubBA,ephPubBA2,msg)
   else
     out(ch8, msg)
   )).

(* Alice using prekeys and sending a message to a participant (Bob or other).
   The received arguments x_pubB:G, x_pubBsign:pkey choose Alice's interlocutor. *)

let RecvAKE(hk2: hashkey2, secb1: bool) =
   (* Key exchange + send message m1 or m2 *)
   in(ch9,(pubA: G, x_pubB:G, x_pubBsign:pkey, sephPubAB:G,signature:t_sign,ephPubAB:G,(m1: bitstring, m2:bitstring)));
   get keys(secA, =pubA, secAsign, pubAsign) in
   
          new ephSecBA1: Z;
      	  let ephPubBA = gexp(g, ephSecBA1) in
      	  let g1n5 = gexp(sephPubAB, secA) in
      	  let g2n5 = gexp(x_pubB, ephSecBA1) in
      	  let g3n5 = gexp(sephPubAB, ephSecBA1) in
      	  let g4n5 = gexp(ephPubAB, ephSecBA1) in
	  new ephSecBA1': Z;
      	  let ephPubBA' = gexp(g, ephSecBA1') in
      	  let sharedn5 = gexp(sephPubAB, ephSecBA1') in
      	  let kENC = H5(hk2, g1n5, g2n5, g3n5, g4n5, sharedn5) in
      
          get keys(secB, =x_pubB, secBsign, =x_pubBsign) suchthat x_pubB <> pubA in
      	  (
	      (* Alice talks to Bob *)
              if checksign(sephPubAB, x_pubBsign, signature) then
              (* Check that m1 and m2 have the same length *)
              if Zero(m1) = Zero(m2) then
              (* Send either m1 or m2 depending on the value of b *)
              let msg = test(secb1, m1, m2) in
              let cipher = enc(msg, concat5(pubA, pubAsign, x_pubB, x_pubBsign, ephPubBA'), kENC) in
              event Send(pubA,pubAsign,x_pubB,x_pubBsign,sephPubAB,ephPubAB,ephPubBA,ephPubBA',msg);
              out(ch10,(pubA, pubAsign, ephPubBA, ephPubBA', cipher))
          )
          else
          (
              (* Alice talks to a dishonest participant (or to Alice herself) *)
              if checksign(sephPubAB, x_pubBsign, signature) then
	      if m1 = m2 then
	      let msg = m1 in
              let cipher = enc(msg, concat5(pubA, pubAsign, x_pubB, x_pubBsign, ephPubBA'), kENC) in
              out(ch10,(pubA, pubAsign, ephPubBA, ephPubBA', cipher))
          ).


let RecvAKE_3DH(hk3: hashkey3, secb1: bool) =
   (* Key exchange + send message m1 or m2 *)
   in(ch11,(pubA: G, x_pubB:G, x_pubBsign:pkey, sephPubAB:G,signature:t_sign,(m1: bitstring, m2:bitstring)));
   get keys(secA, =pubA, secAsign, pubAsign) in

          new ephSecBA2: Z;
      	  let ephPubBA = gexp(g, ephSecBA2) in
      	  let g1n6 = gexp(sephPubAB, secA) in
      	  let g2n6 = gexp(x_pubB, ephSecBA2) in
      	  let g3n6 = gexp(sephPubAB, ephSecBA2) in
	  new ephSecBA2': Z;
      	  let ephPubBA' = gexp(g, ephSecBA2') in
      	  let sharedn6 = gexp(sephPubAB, ephSecBA2') in
      	  let kENC = H4(hk3, g1n6, g2n6, g3n6, sharedn6) in
      
          get keys(secB, =x_pubB, secBsign, =x_pubBsign) suchthat x_pubB <> pubA in
      	  (
	      (* Alice talks to Bob *)
      	      if checksign(sephPubAB, x_pubBsign, signature) then
              (* Check that m1 and m2 have the same length *)
      	      if Zero(m1) = Zero(m2) then
      	      (* Send either m1 or m2 depending on the value of b *)
      	      let msg = test(secb1, m1, m2) in
	      let cipher = enc(msg, concat5(pubA, pubAsign, x_pubB, x_pubBsign, ephPubBA'), kENC) in
	      event Send3(pubA,pubAsign,x_pubB,x_pubBsign,sephPubAB,ephPubBA,ephPubBA',msg);
      	      out(ch12,(pubA, ephPubBA, ephPubBA', cipher))
          )
          else
          (
              (* Alice talks to a dishonest participant (or to Alice herself) *)
              if checksign(sephPubAB, x_pubBsign, signature) then
	      if m1 = m2 then
	      let msg = m1 in
	      let cipher = enc(msg, concat5(pubA, pubAsign, x_pubB, x_pubBsign, ephPubBA'), kENC) in
      	      out(ch12,(pubA, ephPubBA, ephPubBA', cipher))
          ).


let genprinc() =
    in(outprin,());
    new secA0:Z;
    let pubA = gexp(g,secA0) in
    new signAseed: keyseed;
    let secAsign = skgen(signAseed) in
    let pubAsign = pkgen(signAseed) in
    insert keys(secA0, pubA, secAsign, pubAsign);
    out(outprin,(pubA, pubAsign)).


process
    in(start, ());
    new secb: bool;
    new hk2: hashkey2;
    new hk3: hashkey3;
    out(start, ());
    (
      (!Nprinc genprinc())
    | (!Nsend SendAKE(hk2, hk3))
    | (!Nrecv RecvAKE(hk2, secb))
    | (!Nrecv3 RecvAKE_3DH(hk3, secb))
    | hashoracle2(hk2) | hashoracle3(hk3))




(* EXPECTED
All queries proved.
71.396s (user 71.372s + system 0.024s), max rss 105736K
END *)


