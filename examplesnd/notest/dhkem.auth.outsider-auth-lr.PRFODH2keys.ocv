(* Does not work because the key x_1 (sk) is used both in the 1st and 2nd
   arguments of ExtractAndExpand (inside DH values). If we apply PRF-ODH 
   considering the key as the second argument of ExtractAndExpand, then
   the usages of x_1 in the 1st argument can only be encoded by compromising
   x_1, which is not what we want.
   ==> That is why we need to use a chaining of PRF calls instead of 
   PRF-ODH with 2 possible key positions.  *)

proof {
  allowed_collisions default^4/large;
   (* We allow eliminating collisions with probability in power 4 of 
      N, Qeperuser, Qdperuser, Qcperuser times PCollKey, to allow q^2 * PCollKey,
      where q = N * (Qeperuser + Qdperuser + Qcperuser) *)
  (* start on the left side *)
  crypto exclude_weak_keys(Z_t) **;
  out_game "l.out.cv";

  (* Preliminary work on the right-hand side. *)
  start_from_other_end;
  crypto exclude_weak_keys(Z_t) **;
  out_game "r.out.cv";
  simplify;
  (* We move the deserialization of the ciphertext earlier, so that the
     whole computation in OADecap deals with a deserialized ciphertext *)
  insert after "OADecap" "let Serialize(pkE_10) = cd in";
  all_simplify;
  out_game "r1.out.cv";

  (* Now we work on the left-hand side *)
  start_from_other_end;
  (* We introduce in OADecap the structure we have on the right-hand side. *)
  insert after "let Serialize(pkE_3"
    "find ie1_1 = ie1 <= Qeperuser, i1_3 = i1_2 <= N suchthat
      defined(zz_2[ie1, i1_2], enc_1[ie1, i1_2], x_1[i1_2], pk_R[ie1, i1_2])
      && (expnw(g, x_1) = pk_R[ie1, i1_2])
      && (expnw(g, x_1[i1_2]) = pk_S)
      && (enc_1[ie1, i1_2] = enc_2) then
    orfind id1_1 = id1 <= Qdperuser suchthat
      defined(random_br[id1], zz_3[id1], enc_2[id1], pk_S[id1])
      && (pk_S[id1] = pk_S)
      && (enc_2[id1] = enc_2) then
    else
      find i1_1 = i1 <= N suchthat
          defined(x_1[i1])
          && (pk_S = expnw(g, x_1[i1])) then
        random_br <- true";
  simplify;
  out_game "l1occ.out.cv" occ;
  (* Use correctness of the KEM: Replace the result of OADecap with a
     cleartext generated in OAEncap, in the first branch of the first
     find introduced above. *)
  replace
    at_nth 1 3 "return{[0-9]*}({[0-9]*}AuthDecap_Some({[0-9]*}zz_3))"
    "zz_2[ie1_2, i1_8]";
  remove_assign useless;
  out_game "l2occ.out.cv" occ;
  (* Replace the result of OADecap with the result of a previous call to
     OADecap, in the second branch of the first find introduced above *)
  replace
    at_nth 1 3 "return{[0-9]*}({[0-9]*}AuthDecap_Some({[0-9]*}zz_3))"
    "zz_3[id1_2]";
  (* Use unique names for the assignments of the following variables
     that are currently not unique *)
  SArename zz_3;
  SArename kemContext_3;
  remove_assign binder dh1;
  remove_assign binder dh2;
  remove_assign useless;
  (* In OAEncap, distinguish whether pk_R is an honest key or not *)
  insert after "OAEncap(pk_R"
    "find i1 <= N suchthat
      defined(x_1[i1])
      && pk_R = expnw(g, x_1[i1]) then";
  out_game "l3.out.cv";
  (* Use unique names for the assignments of the following variables
     that are currently not unique *)
  SArename x;
  SArename enc_1;
  SArename zz_2;
  remove_assign binder dh1_1;
  remove_assign binder dh2_1;
  SArename kemContext_2;
  out_game "l4.out.cv";
  crypto prf_odh(ExtractAndExpand) x_1 x_4 . (*If we want to be more precise: x_1 x_4 . *);
  all_simplify;
  out_game "l5.out.cv" occ;
  

  start_from_other_end;
  (* Now we work on the right-hand side *)
  (* In OAEncap, distinguish whether pk_R is an honest key or not *)
  insert after "OAEncap(pk_R_1"
    "find i1 <= N suchthat
      defined(x_3[i1])
      && pk_R_1 = expnw(g, x_3[i1]) then";
  out_game "r1.out.cv";
  (* Use unique names for the assignments of the following variables
     that are currently not unique *)
  SArename x_2;
  SArename enc_6;
  SArename kemContext_7;
  SArename zz_7;
  out_game "r2.out.cv";
  crypto prf_odh(ExtractAndExpand) (* If we want to be more precise: x_3 z_4 . *);
  all_simplify;
  out_game "r3.out.cv" occ;
  success
}

type G_t [bounded].
fun Serialize(G_t): bitstring [data].
type Z_t [bounded,nonuniform].
type Znw_t [bounded,nonuniform].
proba PCollKey.
proba PWeakKey.

expand DH_proba_collision_minimal(
  G_t,
  Znw_t,
  g,
  expnw,
  mult,
  PCollKey
).

expand DH_exclude_weak_keys(
  G_t,
  Z_t,
  Znw_t,
  ZnwtoZ,
  exp,
  expnw,
  PWeakKey
).

type eae_output_t [fixed,large].
type GGG_t [fixed].


(* square PRF-ODH2 and PRF-ODH2
   This is a "square" variant of PRF_ODH2.

   G, Z, g, exp, exp', mult are as in DH_basic.
   prf(G, prf_in): prf_out: pseudo-random function that takes as argument a group
   element (in G) and an element in prf_in, and produces a result in 
   prf_out.
   The type prf_out must be "bounded" or "nonuniform".

   pPRF_ODH(t, n, n'): probability of breaking the PRF-ODH2 assumption
   in time t with n queries to the PRF (prf(g^ab, m)) 
   and n' queries to prf(X^a, m) or prf(X^b, m).
   pSQPRF_ODH(t, n, n'): probability of breaking the square PRF-ODH2 assumption
   in time t with n queries to the PRF (prf(g^aa, m)) 
   and n' queries to prf(X^a, m).

   The function prf is defined by this macro. It must not be declared
   elsewhere, and it can be used only after expanding the macro.
   All other arguments must be declared before this macro. *)

def square_PRF_ODH2_2ndarg(G, Z, prf_in1, prf_in2, prf_out, g, exp, exp', mult, prf, pPRF_ODH, pSQPRF_ODH) {

fun prf(prf_in1, G, prf_in2): prf_out.

(* The (square) PRF-ODH2 assumption *)

event ev_abort.

param na, na1, na2, naDH9.

table prf_dh_val(na, na, prf_in1, prf_in2, prf_out).

equiv(prf_odh(prf))
    foreach ia <= na do a <-R Z; (
      OA() := return(exp(g,a)) | 
      Oa() [10] := return(a) |
      foreach ia1 <= na1 do Oa1(ma1:G, xa1:prf_in1, xa2: prf_in2) := return(prf(xa1, exp(ma1, a), xa2)) |
      foreach ia2 <= na2 do Oa2(ja <= na, xa1': prf_in1, xa2':prf_in2) [useful_change] := return(prf(xa1', exp(g, mult(a[ja], a)), xa2')) |
      foreach iaDH9 <= naDH9 do ODHa9(x:Z) [2] := return(exp(g, mult(a, x)))
    )
<=(na * pSQPRF_ODH(time + (na + #Oa1 + #Oa2 - 2 + #ODHa9)*time(exp) +
      (#Oa1 + #Oa2 - 1) * time(prf, max(maxlength(xa1),maxlength(xa1')), max(maxlength(xa2),maxlength(xa2'))), na2, na1) +
   na*(na-1)/2 * pPRF_ODH(time + (na + #Oa1 + #Oa2 - 3 + #ODHa9)*time(exp) +
      (#Oa1 + #Oa2 - 1) * time(prf, max(maxlength(xa1),maxlength(xa1')), max(maxlength(xa2),maxlength(xa2'))), 2*na2, 2*na1))=>
    foreach ia <= na do a <-R Z; (
      OA() := return(exp'(g,a)) |
      Oa() :=
      	 (* Abort when a must not be compromised *)
         get prf_dh_val(=ia, ja, x1, x2, c) in event_abort ev_abort else
         get prf_dh_val(ja, =ia, x1, x2, c) in event_abort ev_abort else
         let ka:bool = true in return(a) |
      foreach ia1 <= na1 do Oa1(ma1:G, xa1:prf_in1, xa2:prf_in2) :=
      	 find j' <= na suchthat defined(a[j']) && exp'(ma1,a) = exp'(g, mult(a[j'],a)) then
	 (
	    (* In this case, that's the same as Oa2 *)
	    if defined(ka[j']) then (* a[j'] compromised *) return(prf(xa1, exp'(ma1, a), xa2)) else
            if defined(ka) then (* a compromised *) return(prf(xa1, exp'(ma1, a), xa2)) else
	    (* At this point, a and a[j'] are not compromised, and must never be compromised in the future *)
	    get[unique] prf_dh_val(=ia, =j', =xa1, =xa2, c) in return(c) else
	    get[unique] prf_dh_val(=j', =ia, =xa1, =xa2, c) in return(c) else
	    ca1 <-R prf_out;
	    insert prf_dh_val(ia, j', xa1, xa2, ca1);
	    return(ca1)
	 )
	 else
	    return(prf(xa1, exp'(ma1, a), xa2)) |
      foreach ia2 <= na2 do Oa2(ja <= na, xa1':prf_in1, xa2': prf_in2) :=
	 if defined(ka[ja]) then (* a[ja] compromised *) return(prf(xa1', exp'(g, mult(a[ja], a)), xa2')) else
         if defined(ka) then (* a compromised *) return(prf(xa1', exp'(g, mult(a[ja], a)), xa2')) else
	 (* At this point, a and a[ja] are not compromised, and must never be compromised in the future *)
	 get[unique] prf_dh_val(=ia, =ja, =xa1', =xa2', c) in return(c) else
	 get[unique] prf_dh_val(=ja, =ia, =xa1', =xa2', c) in return(c) else
         ca2 <-R prf_out;
	 insert prf_dh_val(ia, ja, xa1', xa2', ca2);
	 return(ca2) |
      foreach iaDH9 <= naDH9 do ODHa9(x:Z) := return(exp'(g, mult(a, x)))
    ).
	 
}

proba pPRF_ODH.
proba pSQPRF_ODH.
expand square_PRF_ODH2_2ndarg(G_t, Znw_t, G_t, GGG_t, eae_output_t, g, expnw, expnw, mult, ExtractAndExpand, pPRF_ODH, pSQPRF_ODH).

(* For a group of prime order q:
   PColl1Rand(Z_t) = PColl2Rand(Z_t) = 1/(q-1)
   PCollKey1 = PCollKey2 = 1/(q-1)
   PDistRerandom = 0

   For Curve25519:
   PColl1Rand(Z_t) = PColl2Rand(Z_t) = 2^{-251}
   PCollKey1 = PCollKey2 = 2 PColl1Rand(Z_t) = 2^{-250}
   PDistRerandom = 2^{-125}

   For Curve448:
   PColl1Rand(Z_t) = PColl2Rand(Z_t) = 2^{-445}
   PCollKey1 = PCollKey2 = 2 PColl1Rand(Z_t) = 2^{-444}
   PDistRerandom = 2^{-220}
*)

letfun DH(exponent: Z_t, group_element: G_t) =
  exp(group_element, exponent).
letfun pkgen(exponent: Z_t) =
  exp(g, exponent).
letfun skgen(exponent: Z_t) =
  exponent.
letfun GenerateKeyPair() =
  z <-R Z_t;
  (skgen(z), pkgen(z)).


(* KDF *)

fun concatContext(G_t, G_t, G_t): GGG_t [data].

(* Detailed justification that the following usage of ExtractAndExpand
   satisfies the assumptions of above-mentioned Lemma 6, given it is
   implemented by HKDF:

- keyspace and info||i_0 do not collide, because info has two bytes and
  then RFCXXXX, and RFCXXXX does not collide with itself when moved by
  two bytes.

For long Nsecret, we also need to consider this:
- keyspace and hmac_output_space||info||i_j with j>0
  Length(keyspace) - Length(hmac_output_space||info||i_j)
  = -2 +Length(label_eae_prk) -Length(label_shared_secret) +Length(dh) -Length(kem_context) -Nh
  = -2 +7 -13 +Ndh -Nenc -Npk -Npk -Nh
  = -8 +Ndh -Nenc -Npk -Npk -Nh
  Assuming that Ndh is pretty close to Npk, we can argue that
  keyspace and hmac_output_space||info||i_j with j>0
  have clearly different lengths, and thus, do not collide.

Therefore the following usage of ExtractAndExpand satisfies the
assumptions of Lemma 6.
*)

expand OptionType_2(AuthEncap_res_t, AuthEncap_tuple, AuthEncap_None, eae_output_t, bitstring).

letfun AuthEncap(pkR: G_t, skS: Z_t) =
  let (skE: Z_t, pkE: G_t) = GenerateKeyPair() in
  (
    let dh1 = DH(skE, pkR) in
    let dh2 = DH(skS, pkR) in
    let enc: bitstring = Serialize(pkE) in
    let pkS = pkgen(skS) in
    let kemContext: GGG_t = concatContext(pkE, pkR, pkS) in
    let zz: eae_output_t = ExtractAndExpand(dh1, dh2, kemContext) in
    AuthEncap_tuple(zz, enc)
  ) else (
    AuthEncap_None
  ).

expand OptionType_1(AuthDecap_res_t, AuthDecap_Some, AuthDecap_None, eae_output_t).

letfun AuthDecap(enc: bitstring, skR: Z_t, pkS: G_t) =
  let Serialize(pkE: G_t) = enc in
  (
    let dh1 = DH(skR, pkE) in
    let dh2 = DH(skR, pkS) in
    let pkR = pkgen(skR) in
    let kemContext: GGG_t = concatContext(pkE, pkR, pkS) in
    let zz: eae_output_t = ExtractAndExpand(dh1, dh2, kemContext) in
    AuthDecap_Some(zz)
  ) else (
    AuthDecap_None
  ).

event AuthEncap_does_not_fail.

param N, Qeperuser, Qdperuser.

equivalence
      foreach i <= N do Osetup() := sk <-R Z_t; return(); (
        foreach ie <= Qeperuser do (
	  OAEncap(pk_R: G_t) :=
            return(AuthEncap(pk_R, skgen(sk)))) |
        foreach id <= Qdperuser do (
	  OADecap(pk_S: G_t, enc: bitstring) :=
            return(AuthDecap(enc, skgen(sk), pk_S))) |
	(* The next oracle gives the public key to the adversary *)
        Opk() := return(pkgen(sk))
	)

      foreach i <= N do Osetup() := sk <-R Z_t; return(); (
        foreach ie <= Qeperuser do (
	  OAEncap(pk_R: G_t) :=
            let AuthEncap_tuple(k: eae_output_t, ce: bitstring) = AuthEncap(pk_R, skgen(sk)) in (
              return(AuthEncap_tuple(k, ce))
            ) else (
              (* Never happens because AuthEncap always returns AuthEncap_tuple(...) *)
              return(AuthEncap_None)
            )) |
        foreach id <= Qdperuser do (
	  OADecap(pk_S: G_t, cd: bitstring) :=
	    (* This "find" implements a lookup in the set E of the paper.
               The set is not built explicitly; we look for values in
               OAEncap and previous OADecap queries using arrays.
	       The first branch looks into OAEncap queries, and in case of
	       success, the oracle returns the key k computed there.
	       The second branch (after "orfind") looks into previous
	       OADecap queries, and in case of success, the oracle returns 
	       the previously computed key k'. *)
            find ie1 <= Qeperuser, i1 <= N suchthat
                defined(sk[i1], pk_R[ie1, i1], k[ie1, i1], ce[ie1, i1]) &&
                pkgen(sk) = pk_R[ie1, i1] && pkgen(sk[i1]) = pk_S && ce[ie1, i1] = cd then (
              return(AuthDecap_Some(k[ie1, i1]))
            ) orfind id1 <= Qdperuser, i1 <= N suchthat
                defined(sk[i1], pk_S[id1, i1], k'[id1, i1], cd[id1, i1]) &&
                pkgen(sk) = pkgen(sk[i1]) && pk_S[id1, i1] = pk_S && cd[id1, i1] = cd then (
              return(AuthDecap_Some(k'[id1, i1]))
            ) else (
	        (* This "find" checks whether pk_S is among the honest public keys pk_i *)
                find i1 <= N suchthat defined(sk[i1]) && pk_S = pkgen(sk[i1]) then (
                  let AuthDecap_Some(k0) = AuthDecap(cd, skgen(sk), pk_S) in ( 
                    k' <-R eae_output_t;
                    return(AuthDecap_Some(k'))
                  ) else (
                    return(AuthDecap_None)
                  )
                ) else (
                  return(AuthDecap(cd, skgen(sk), pk_S))
                )
          )) |
        Opk() := return(pkgen(sk))
        )

(* EXPECTED FILENAME: examples/hpke/PRFODH/dhkem.auth.outsider-auth-lr.m4.ocv TAG: 1
All queries proved.
0.924s (user 0.916s + system 0.008s), max rss 30176K
END *)
