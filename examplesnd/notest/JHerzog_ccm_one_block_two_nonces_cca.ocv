(**********************************************************************
*
* Chosen *ciphertext* for CCM mode, one plaintext block, *separate* nonces for
* the counter mode and CBC mac
*
*  * modified from a script by Jonathan Herzog
*  * Blocks: 2
*  * Result: unknown
*
*
***********************************************************************)

(* I believe the tests
	    if tag_nonce = counter_nonce ||
	       tag_nonce = incr(counter_nonce) then bottom else
are not sufficient to avoid attacks. 

The scheme leaks 
aes_enc(counter_nonce + 1, aesk) = xor(b1, cipherblock1).
so we get knowledge of some aes values
aes_enc(x1, aesk), ..., aes_enc(xn, aesk)
By using these aes values in the computation of the tag for decryption,
taking
      	        tag_nonce = x1
		counter_nonce = x2-1
		cipherblock1 = (x2-1) xor aes_enc(x1, aesk) xor aes_enc(x2, aesk)
		mac_tag = 0

	    	counter1 <- incr(counter_nonce) = x2;
		pad1 <- aes_enc(counter1, aesk) = aes_enc(x2, aesk);
		plaintext1 <- xor(pad1, cipherblock1) = (x2-1) xor aes_enc(x1, aesk);

		b0 <- tag_nonce = x1;
		t1 <- aes_enc(b0, aesk) = aes_enc(x1, aesk);
		t2 <- aes_enc( xor(t1, plaintext1), aesk) = aes_enc(x2-1, aesk) 

 		s0 <- aes_enc(counter_nonce, aesk) = aes_enc(x2-1, aesk);
		
		recomputed_tag <- xor(t2, s0) = 0
we get recomputed_tag = mac_tag so decryption succeeds.
Hence we can break the scheme in a way similar to
examplesnd/otest/JHerzog_counter_mode_with_cbc_mac_one_block_two_nonces_cpa_ctxt.ocv

This problem is fixed with stronger properties for the nonces, 
in file examplesnd/otest/JHerzog_ccm_one_block_cca.ocv

*)

proof {
show_game occ;
interactive;
replace 85 "xor(s0, mac_tag) = aes_enc(xor(t1, plaintext1), aesk_3)";
remove_assign useless;
show_game occ;
crypto prp_partial(aes_enc) special("2 may collide with previous 1,2") [ terms: 119 -> O_1, 124 -> O_1, 133 -> O_1, 142 -> O_1, 50 -> O_2, 61 -> O_2, 66 -> O_2, 71 -> Oeq_2 ]
}

type block [fixed, large].
type aes_key [fixed, large].
proba Paes.
expand PRP_cipher(aes_key, block, aes_enc, aes_dec, Paes).


type cm_ciphertext [bounded].
fun cm_join(block, block): cm_ciphertext [data].

type maced_ciphertext [bounded].
fun mac_join(cm_ciphertext, block, block): maced_ciphertext [data].

fun injbot(block): bitstringbot [data].


(* define xor to exist over blocks *)
expand Xor(block, xor, zero_block).


(* Useful helper function. Dunno why. *)
fun test(bool, block, block):block.
equation forall x:block,y:block; test(true,x,y) = x.
equation forall x:block,y:block; test(false,x,y) = y.

(* axiomitize incr *)
fun incr(block): block [data, uniform].
equation forall x:block; incr(x) <> x. 


(* Parameters *)

param N_enc. (* the number of times the adversary gets to call the encryption oracle *)
param N_dec. (* the number of times the adversary gets to call the decryption oracle *)
param C. (* the number of challenge ciphertexts available to the adversary *)



(* what do we want? That the adversary does not know which plaintext 
   was encrypted *)

query secret secret_bit.

letfun enc(aesk: aes_key, b1: block) =
       tag_nonce <-R block;
       b0 <- tag_nonce;

       t1 <- aes_enc(b0, aesk);
       t2 <- aes_enc( xor(t1, b1), aesk);

       counter_nonce <-R block;
       s0 <- aes_enc(counter_nonce, aesk);

       counter1 <- incr(counter_nonce);
       pad1 <- aes_enc(counter1, aesk);
       cipherblock1 <- xor(b1, pad1);

       this_cm_ciphertext <- cm_join(counter_nonce, cipherblock1);

       tag <- xor(t2, s0);

       ciphertext <- mac_join(this_cm_ciphertext, tag_nonce, tag);
       ciphertext.


letfun dec(aesk: aes_key, maced_ctext: maced_ciphertext) =
	let mac_join(cm_ctext, tag_nonce, mac_tag) = maced_ctext in      

	    let cm_join(counter_nonce, cipherblock1) = cm_ctext in
	    (* Reject ciphertexts in which tag_nonce and counter_nonce
	       are incompatible, to avoid an attack *)
	    if tag_nonce = counter_nonce ||
	       tag_nonce = incr(counter_nonce) then bottom else

	    	counter1 <- incr(counter_nonce);
		pad1 <- aes_enc(counter1, aesk);
		plaintext1 <- xor(pad1, cipherblock1);

		b0 <- tag_nonce;
		t1 <- aes_enc(b0, aesk);
		t2 <- aes_enc( xor(t1, plaintext1), aesk);

 		s0 <- aes_enc(counter_nonce, aesk);
		
		recomputed_tag <- xor(t2, s0);

		if recomputed_tag = mac_tag
                    then injbot(plaintext1) else bottom
            else bottom
	else bottom.


let enc_oracle(aesk: aes_key) = 
    Oenc(b1 : block):=
    return(enc(aesk, b1)).

let challenge_oracle(aesk: aes_key, secret_bit0: bool) =
    Ochallenge(b11: block, b21: block ) :=
    b1 <- test(secret_bit0, b11, b21);
    challenge : maced_ciphertext <- enc(aesk, b1);
    return(challenge).

let dec_oracle(aesk: aes_key) = 
   Odec(maced_ctext: maced_ciphertext) :=
   find 
       u <= C suchthat defined(challenge[u]) && (maced_ctext = challenge[u])
   then
       yield
   else
       return(dec(aesk, maced_ctext)).


process 
	Ostart() :=
	(* Choose the key *)
        aesk <-R aes_key;
        secret_bit <-R bool;
	return;
	(* Make encryption oracles available now IN PARALLEL 
 	   with the rest of the game. *)

        (* For simplicity, cut the enc_oracle as a first step 
        (foreach i <= N_enc do run enc_oracle(aesk)) | *)
	(foreach i <= N_dec do run dec_oracle(aesk)) |
	(foreach i <= C do run challenge_oracle(aesk, secret_bit))

