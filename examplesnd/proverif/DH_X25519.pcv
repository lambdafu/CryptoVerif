(* Signed Diffie-Hellman protocol *)

(* Example updated from CV 1.28 by Benjamin Beurdouche *)

proof{
insert before "new a" "if hostB = B then";
SArename a;
SArename ga;
insert before "new b" "find j <= N suchthat defined(ga_3[j],hostB[j]) && pow_k(ga_1) = pow_k(ga_3[j]) && hostA = A && hostB[j] = B then";
SArename b;
SArename gb_2;
crypto uf_cma(sign) rkA;
crypto uf_cma(sign) rkB;
success;
insert after "in(ch1" "let subGtoG(xsub) = x1 in";
crypto rom(h);
auto
}

param N, N2.

type host [bounded].
type keyseed [large,fixed].
type seed [fixed].
type pkey [bounded].
type skey [bounded].
type blocksize [bounded].
type signature [bounded].

type Z [large,bounded].
type G [large,bounded].
type D [fixed].

(* Let's use curve 25519 *)
type subG [large,bounded].
expand DH_X25519(G, Z, g, exp, mult, subG, g_k, exp_div_k, exp_div_k', pow_k, subGtoG, zero, sub_zero).

(* CDH assumption *)
proba pCDH.
expand CDH(subG, Z, g_k, exp_div_k, exp_div_k', mult, pCDH).


(* Hash in the random oracle model *)
type hashkey [fixed].
expand ROM_hash_large(hashkey, G, D, h, hashoracle, qH).

(* Concatenation helper functions *)
fun concatA(host, host, G, G):blocksize [data].
fun concatB(host, host, G, G):blocksize [data].

equation forall x:host, y:host, z:G, t:G, x2:host, y2:host, z2:G, t2:G;
   concatA(x,y,z,t) <> concatB(x2,y2,z2,t2).

(* Signatures *)
proba Psign.
proba Psigncoll.
expand UF_CMA_proba_signature(keyseed, pkey, skey, blocksize, signature, skgen, pkgen, sign, check, Psign, Psigncoll).

table keys(host, pkey).

(* Peers *)
const A,B:host.

(* Queries and Events *)
query secret keyA.
query secret keyB.

event endA(host, host, G, G).
event beginB(host, host, G, G).
event endB(host, host, G, G).

query y: G, x: G; inj-event(endA(A, B, x, y)) ==> inj-event(beginB(A, B, x, y)) public_vars keyA, keyB.
query y: G, x: G; inj-event(endB(A, B, x, y)) ==> inj-event(endA(A, B, x, y)) public_vars keyA, keyB.

(* Channels and Processes *)
channel start, cstart, cA1, cA2, cA3, cA4, cA5, cA6, cB1, cB2, cB3, cB4, cB5, cH, cHret, cK.

let processA(hk:hashkey, skA:skey) =
  in(cA1, (hostB: host));
  new a:Z;
  let ga = exp(g,a) in
  out(cA2, (A, hostB, ga));
  in(cA3, (=A, =hostB, gb:G, s:signature));
  get keys(=hostB, pkhostB) in
  if check(concatB(A, hostB, ga, gb), pkhostB, s) then
  let gab = exp(gb, a) in
  let kA = h(hk, gab) in
  event endA(A, hostB, ga, gb);
  out(cA4, sign(concatA(A, hostB, ga, gb), skA));
  (* OK *)
  in(cA5, ());
  if hostB = B then
  (let keyA:D = kA)
  else
   out(cA6, kA).

let processB(hk:hashkey, skB:skey) =
  in(cB1, (hostA:host, =B, ga:G));
  new b:Z;
  let gb = exp(g,b) in
  event beginB(hostA, B, ga, gb);
  out(cB2, (hostA, B, gb, sign(concatB(hostA, B, ga, gb), skB)));
  in(cB3, s:signature);
  get keys(=hostA, pkhostA) in
  if check(concatA(hostA, B, ga, gb), pkhostA, s) then
  let gab = exp(ga, b) in
  let kB = h(hk, gab) in
  event endB(hostA, B, ga, gb);
  (* OK *)
  if hostA = A then
  (let keyB:D = kB)
  else
   out(cB4, kB).

let processK(pkA:pkey, pkB:pkey) =
  !iK <= N2
  in(cK, (Khost: host, Kkey: pkey));
  if Khost = B then insert keys(B, pkB) else
  if Khost = A then insert keys(A, pkA) else
  insert keys(Khost, Kkey).

process
	in(start, ());
	new hk: hashkey;
	new rkA : keyseed;
	let skA = skgen(rkA) in
	let pkA = pkgen(rkA) in
	new rkB : keyseed;
	let skB = skgen(rkB) in
	let pkB = pkgen(rkB) in
	out(cstart, (pkA, pkB));
   ((!iA <= N processA(hk,skA)) | (!iA <= N processB(hk,skB)) | hashoracle(hk) | processK(pkA,pkB))

(* EXPECTED
All queries proved.
0.884s (user 0.860s + system 0.024s), max rss 72180K
END *)

(* EXPECTPV
RESULT secret keyA is true.
RESULT secret keyB is true.
RESULT inj-event(endA(A,B,x,y)) ==> inj-event(beginB(A,B,x,y)) public_vars keyA,keyB is true.
RESULT inj-event(endB(A,B,x,y)) ==> inj-event(endA(A,B,x,y)) public_vars keyA,keyB is true.
0.248s (user 0.244s + system 0.004s), max rss 12972K
END *)
