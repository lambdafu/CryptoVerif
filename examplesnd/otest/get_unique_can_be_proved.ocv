(* Needham Schroeder public key protocol, fixed by Lowe.
   The user identity in this model is just an arbitrary
   address. An implementation could use an user@hostname
   construction.
 *)

proof {
  show_game;
  auto
}

param Qsetup.
param Qinit.
param Qresp.
param Qadv_keys.

def OptionType_1(option, option_Some, option_None, input) {
  fun option_Some(input): option [data].
  const option_None: option.
  equation forall x: input;
    option_Some(x) <> option_None.
}

type nonce [fixed,large].
type pkey [bounded].
type skey [bounded].
type keyseed [large,fixed].
type plaintext [bounded].
type plaintextbot [bounded].
type address [bounded].
type keypair [bounded].
fun kp(pkey, skey): keypair [data].

type ciphertext [bounded].
type ciphertext_opt [bounded].
expand OptionType_1(ciphertext_opt, ciphertext_some, ciphertext_bottom, ciphertext).

(* Use an option type for public keys: used in the setup oracle. *)
type pkey_option.
expand OptionType_1(pkey_option, pkey_Some, pkey_None, pkey).

table trusted_keys(address, skey, pkey).
table all_keys(address, pkey, bool).

set diffConstants = false.

fun msg1(nonce, address):plaintext [data].
fun msg2(nonce, nonce, address):plaintext [data].
fun msg3(nonce):plaintext [data].


equation forall z:nonce,t:nonce,u:address,y2:nonce,z2:address;
	msg2(z,t,u) <> msg1(y2,z2).
equation forall y:nonce,y2:nonce,z2:address;
	msg3(y) <> msg1(y2,z2).
equation forall z:nonce,t:nonce,u:address,y2:nonce;
	msg2(z,t,u) <> msg3(y2).

(* Public-key encryption (IND-CCA2) *)

proba Penc.
proba Penccoll.

expand IND_CCA2_public_key_enc(keyseed, pkey, skey, plaintext, ciphertext_opt, skgen, pkgen, enc, dec_opt, injbot, Z, Penc, Penccoll).

(* Not needed because the in processes receive ciphertext, not ciphertext_opt *)
equation forall sk: skey; dec_opt(ciphertext_bottom, sk) = bottom.

letfun dec(c: ciphertext, sk: skey) =
  dec_opt(ciphertext_some(c), sk).

letfun keygen() =  k <-R keyseed; kp(pkgen(k), skgen(k)).

const Zplaintext: plaintext.
equation forall x: plaintext; Z(x) = Zplaintext.

(* Queries *)

event beginA(address, address, nonce, nonce).
event endA(address, address, nonce, nonce).
event beginB(address, address, nonce, nonce).
event endB(address, address, nonce, nonce).

query x:address, y:address, na:nonce, nb:nonce;
	event(endA(x,y,na,nb)) ==> event(beginB(x,y,na,nb)).
query x:address, y:address, na:nonce, nb:nonce;
	event(endB(x,y,na,nb)) ==> event(beginA(x,y,na,nb)).
query x:address, y:address, na:nonce, nb:nonce;
	inj-event(endA(x,y,na,nb)) ==> inj-event(beginB(x,y,na,nb)).
query x:address, y:address, na:nonce, nb:nonce;
	inj-event(endB(x,y,na,nb)) ==> inj-event(beginA(x,y,na,nb)).



implementation
  type keyseed=64;
  type nonce=64;
  type ciphertext="ciphertext";
  type ciphertext_opt="ciphertext_opt";
  fun ciphertext_some="ciphertext_some" [inverse = "ciphertext_some_inv"];
  fun ciphertext_bottom="ciphertext_bottom";
  type pkey="pkey" [serial = "pkey_to","pkey_from"];
  type skey="skey" [serial = "skey_to","skey_from"];
  type pkey_option="pkey option";
  fun pkey_Some="Some";
  const pkey_None="None";
  table trusted_keys="trusted_keys";
  table all_keys="all_keys";
  fun msg1="serialize_msg1" [inverse = "deserialize_msg1"];
  fun msg2="serialize_msg2" [inverse =  "deserialize_msg2"];
  fun keygen = "(pk_kgen 1024)";
  fun kp = "id" [inverse = "id"];
  type address="string" [serial = "id", "id"];
  fun enc="pk_enc";
  fun dec="pk_dec";
  fun injbot="injbot" [inverse = "injbot_inv"];
  fun msg3="serialize_msg3" [inverse = "deserialize_msg3"].

type msg1res_t.
fun msg1succ(skey, pkey, pkey, bool, nonce, ciphertext): msg1res_t [data].
const msg1fail: msg1res_t.
equation forall x1: skey, x2: pkey, x3: pkey, x4: bool, x5: nonce, x6: ciphertext;
  msg1succ(x1,x2,x3,x4,x5,x6) <> msg1fail.

implementation
  fun msg1succ="msg1succ" [inverse = "msg1succ_inv"];
  const msg1fail="msg1fail";
  type msg1res_t="msg1res_t".

letfun initiator_send_msg_1_inner(addrA: address, addrX: address) =
  (* the gets fail if addrA or addrX have not been
      setup by the adversary. *)
  get[unique] trusted_keys(=addrA, skA, pkA) in (
    get[unique] all_keys(=addrX, pkX, trustX) in (
      (* Send Message 1 *)
      Na <-R nonce;
      let ciphertext_some(c1) = enc(msg1(Na, addrA), pkX) in (
        msg1succ(skA, pkA, pkX, trustX, Na, c1)
      ) else msg1fail
    ) else msg1fail
  ) else msg1fail.

let initiator() =

  Initiator {

  initiator_send_msg_1 (addrA: address, addrX: address) :=
    let msg1succ(skA, pkA, pkX, trustX, Na, c1) = initiator_send_msg_1_inner(addrA, addrX) in
    return (c1);

  (* Receive Message 2 *)
  initiator_send_msg_3 (c: ciphertext) :=
    let injbot(msg2(=Na, Nb, =addrX)) = dec(c, skA) in
    event beginA(addrA, addrX, Na, Nb);
    (* Send Message 3 *)
    let ciphertext_some(c3) = enc(msg3(Nb), pkX) in
    return (c3);

  (* OK *)
  (* TODO As soon as we know how we want to express events in F*,
     this can be extracted as well. *)
  initiator_finish () :=
    if (trustX) then
    event endA(addrA, addrX, Na, Nb);
    (* OCaml extraction seems to require a return at the end even if it is empty. *)
    return ()

  }.

let responder() =

  Responder {

  (* Receive Message 1 *)
  responder_send_msg_2 (addrB: address, m: ciphertext) :=
    (* the get fails if addrB has not been setup by
       the adversary *)
    get[unique] trusted_keys(=addrB, skB, pkB) in
    let injbot(msg1(Na, addrY)) = dec(m, skB) in
    get[unique] all_keys(=addrY, pkY, trustY) in
    (* Send Message 2 *)
    Nb <-R nonce;
    event beginB(addrY, addrB, Na, Nb);
    let ciphertext_some(c2) = enc(msg2(Na, Nb, addrB), pkY) in
    return (c2);

  (* Receive Message 3 *)
  responder_receive_msg_3 (m3: ciphertext) :=
    let injbot(msg3(=Nb)) = dec(m3, skB) in
    return ();

  (* OK *)
  (* TODO As soon as we know how we want to express events in F*,
     this can be extracted as well. *)
  responder_finish () :=
    if (trustY) then
    event endB(addrY, addrB, Na, Nb);
    return ()

  }.

letfun do_register(addr: address, pkX: pkey) =
  get[unique] all_keys(=addr, ign1, ign2) in (
    false
  ) else
    insert all_keys(addr, pkX, false);
    true.

let key_register() =
  Register_foreign_keys {

  register (addr: address, pkX: pkey) :=
    return (do_register(addr, pkX))
  }.

let setup() =
  Create_honest {

    foreach i <= Qsetup do
      setup(addr: address) :=
        get[unique] all_keys(=addr, ign1, ign2) in (
          return(pkey_None)
        ) else
          let kp(the_pkA: pkey, the_skA: skey) = keygen() in (
            insert trusted_keys(addr, the_skA, the_pkA);
            insert all_keys(addr, the_pkA, true);
            return(pkey_Some(the_pkA))
          ) else return(pkey_None)
  }.


process

  (
    run setup()
  |
    foreach i <= Qadv_keys do
      run key_register()
  |
    foreach i <= Qinit do
      run initiator()
  |
    foreach i <= Qresp do
      run responder()
  )

(* EXPECTED
All queries proved.
10.940s (user 10.890s + system 0.010s), max rss 33100K
END *)
