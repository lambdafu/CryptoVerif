(* One-way trapdoor permutation, with random self-reducibility. 
   Same as above, but with a smaller probability of attack
*)

def idx_OW_trapdoor_perm_RSR_all_args(seed, pkey, skey, D, pkgen, pkgen', skgen, f, f', invf, POW) {

param nK, nF, n1.

fun pkgen(seed):pkey.
fun pkgen'(seed):pkey.
fun skgen(seed):skey.
fun f(pkey, D):D.
fun f'(pkey, D):D.
fun invf(skey, D):D.

(* invf is the inverse of f *)

equation forall r:seed, x:D; invf(skgen(r), f(pkgen(r), x)) = x.

(* f is the inverse of invf *)

equation forall r:seed, x:D; f(pkgen(r), invf(skgen(r), x)) = x.

(* Injectivity of f *)

equation forall k:pkey, x:D, x':D; (f(k,x) = f(k,x')) = (x = x').
equation forall k:pkey, x:D, x':D; (f'(k,x) = f'(k,x')) = (x = x').

(* injectivity of invf *)

equation forall k:skey, x:D, x':D; (invf(k,x) = invf(k,x')) = (x = x').

(* f/invf are inverse permutations; use this to remove some
   occurrences of invf in equality tests *)

equation forall r:seed, x:D, x':D; 
	(x' = invf(skgen(r),x)) = (f(pkgen(r),x') = x).

(* We can permute the distribution, for uniformly distributed random
   numbers x. Do that only when x is used in invf(skgen(r),x) *)

equiv(remove_invf(f))
      r <-R seed; (
	Opk() := return(pkgen(r)) |
	foreach iF <= nF do x <-R D; 
		(Oant() := return(invf(skgen(r),x)) | 
	         Oim() := return(x)))
<=(0)=> [computational]
      r <-R seed [unchanged]; (
	Opk() := return(pkgen(r)) |
	foreach iF <= nF do x <-R D; 
		(Oant() := return(x) |
                 Oim() := return(f(pkgen(r), x)))).

(* One-wayness *)

equiv(ow_rsr(f))
      foreach iK <= nK do r <-R seed; (
	Opk() [2] := return(pkgen(r)) |
	foreach iF <= nF do x <-R D; 
		(Oy() := return(f(pkgen(r), x)) |
		 foreach i1 <= n1 do Oeq   (x' : D) := return(x' = x) |
		 Ox() := return(x)))
<=(nK * ((3 * #(Ox foreach iK) + 1) * POW(time + (nK-1) * time(pkgen) + (#Oy+#(Oeq foreach r)) * time(f))))=> [computational]
      foreach iK <= nK do r <-R seed [unchanged]; (
	Opk() := return(pkgen'(r)) |
	foreach iF <= nF do x <-R D [unchanged]; 
		(Oy() := return(f'(pkgen'(r), x)) |
		 foreach i1 <= n1 do Oeq(x':D) := 
	           if defined(k) then return(x' = x) else return(false) |
		 Ox() := let k:bool = true in return(x))).

}

def idx_OW_trapdoor_perm_RSR(seed, pkey, skey, D, pkgen, skgen, f, invf, POW) {

expand idx_OW_trapdoor_perm_RSR_all_args(seed, pkey, skey, D, pkgen, pkgen', skgen, f, f', invf, POW).

}

(* FDH signature scheme
   Result of Jean-Sebastien Coron, using the Random Self-Reducibility of RSA *)

param qS, Nk.

type pkey [bounded].
type skey [bounded].
type seed [large,fixed].
type D [large,fixed].

(* One-way trapdoor permutation *)

proba POW.

expand idx_OW_trapdoor_perm_RSR(seed, pkey, skey, D, pkgen, skgen, f, invf, POW).

proof {
show_equiv ow_rsr(f);
auto
}

(* Hash function, random oracle model *)

type hashkey [fixed].

expand ROM_hash_large(hashkey, bitstring, D, hash, hashoracle, qH).

(* Queries *)

event forge.
query event(forge) ==> false.

let processS(hk: hashkey, sk: skey) =
	foreach iS <= qS do
	OS(m:bitstring) :=
	return(invf(sk, hash(hk,m))).

let processT(hk: hashkey, pk: pkey) = 
	OT(m':bitstring, s:D) :=
	if f(pk, s) = hash(hk,m') then
	find u <= qS suchthat defined(m[u]) && (m' = m[u]) then yield else
	event forge.

process
	! Nk
	Ogen() :=
	hk <-R hashkey;
	r <-R seed; 
	pk <- pkgen(r);
	sk <- skgen(r);
	return(pk);
	(run hashoracle(hk) | run processS(hk, sk) | run processT(hk, pk))


(* EXPECTED
All queries proved.
0.116s (user 0.104s + system 0.012s), max rss 16928K
END *)
