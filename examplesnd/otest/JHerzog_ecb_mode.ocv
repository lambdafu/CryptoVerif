(**********************************************************************
*
* Prove the chosen-plaintext security of AES ECP mode.
*
*  * Cryptoverif version: 1.18
*  * Blocks: 2 
*  * Result: Failure (as expected: ECB is not CPA-secure)
*
*
***********************************************************************)




(* AES as a symmetric deterministic block cipher:

Must define:

* keyseed: set of key seeds, must be bounded, typically fixed and large.
* key: type of keys, must be bounded.
* blocksize: type of cleartexts and ciphertexts. Must be fixed and large.
* Penc(t, N): the probability of breaking the PRP in time t with N encryption queries.

Will get:

* kgen: keyseed -> key,
* enc: blockzise * key -> blocksize,
* dec: blocksize * key -> block

*)

type key [fixed].
type block [fixed, large].
proba Penc.

expand PRP_cipher(key, block, enc, dec, Penc).



(* Useful helper function. Dunno why. *)

fun test(bool, block, block):block.
equation forall x:block,y:block; test(true,x,y) = x.
equation forall x:block,y:block; test(false,x,y) = y.


(* Parameters *)

param N. (* the number of times the adversary gets to call the encryption oracle *)



(* what do we want? That the adversary does not know which plaintext 
   was encrypted *)

query secret b0.


let processT(k: key, b1: bool) = 
	OT(m11: block, m12: block, m21:block, m22:block) :=
	menc1 <- test(b1, m11, m21);
	menc2 <- test(b1, m12, m22);
	ciphertext1 <- enc(menc1, k);
	ciphertext2 <- enc(menc2, k);
	return(ciphertext1, ciphertext2).


process 
	Ostart() :=
	b0 <-R bool;
        k <-R key;
	return;
	foreach i <= N do run processT(k, b0)

(* EXPECTED
RESULT Could not prove secrecy of b0.
0.096s (user 0.092s + system 0.004s), max rss 16680K
END *)
