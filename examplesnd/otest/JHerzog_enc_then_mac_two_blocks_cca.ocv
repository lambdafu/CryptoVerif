(**********************************************************************
*
* Prove the chosen-ciphertext security of counter-mode-then-MAC.
*
*  * modified from a script by Jonathan Herzog
*  * Blocks: 2
*  * Result: success
*
*
***********************************************************************)



type block [fixed, large].
type aes_key [large, fixed].
proba Paes.
expand PRP_cipher(aes_key, block, aes_enc, aes_dec, Paes).


type cm_ciphertext [bounded].
fun cm_join(block, block, block): cm_ciphertext [data].

type mac_key [large, fixed].
type macs [fixed, large].
proba Pmac.
expand SUF_CMA_det_mac(mac_key, cm_ciphertext, macs, mac, mac_check, Pmac).


type maced_ciphertext [bounded].
fun mac_join(cm_ciphertext, macs): maced_ciphertext [data].

(* define xor to exist over blocks *)

expand Xor(block, xor, zero_block).


(* Useful helper function. Dunno why. *)
fun test(bool, block, block):block.
equation forall x:block,y:block; test(true,x,y) = x.
equation forall x:block,y:block; test(false,x,y) = y.

(* axiomitize incr *)
fun incr(block): block [data, uniform].
equation forall x:block; incr(x) <> x.

(* Parameters *)

param N. (* the number of times the adversary gets to call the encryption oracle *)
param C. (* the number of challenge ciphertexts available to the adversary *)

(* what do we want? That the adversary does not know which plaintext 
   was encrypted *)

query secret secret_bit.

letfun enc(mack: mac_key, aesk: aes_key, b1 : block, b2 : block) =

       nonce1 <-R block;
       counter1 <- incr(nonce1);
       pad1 <- aes_enc(counter1, aesk);
       cipherblock1 <- xor(b1, pad1);

       counter2 <- incr(counter1);
       pad2 <- aes_enc(counter2, aesk);
       cipherblock2 <- xor(b2, pad2);

       cm_ctext <- cm_join(nonce1, cipherblock1, cipherblock2);
       mac_tag <- mac(cm_ctext, mack);
       
       maced_ctext <- mac_join(cm_ctext, mac_tag);    

       maced_ctext.


let enc_oracle(mack: mac_key, aesk: aes_key) = 
    Oenc(b1 : block, b2 : block):=
    return(enc(mack, aesk, b1, b2)).



let challenge_oracle(mack: mac_key, aesk: aes_key, secret_bit1: bool) =
       
       Ochallenge(b11: block, b12:block, 
       		  b21: block, b22: block) :=

       b1 <- test(secret_bit1, b11, b21);
       b2 <- test(secret_bit1, b12, b22);
       challenge : maced_ciphertext <- enc(mack, aesk, b1, b2);
       return(challenge).




let dec_oracle(mack: mac_key, aesk: aes_key) = 
   Odec(maced_ctext: maced_ciphertext) :=
   find 
       u <= C suchthat defined(challenge[u]) && (maced_ctext = challenge[u])
   then
       yield
   else
	let mac_join(cm_ctext, mac_tag) = maced_ctext in      
	if 
      	   mac_check(cm_ctext, mack, mac_tag)
   	then 
       	   let cm_join(nonce1, cipherblock1, cipherblock2) = cm_ctext in

 	   counter1 <- incr(nonce1);
       	   pad1 <- aes_enc(counter1, aesk);
       	   plainblock1 <- xor(pad1, cipherblock1);

 	   counter2 <- incr(counter1);
       	   pad2 <- aes_enc(counter2, aesk);
       	   plainblock2 <- xor(pad2, cipherblock2);

       	   return(plainblock1, plainblock2).


process 
	Ostart() :=
	(* Choose the key *)
        aesk <-R aes_key;
	mack <-R mac_key;
        secret_bit <-R bool;

	(* Make encryption oracles available now IN PARALLEL 
 	   with the rest of the game. *)
	return;

        (foreach i <= N do run enc_oracle(mack, aesk)) |
	(foreach i <= N do run dec_oracle(mack, aesk)) |
	(foreach i <= C do run challenge_oracle(mack, aesk, secret_bit))

(* EXPECTED
All queries proved.
0.100s (user 0.096s + system 0.004s), max rss 18972K
END *)
