(**********************************************************************
*
* Prove the chosen-plaintext security of CCM mode. Counter-mode and MAC 
* nonces are derived from master nonce via separate functions, and these
* functions have some axioms.
*
*  * modified from a script by Jonathan Herzog
*  * Blocks: 1
*  * Result: success
*
*
***********************************************************************)

proof {
show_game occ;
crypto prp_partial(aes_enc) special("no collisions") [ terms: 104 -> O_1, 109 -> O_1, 121 -> O_1, 130 -> O_1 ];
auto
}

type block [fixed, large].
type aes_key [large, bounded].
proba Paes.
expand PRP_cipher(aes_key, block, aes_enc, aes_dec, Paes).

type cm_ciphertext [bounded].
fun cm_join(block, block): cm_ciphertext [data].

type maced_ciphertext [bounded].
fun mac_join(cm_ciphertext, block, block): maced_ciphertext [data].

(* define xor to exist over blocks *)
expand Xor(block, xor, zeroblock).

(* Useful helper function. Dunno why. *)
fun test(bool, block, block):block.
equation forall x:block,y:block; test(true,x,y) = x.
equation forall x:block,y:block; test(false,x,y) = y.

(* axiomitize incr *)
fun incr(block): block [data].
equation forall x:block; incr(x) <> x.

(****** derive counter-mode and mac-tag nonces from master nonce *******)

type nonces [fixed, large].

fun make_counter_mode_nonce(nonces) : block [data].
fun make_mac_nonce(nonces) : block [data].
equation forall x:nonces; make_counter_mode_nonce(x) <> make_mac_nonce(x).
equation forall x:nonces; incr(make_counter_mode_nonce(x)) <> make_mac_nonce(x).

(* Parameters *)

param N_enc. (* the number of times the adversary gets to call the encryption oracle *)
param N_dec. (* the number of times the adversary gets to call the decryption oracle *)
param C. (* the number of challenge ciphertexts available to the adversary *)

(* what do we want? That the adversary does not know which plaintext 
   was encrypted *)

query secret secret_bit.

letfun enc(aesk: aes_key, b1: block) =
       nonce <-R nonces;
       
       tag_nonce <- make_mac_nonce(nonce);
       b0 <- tag_nonce;

       t1 <- aes_enc(b0, aesk);
       t2 <- aes_enc( xor(t1, b1), aesk);

       counter_nonce <- make_counter_mode_nonce(nonce);
       s0 <- aes_enc(counter_nonce, aesk);

       counter1 <- incr(counter_nonce);
       pad1 <- aes_enc(counter1, aesk);
       cipherblock1 <- xor(b1, pad1);

       this_cm_ciphertext <- cm_join(counter_nonce, cipherblock1);

       tag <- xor(t2, s0);

       ciphertext <- mac_join(this_cm_ciphertext, tag_nonce, tag);
       ciphertext.

let enc_oracle(aesk: aes_key) = 
    Oenc(b1 : block):=
    return(enc(aesk, b1)).

let challenge_oracle(aesk: aes_key, secret_bit0: bool) =
    Ochallenge(b11: block, b21: block ) :=
    b1 <- test(secret_bit0, b11, b21);
    return(enc(aesk, b1)).

process 
	Ostart() :=
	(* Choose the key *)
        aesk <-R aes_key;
        secret_bit <-R bool;
	return;
	(foreach i <= N_enc do run enc_oracle(aesk)) | 
        (foreach i <= C do run challenge_oracle(aesk, secret_bit))

(* EXPECTED
All queries proved.
0.160s (user 0.152s + system 0.008s), max rss 42736K
END *)
