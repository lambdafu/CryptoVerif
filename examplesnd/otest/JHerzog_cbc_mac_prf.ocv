(**********************************************************************
*
* Security of the CBC mac
*
*  * Blocks: 2
*  * Result: unknown
*
*
***********************************************************************)

proof {
      insert after "Otag" "find u <= N_tag suchthat defined(b1[u],b2[u],tag2[u],else_br[u]) && b1 = b1[u] && b2 = b2[u] then else else_br <- true";
      show_game occ;
      replace 30 "tag2[u]";
      SArename tag2;
      show_game occ;
      crypto prp_partial(aes_enc) [ terms: 30 -> O_1, 35 -> O_2 ];
      insert before "re_3 <-" "re' <-R block"; 
      merge_branches;
      simplify;
      remove_assign useless;
      success
}

type block [fixed, large].
type aes_key [large, bounded].
proba Paes.
expand PRP_cipher(aes_key, block, aes_enc, aes_dec, Paes).


(* define xor to exist over blocks *)
expand Xor(block, xor, zero_block).



(* Parameters *)

param N_tag. (* the number of times the adversary gets to call the encryption oracle *)


let tag_oracle(aesk: aes_key) = 
    Otag(b1 : block, b2 : block):=
       
       tag1 <- aes_enc(b1, aesk);
       tag2 <- aes_enc( xor(tag1, b2), aesk);
       return (tag2).

equivalence
	Ostart() :=
	(* Choose the key *)
        aesk <-R aes_key;
	return;
        (foreach i <= N_tag do run tag_oracle(aesk)) 

	
	Ostart() :=
	return;
 	(foreach i <= N_tag do
	Otag(b1 : block, b2 : block):=
	(* ideal PRF *)
	find j <= N_tag suchthat defined(b1[j],b2[j],res[j]) && b1 = b1[j] && b2 = b2[j]
	then return(res[j])
	else res <-R block; return(res))

(* EXPECTED
All queries proved.
0.148s (user 0.140s + system 0.008s), max rss 17748K
END *)
