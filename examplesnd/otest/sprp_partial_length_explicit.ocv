(* This file shows that AES128-CFB128 is IND-CPA, when the IV is
computed as IV = E(k, 0; IVdata) provided the IVdata arguments are
pairwise distinct. 
It shows that the encryption of the messages is indistinguishable
from the encryption of zero-messages of the same length,
for 3 messages of 1, 2, 3 blocks respectively.
*)

(* Now automatically generated by the crypto command

def PRF_1_7oracles(key, input1, output, f, Pprf) {

param N, Ncut, N1, N2, N3, N4, N5, N6, N7.

fun f(key, input1):output.

equiv(prf(f))
      k <-R key;
        (foreach i <= N do O(x1: input1) := return(f(k, x1)))
       <=(Pprf(time, N, maxlength(x1)))=>
         foreach i <= N do O(x1: input1) := 
	   find[unique] u <= N suchthat defined(x1[u], r[u]) && x1 = x1[u] then return(r[u]) else
           r <-R output; return(r).

event ev_coll.

equiv(prf_partial(f))
      k <-R key;
        (foreach i <= N do O(x_1: input1) := return(f(k, x_1)) |
         foreach i <= Ncut do Ocut(xcut_1: input1) := return(f(k, xcut_1)) |
         foreach i <= N1 do O1(x1_1: input1) := return(f(k, x1_1)) |
         foreach i <= N2 do O2(x2_1: input1) := return(f(k, x2_1)) |
         foreach i <= N3 do O3(x3_1: input1) := return(f(k, x3_1)) |
         foreach i <= N4 do O4(x4_1: input1) := return(f(k, x4_1)) |
         foreach i <= N5 do O5(x5_1: input1) := return(f(k, x5_1)) |
         foreach i <= N6 do O6(x6_1: input1) := return(f(k, x6_1)) |
         foreach i <= N7 do O7(x7_1: input1) := return(f(k, x7_1)))
       <=(Pprf(time, N + Ncut  + N1 + N2 + N3 + N4 + N5 + N6 + N7, max(maxlength(x_1), maxlength(xcut_1), maxlength(x1_1), maxlength(x2_1), maxlength(x3_1), maxlength(x4_1), maxlength(x5_1), maxlength(x6_1), maxlength(x7_1))))=> [manual]
      k <-R key;
        (foreach i <= N do O(x_1: input1) := 
          find[unique] u <= N1 suchthat defined(x1_1[u], r1[u]) && x_1 = x1_1[u] then return(r1[u])
          orfind u <= N2 suchthat defined(x2_1[u], r2[u]) && x_1 = x2_1[u] then return(r2[u])
          orfind u <= N3 suchthat defined(x3_1[u], r3[u]) && x_1 = x3_1[u] then return(r3[u])
          orfind u <= N4 suchthat defined(x4_1[u], r4[u]) && x_1 = x4_1[u] then return(r4[u])
          orfind u <= N5 suchthat defined(x5_1[u], r5[u]) && x_1 = x5_1[u] then return(r5[u])
          orfind u <= N6 suchthat defined(x6_1[u], r6[u]) && x_1 = x6_1[u] then return(r6[u])
          orfind u <= N7 suchthat defined(x7_1[u], r7[u]) && x_1 = x7_1[u] then return(r7[u])
          else return(f(k, x_1)) |
         foreach i <= Ncut do Ocut(xcut_1: input1) := 
          find[unique] u <= N1 suchthat defined(x1_1[u], r1[u]) && xcut_1 = x1_1[u] then event_abort ev_coll
          orfind u <= N2 suchthat defined(x2_1[u], r2[u]) && xcut_1 = x2_1[u] then event_abort ev_coll
          orfind u <= N3 suchthat defined(x3_1[u], r3[u]) && xcut_1 = x3_1[u] then event_abort ev_coll
          orfind u <= N4 suchthat defined(x4_1[u], r4[u]) && xcut_1 = x4_1[u] then event_abort ev_coll
          orfind u <= N5 suchthat defined(x5_1[u], r5[u]) && xcut_1 = x5_1[u] then event_abort ev_coll
          orfind u <= N6 suchthat defined(x6_1[u], r6[u]) && xcut_1 = x6_1[u] then event_abort ev_coll
          orfind u <= N7 suchthat defined(x7_1[u], r7[u]) && xcut_1 = x7_1[u] then event_abort ev_coll
          else return(f(k, xcut_1)) |
         foreach i <= N1 do O1(x1_1: input1) := 
          find[unique] u <= N1 suchthat defined(x1_1[u], r1[u]) && x1_1 = x1_1[u] then return(r1[u])
          orfind u <= N2 suchthat defined(x2_1[u], r2[u]) && x1_1 = x2_1[u] then event_abort ev_coll
          orfind u <= N3 suchthat defined(x3_1[u], r3[u]) && x1_1 = x3_1[u] then event_abort ev_coll
          orfind u <= N4 suchthat defined(x4_1[u], r4[u]) && x1_1 = x4_1[u] then event_abort ev_coll
          orfind u <= N5 suchthat defined(x5_1[u], r5[u]) && x1_1 = x5_1[u] then event_abort ev_coll
          orfind u <= N6 suchthat defined(x6_1[u], r6[u]) && x1_1 = x6_1[u] then event_abort ev_coll
          orfind u <= N7 suchthat defined(x7_1[u], r7[u]) && x1_1 = x7_1[u] then event_abort ev_coll
          else find u <= Ncut suchthat defined(xcut_1[u]) && x1_1 = xcut_1[u] then event_abort ev_coll
          else find u <= N suchthat defined(x_1[u]) && x1_1 = x_1[u] then return(f(k, x_1[u]))
          else r1 <-R output; return(r1) |
         foreach i <= N2 do O2(x2_1: input1) := 
          find[unique] u <= N1 suchthat defined(x1_1[u], r1[u]) && x2_1 = x1_1[u] then event_abort ev_coll
          orfind u <= N2 suchthat defined(x2_1[u], r2[u]) && x2_1 = x2_1[u] then return(r2[u])
          orfind u <= N3 suchthat defined(x3_1[u], r3[u]) && x2_1 = x3_1[u] then event_abort ev_coll
          orfind u <= N4 suchthat defined(x4_1[u], r4[u]) && x2_1 = x4_1[u] then event_abort ev_coll
          orfind u <= N5 suchthat defined(x5_1[u], r5[u]) && x2_1 = x5_1[u] then event_abort ev_coll
          orfind u <= N6 suchthat defined(x6_1[u], r6[u]) && x2_1 = x6_1[u] then event_abort ev_coll
          orfind u <= N7 suchthat defined(x7_1[u], r7[u]) && x2_1 = x7_1[u] then event_abort ev_coll
          else find u <= Ncut suchthat defined(xcut_1[u]) && x2_1 = xcut_1[u] then event_abort ev_coll
          else find u <= N suchthat defined(x_1[u]) && x2_1 = x_1[u] then return(f(k, x_1[u]))
          else r2 <-R output; return(r2) |
         foreach i <= N3 do O3(x3_1: input1) := 
          find[unique] u <= N1 suchthat defined(x1_1[u], r1[u]) && x3_1 = x1_1[u] then event_abort ev_coll
          orfind u <= N2 suchthat defined(x2_1[u], r2[u]) && x3_1 = x2_1[u] then event_abort ev_coll
          orfind u <= N3 suchthat defined(x3_1[u], r3[u]) && x3_1 = x3_1[u] then return(r3[u])
          orfind u <= N4 suchthat defined(x4_1[u], r4[u]) && x3_1 = x4_1[u] then event_abort ev_coll
          orfind u <= N5 suchthat defined(x5_1[u], r5[u]) && x3_1 = x5_1[u] then event_abort ev_coll
          orfind u <= N6 suchthat defined(x6_1[u], r6[u]) && x3_1 = x6_1[u] then event_abort ev_coll
          orfind u <= N7 suchthat defined(x7_1[u], r7[u]) && x3_1 = x7_1[u] then event_abort ev_coll
          else find u <= Ncut suchthat defined(xcut_1[u]) && x3_1 = xcut_1[u] then event_abort ev_coll
          else find u <= N suchthat defined(x_1[u]) && x3_1 = x_1[u] then return(f(k, x_1[u]))
          else r3 <-R output; return(r3) |
         foreach i <= N4 do O4(x4_1: input1) := 
          find[unique] u <= N1 suchthat defined(x1_1[u], r1[u]) && x4_1 = x1_1[u] then event_abort ev_coll
          orfind u <= N2 suchthat defined(x2_1[u], r2[u]) && x4_1 = x2_1[u] then event_abort ev_coll
          orfind u <= N3 suchthat defined(x3_1[u], r3[u]) && x4_1 = x3_1[u] then event_abort ev_coll
          orfind u <= N4 suchthat defined(x4_1[u], r4[u]) && x4_1 = x4_1[u] then return(r4[u])
          orfind u <= N5 suchthat defined(x5_1[u], r5[u]) && x4_1 = x5_1[u] then event_abort ev_coll
          orfind u <= N6 suchthat defined(x6_1[u], r6[u]) && x4_1 = x6_1[u] then event_abort ev_coll
          orfind u <= N7 suchthat defined(x7_1[u], r7[u]) && x4_1 = x7_1[u] then event_abort ev_coll
          else find u <= Ncut suchthat defined(xcut_1[u]) && x4_1 = xcut_1[u] then event_abort ev_coll
          else find u <= N suchthat defined(x_1[u]) && x4_1 = x_1[u] then return(f(k, x_1[u]))
          else r4 <-R output; return(r4) |
         foreach i <= N5 do O5(x5_1: input1) := 
          find[unique] u <= N1 suchthat defined(x1_1[u], r1[u]) && x5_1 = x1_1[u] then event_abort ev_coll
          orfind u <= N2 suchthat defined(x2_1[u], r2[u]) && x5_1 = x2_1[u] then event_abort ev_coll
          orfind u <= N3 suchthat defined(x3_1[u], r3[u]) && x5_1 = x3_1[u] then event_abort ev_coll
          orfind u <= N4 suchthat defined(x4_1[u], r4[u]) && x5_1 = x4_1[u] then event_abort ev_coll
          orfind u <= N5 suchthat defined(x5_1[u], r5[u]) && x5_1 = x5_1[u] then return(r5[u])
          orfind u <= N6 suchthat defined(x6_1[u], r6[u]) && x5_1 = x6_1[u] then event_abort ev_coll
          orfind u <= N7 suchthat defined(x7_1[u], r7[u]) && x5_1 = x7_1[u] then event_abort ev_coll
          else find u <= Ncut suchthat defined(xcut_1[u]) && x5_1 = xcut_1[u] then event_abort ev_coll
          else find u <= N suchthat defined(x_1[u]) && x5_1 = x_1[u] then return(f(k, x_1[u]))
          else r5 <-R output; return(r5) |
         foreach i <= N6 do O6(x6_1: input1) := 
          find[unique] u <= N1 suchthat defined(x1_1[u], r1[u]) && x6_1 = x1_1[u] then event_abort ev_coll
          orfind u <= N2 suchthat defined(x2_1[u], r2[u]) && x6_1 = x2_1[u] then event_abort ev_coll
          orfind u <= N3 suchthat defined(x3_1[u], r3[u]) && x6_1 = x3_1[u] then event_abort ev_coll
          orfind u <= N4 suchthat defined(x4_1[u], r4[u]) && x6_1 = x4_1[u] then event_abort ev_coll
          orfind u <= N5 suchthat defined(x5_1[u], r5[u]) && x6_1 = x5_1[u] then event_abort ev_coll
          orfind u <= N6 suchthat defined(x6_1[u], r6[u]) && x6_1 = x6_1[u] then return(r6[u])
          orfind u <= N7 suchthat defined(x7_1[u], r7[u]) && x6_1 = x7_1[u] then event_abort ev_coll
          else find u <= Ncut suchthat defined(xcut_1[u]) && x6_1 = xcut_1[u] then event_abort ev_coll
          else find u <= N suchthat defined(x_1[u]) && x6_1 = x_1[u] then return(f(k, x_1[u]))
          else r6 <-R output; return(r6) |
         foreach i <= N7 do O7(x7_1: input1) := 
          find[unique] u <= N1 suchthat defined(x1_1[u], r1[u]) && x7_1 = x1_1[u] then event_abort ev_coll
          orfind u <= N2 suchthat defined(x2_1[u], r2[u]) && x7_1 = x2_1[u] then event_abort ev_coll
          orfind u <= N3 suchthat defined(x3_1[u], r3[u]) && x7_1 = x3_1[u] then event_abort ev_coll
          orfind u <= N4 suchthat defined(x4_1[u], r4[u]) && x7_1 = x4_1[u] then event_abort ev_coll
          orfind u <= N5 suchthat defined(x5_1[u], r5[u]) && x7_1 = x5_1[u] then event_abort ev_coll
          orfind u <= N6 suchthat defined(x6_1[u], r6[u]) && x7_1 = x6_1[u] then event_abort ev_coll
          orfind u <= N7 suchthat defined(x7_1[u], r7[u]) && x7_1 = x7_1[u] then return(r7[u])
          else find u <= Ncut suchthat defined(xcut_1[u]) && x7_1 = xcut_1[u] then event_abort ev_coll
          else find u <= N suchthat defined(x_1[u]) && x7_1 = x_1[u] then return(f(k, x_1[u]))
          else r7 <-R output; return(r7)).

}
*)

proof {
      out_game g1occ occ;
      crypto sprp_partial(AES) special("no collisions") [terms: 4 -> O_enc_1, 28 -> O_enc_2, 57 -> O_enc_3, 63 -> O_enc_4, 94 -> O_enc_5, 100 -> O_enc_6, 106 -> O_enc_7];
      auto;
      start_from_other_end;
      out_game g2occ occ;
      crypto sprp_partial(AES) special("no collisions") [terms: 4 -> O_enc_1, 27 -> O_enc_2, 54 -> O_enc_3, 58 -> O_enc_4, 87 -> O_enc_5, 91 -> O_enc_6, 95 -> O_enc_7];
      auto;
      simplify;
      success
      }

(* Do not assume by default that all constants are 
   different. We shall say it explicitly when they are different *)

set diffConstants = false.

type enc_key [fixed]. (* 128 bits AES key *)
type blocksize [fixed, large]. (* 128 bits AES block *)

(* AES is a super pseuso-random permutation. *)
proba P_AES(time, number, number, length, length).
expand SPRP_cipher(enc_key, blocksize, AES, AES_dec, P_AES).

(* Properties of XOR *)
expand Xor(blocksize, xor, Zero).

type len. (* len is the type of the length of the last block *)
fun truncate(blocksize, len): bitstring.

event repeatedIV.

let enc1(k: enc_key, IV0: blocksize) =
    Oenc1(IVdata1: blocksize, m1: blocksize, l:len) :=
    if defined(IVdata2) && IVdata1 = IVdata2 then event_abort repeatedIV else 
    if defined(IVdata3) && IVdata1 = IVdata3 then event_abort repeatedIV else 
    let IV1 = xor(IV0, IVdata1) in
    let c1 = xor(AES(IV1, k), m1) in
    return(truncate(c1, l)).

let enc2(k: enc_key, IV0: blocksize) = 
    Oenc2(IVdata2: blocksize, m21: blocksize, m22: blocksize, l:len) :=
    if defined(IVdata1) && IVdata2 = IVdata1 then event_abort repeatedIV else 
    if defined(IVdata3) && IVdata2 = IVdata3 then event_abort repeatedIV else 
    let IV2 = xor(IV0, IVdata2) in
    let c21 = xor(AES(IV2, k), m21) in
    let c22 = xor(AES(c21, k), m22) in
    return(c21, truncate(c22, l)).

let enc3(k: enc_key, IV0: blocksize) = 
    Oenc3(IVdata3: blocksize, m31: blocksize, m32: blocksize, m33: blocksize, l:len) :=
    if defined(IVdata1) && IVdata3 = IVdata1 then event_abort repeatedIV else 
    if defined(IVdata2) && IVdata3 = IVdata2 then event_abort repeatedIV else 
    let IV3 = xor(IV0, IVdata3) in
    let c31 = xor(AES(IV3, k), m31) in
    let c32 = xor(AES(c31, k), m32) in
    let c33 = xor(AES(c32, k), m33) in
    return(c31, c32, truncate(c33, l)).

let enc1Z(k: enc_key, IV0: blocksize) =
    Oenc1(IVdata1: blocksize, m1: blocksize, l:len) :=
    if defined(IVdata2) && IVdata1 = IVdata2 then event_abort repeatedIV else 
    if defined(IVdata3) && IVdata1 = IVdata3 then event_abort repeatedIV else 
    let IV1 = xor(IV0, IVdata1) in
    let c1 = xor(AES(IV1, k), Zero) in
    return(truncate(c1, l)).

let enc2Z(k: enc_key, IV0: blocksize) = 
    Oenc2(IVdata2: blocksize, m21: blocksize, m22: blocksize, l:len) :=
    if defined(IVdata1) && IVdata2 = IVdata1 then event_abort repeatedIV else 
    if defined(IVdata3) && IVdata2 = IVdata3 then event_abort repeatedIV else 
    let IV2 = xor(IV0, IVdata2) in
    let c21 = xor(AES(IV2, k), Zero) in
    let c22 = xor(AES(c21, k), Zero) in
    return(c21, truncate(c22, l)).

let enc3Z(k: enc_key, IV0: blocksize) = 
    Oenc3(IVdata3: blocksize, m31: blocksize, m32: blocksize, m33: blocksize, l:len) :=
    if defined(IVdata1) && IVdata3 = IVdata1 then event_abort repeatedIV else 
    if defined(IVdata2) && IVdata3 = IVdata2 then event_abort repeatedIV else 
    let IV3 = xor(IV0, IVdata3) in
    let c31 = xor(AES(IV3, k), Zero) in
    let c32 = xor(AES(c31, k), Zero) in
    let c33 = xor(AES(c32, k), Zero) in
    return(c31, c32, truncate(c33, l)).


equivalence
	Ogen() :=
	k <-R enc_key;
	let IV0 = AES(Zero, k) in
	return();
	(run enc1(k, IV0) | run enc2(k, IV0) | run enc3(k, IV0))

	Ogen() :=
	k <-R enc_key;
	let IV0 = AES(Zero, k) in
	return();
	(run enc1Z(k, IV0) | run enc2Z(k, IV0) | run enc3Z(k, IV0))


(* EXPECTED
All queries proved.
0.164s (user 0.164s + system 0.000s), max rss 20980K
END *)
