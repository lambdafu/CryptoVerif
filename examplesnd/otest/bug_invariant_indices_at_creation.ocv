(* There was a bug with this file: 
   the property that 
   "if a variable access refers to a replication index,
   all the rest of the indices must be the indices at creation"
   is not true.

   if the indices at creation of b are i1,i2, and we know that i2 = x[i], 
   then b[i1,i2] may also be written b[i1,x[i]] and that breaks the property.
   For this reason, we no longer check this property *)

(*** Modified GDH macro ***)

def mod_square_GDH(G, Z, g, exp, exp', mult, pGDH, pSQGDH) {

(* the GDH assumption 
    This equivalence says that, when exp(g,a[i]) and exp(g,b[j]) are known to the
    adversary, the adversary can compute exp(g, mult(a[i], b[j])) only with
    negligible probability, even in the presence of a DDH oracle
    DDH(G,A,B,C) tells whether A = G^a, B = G^b, and C = G^{ab} for some a,b,
    that is DDH(G,A,B,C) is (log_G(A) * log_G(B) = log_G(C)). *)

param na, naDDH, naDDH1, naDDH2, naDDH3, naDDH4, naDDH5, naDDH9.

equiv(gdh(exp))
    foreach ia <= na do a <-R Z; (
      OA() := return(exp(g,a)) | 
      Oa() [10] := return(a) |
      foreach iaDDH3 <= naDDH3 do ODDHa3(m:G, m':G,j<=na) := return(exp(m,a[j]) = exp(m', a)) |
      foreach iaDDH5 <= naDDH5 do ODDHa5(m:G, j'<=na,j<=na) [useful_change] := return(exp(m,a[j]) = exp(g, mult(a[j'], a))) |
      foreach iaDDH1 <= naDDH1 do ODDHa1(m:G, m':G) := return(m = exp(m', a)) |
      foreach iaDDH  <= naDDH  do ODDHa(m:G, j<=na) [useful_change] := return(m = exp(g, mult(a[j], a))) |
      foreach iaDDH9 <= naDDH9 do ODDHa9(m:G, x:Z) := return(m = exp(g, mult(a, x)))
    ) 
<=(na * (naDDH + naDDH5) * pSQGDH(time + (na + #ODDHa - 2) * time(exp),
	   #ODDHa1 + #ODDHa3 + #ODDHa5) +
   na * (na-1) * (naDDH + naDDH5) * pGDH(time + (na + #ODDHa - 3) * time(exp),
	   #ODDHa1 + #ODDHa3 + #ODDHa5))=> [computational]
    foreach ia <= na do a <-R Z [unchanged]; (
      OA() := return(exp'(g,a)) |
      Oa() := let ka:bool = true in return(a) |
      foreach iaDDH3 <= naDDH3 do ODDHa3(m:G, m':G,j<=na) := return(exp'(m,a[j]) = exp'(m', a)) |
      	   (* GDH allows to compute exp(m, a[j]) = exp(m',a) for any m and m', 
	      without leaking a, as it is DDH(exp(g,a), exp(g,a[j]), m, m')
	      Indeed, 
    	      D(exp(g,a),exp(g,a[j]),m,m') 
      	        = (log_{g^a}(g^a[j]) * log_{g^a}(m) = log_{g^a}(m'))
      		= (a[j]/a * log_g(m)/a = log_g(m')/a)
      		= (a[j] * log_g(m) = a log_g(m'))
      		= (m^a[j] = m'^a). *)
      foreach iaDDH5 <= naDDH5 do ODDHa5(m:G, j'<=na,j<=na) :=
      	      find u<=na suchthat defined(ka[u],a[u]) && a[j'] = a[u] then return(exp'(m,a[j]) = exp'(g, mult(a[j'], a))) else
	      if defined(ka) then return(exp'(m,a[j]) = exp'(g, mult(a[j'], a))) else
	      return ((a[j] = a || a[j] = a[j']) && exp'(m,a[j]) = exp'(g, mult(a[j'], a))) |
	    (* GDH always allows to compute exp(m, a[j]) = exp(g,mult(a[j'],a))
	       as a particular case of ODDHa2.
	       When a or a[j'] is leaked, that is all we use and we keep the value
	       that occurs in the left-hand side exp'(m, a[j]) = exp'(g,mult(a[j'],a)).
	       Otherwise, we distinguish two cases:
	       - When a[j] = a[j'] or a[j] = a[j'], we keep the value
	       that occurs in the left-hand side exp'(m, a[j]) = exp'(g,mult(a[j'],a)).
	       - Otherwise, we apply the CDH assumption considering an adversary
	         that knows a[j] and computes exp(m, a[j]). This adversary cannot
	         compute exp(g,mult(a[j'],a)) by CDH, so the equality 
	         exp(m, a[j]) = exp(g,mult(a[j'],a)) is false in this case.
	       Hence, the equality exp(m, a[j]) = exp(g,mult(a[j'],a))
	       reduces to (a[j] = a || a[j] = a[j']) && exp'(m, a[j]) = exp'(g,mult(a[j'],a)). *)
      foreach iaDDH1 <= naDDH1 do ODDHa1(m:G, m':G) := 
	      return(m = exp'(m', a))
		(* GDH allows to compute m = exp(m',a) for any m and m', without leaking a,
		   as it is DDH(g, exp(g,a), m', m) *) |
      foreach iaDDH <= naDDH do ODDHa(m:G, j<=na) := 
      	      find u<=na suchthat defined(ka[u],a[u]) && a[j] = a[u] then return(m = exp'(g, mult(a[j], a))) else 
              if defined(ka) then return(m = exp'(g, mult(a[j], a))) else return(false) |
            (* ODDHa is a particular case of ODDHa1 in which can apply the CDH assumption,
	       provided a and a[j] are not leaked. *)
      foreach iaDDH9 <= naDDH9 do ODDHa9(m:G,x:Z) := return(m = exp'(g, mult(a, x)))
    ).
    (* We need to consider both forms m = exp(m', a) and m = exp(g,
    mult(a[j], a)) in the equivalence, because, when m' is known to be
    exp(g, a[j]), CryptoVerif is going to simplify m = exp(m', a) into
    m = exp(g, mult(a[j], a)), and the procedure that tests whether a
    term in the game matches a term in the equivalence would not
    recognize that m = exp(g, mult(a[j], a)) in the game matches m =
    exp(m', a) in the equivalence. *)

equiv(gdh_manual(exp))
    foreach ia <= na do a <-R Z; (
      OA() := return(exp(g,a)) | 
      Oa() [10] := return(a) |
      foreach iaDDH3 <= naDDH3 do ODDHa3(m:G, m':G,j<=na) := return(exp(m,a[j]) = exp(m', a)) |
      foreach iaDDH5 <= naDDH5 do ODDHa5(m:G, j'<=na,j<=na) := return(exp(m,a[j]) = exp(g, mult(a[j'], a))) |
      foreach iaDDH1 <= naDDH1 do ODDHa1(m:G, m':G) := return(m = exp(m', a)) |
      foreach iaDDH  <= naDDH  do ODDHa(m:G, j<=na) := return(m = exp(g, mult(a[j], a))) |
      foreach iaDDH9 <= naDDH9 do ODDHa9(m:G, x:Z) := return(m = exp(g, mult(a, x)))
    ) 
<=(na * (naDDH + naDDH5) * pSQGDH(time + (na + #ODDHa - 2) * time(exp),
	   #ODDHa1 + #ODDHa3 + #ODDHa5) +
   na * (na-1) * (naDDH + naDDH5) * pGDH(time + (na + #ODDHa - 3) * time(exp),
	   #ODDHa1 + #ODDHa3 + #ODDHa5))=> [computational]
    foreach ia <= na do a <-R Z [unchanged]; (
      OA() := return(exp'(g,a)) |
      Oa() := let ka:bool = true in return(a) |
      foreach iaDDH3 <= naDDH3 do ODDHa3(m:G, m':G,j<=na) := return(exp'(m,a[j]) = exp'(m', a)) |
      	   (* GDH allows to compute exp(m, a[j]) = exp(m',a) for any m and m', 
	      without leaking a, as it is DDH(exp(g,a), exp(g,a[j]), m, m')
	      Indeed, 
    	      D(exp(g,a),exp(g,a[j]),m,m') 
      	        = (log_{g^a}(g^a[j]) * log_{g^a}(m) = log_{g^a}(m'))
      		= (a[j]/a * log_g(m)/a = log_g(m')/a)
      		= (a[j] * log_g(m) = a log_g(m'))
      		= (m^a[j] = m'^a). *)
      foreach iaDDH5 <= naDDH5 do ODDHa5(m:G, j'<=na,j<=na) :=
      	      find u<=na suchthat defined(ka[u],a[u]) && a[j'] = a[u] then return(exp'(m,a[j]) = exp'(g, mult(a[j'], a))) else
	      if defined(ka) then return(exp'(m,a[j]) = exp'(g, mult(a[j'], a))) else
	      return ((a[j] = a || a[j] = a[j']) && exp'(m,a[j]) = exp'(g, mult(a[j'], a))) |
	    (* GDH always allows to compute exp(m, a[j]) = exp(g,mult(a[j'],a))
	       as a particular case of ODDHa2.
	       When a or a[j'] is leaked, that is all we use and we keep the value
	       that occurs in the left-hand side exp'(m, a[j]) = exp'(g,mult(a[j'],a)).
	       Otherwise, we distinguish two cases:
	       - When a[j] = a[j'] or a[j] = a[j'], we keep the value
	       that occurs in the left-hand side exp'(m, a[j]) = exp'(g,mult(a[j'],a)).
	       - Otherwise, we apply the CDH assumption considering an adversary
	         that knows a[j] and computes exp(m, a[j]). This adversary cannot
	         compute exp(g,mult(a[j'],a)) by CDH, so the equality 
	         exp(m, a[j]) = exp(g,mult(a[j'],a)) is false in this case.
	       Hence, the equality exp(m, a[j]) = exp(g,mult(a[j'],a))
	       reduces to (a[j] = a || a[j] = a[j']) && exp'(m, a[j]) = exp'(g,mult(a[j'],a)). *)
      foreach iaDDH1 <= naDDH1 do ODDHa1(m:G, m':G) := 
	      return(m = exp'(m', a))
		(* GDH allows to compute m = exp(m',a) for any m and m', without leaking a,
		   as it is DDH(g, exp(g,a), m', m) *) |
      foreach iaDDH <= naDDH do ODDHa(m:G, j<=na) := 
      	      find u<=na suchthat defined(ka[u],a[u]) && a[j] = a[u] then return(m = exp'(g, mult(a[j], a))) else 
              if defined(ka) then return(m = exp'(g, mult(a[j], a))) else return(false) |
            (* ODDHa is a particular case of ODDHa1 in which can apply the CDH assumption,
	       provided a and a[j] are not leaked. *)
      foreach iaDDH9 <= naDDH9 do ODDHa9(m:G,x:Z) := return(m = exp'(g, mult(a, x)))
    ).
    (* We need to consider both forms m = exp(m', a) and m = exp(g,
    mult(a[j], a)) in the equivalence, because, when m' is known to be
    exp(g, a[j]), CryptoVerif is going to simplify m = exp(m', a) into
    m = exp(g, mult(a[j], a)), and the procedure that tests whether a
    term in the game matches a term in the equivalence would not
    recognize that m = exp(g, mult(a[j], a)) in the game matches m =
    exp(m', a) in the equivalence. *)

equiv(gdh_smth_manual(exp))
    foreach ia <= na do a <-R Z; (
      OA() := return(exp(g,a)) | 
      Oa() [10] := return(a) |
      foreach iaDDH1 <= naDDH1 do ODDHa1(m:G, m':G) [useful_change] := return(m = exp(m', a))
    ) 
<=(0)=> [manual,computational]
    foreach ia <= na do a <-R Z [unchanged]; (
      OA() := return(exp'(g,a)) |
      Oa() := let ka:bool = true in return(a) |
      foreach iaDDH1 <= naDDH1 do ODDHa1(m:G, m':G) := 
	      return(m = exp'(m', a))
		(* GDH allows to compute m = exp(m',a) for any m and m', without leaking a,
		   as it is DDH(g, exp(g,a), m', m) *)
    ).
}



proof {
  insert after "OH(x1"
    "let concatExtract(protocol: bitstring, suite: bitstring, label: bitstring, concatDH(p2b(Serialize(dh1: G_t)), p2b(Serialize(dh2: G_t)))) = x2 in";
  simplify;
  insert after "Oencap(pk_R" "find i1 <= N suchthat defined(sk[i1]) && pk_R = exp(g, sk[i1]) then";
  SArename z;
  SArename enc_1;
  SArename zz_2;
  simplify;
  out_game "left0.out.cv";

  insert before "let p2b(Serialize(pkE_3" "find i1 <= N suchthat defined(sk[i1]) && (pk_S = exp(g, sk[i1])) then";
  SArename pkE_3;
  SArename dh_3;
  SArename zz_3;
  simplify;
  out_game "left0.out.cv";

  crypto rom(Extract);
  simplify;
  SArename zz_12;
  SArename zz_13;
  out_game "left1.out.cv";
  crypto gdh(exp);
  simplify;
  crypto gdh_smth_manual(exp);
  crypto gdh_smth_manual(exp);
  simplify;
  out_game "left2.out.cv";
  crypto prf(Expand) **;
  simplify;
  out_game "l.out.cv";

  start_from_other_end;
  insert after "Oencap(pk_R_1" "find i1 <= N suchthat defined(sk_1[i1]) && pk_R_1 = exp(g, sk_1[i1]) then";
  simplify;
  SArename zz_7;
  SArename enc_6;
  SArename dh_7;
  out_game "r.out.cv";

  start_from_other_end;
  insert after "Odecap(pk_S" "find ienc1 <= Nenc, i1 <= N suchthat defined(r_8[ienc1, i1], enc_7[ienc1, i1], sk[i1], pk_R[ienc1, i1]) && (exp(g, sk) = pk_R[ienc1, i1]) && (exp(g, sk[i1]) = pk_S) && (enc_7[ienc1, i1] = enc_2) then orfind idec1 <= Ndec suchthat defined(r_6[idec1], enc_2[idec1], pk_S[idec1]) && (pk_S[idec1] = pk_S) && (enc_2[idec1] = enc_2) then";
  out_game "bug.1.out.cv";
  out_game "bug.1.outocc.cv" occ;  
  simplify; (* This is when the bug hits *)
  out_game "bug.2.out.cv";
  out_game "bug.2.outocc.cv" occ

}

param N_aenc, N_adec, N_aorcl.

type length_t [fixed].
fun I2OSP2(length_t): bitstring [data].
const Nzz: length_t.

const RFCXXXX: bitstring.
const label_eae_prk: bitstring.
const label_zz: bitstring.
const suite_id: bitstring.

fun concatDH(bitstring, bitstring): bitstring [data].
  (* This can be data because we only use it with fixed-length parameters *)
fun concatExtract(bitstring, bitstring, bitstring, bitstring): bitstring [data].
  (* This can be data because we only use it with a few known constants
     for the two first parameters, or with fixed-length parameters. *)
fun concatContext(bitstring, bitstring, bitstring): bitstring.
fun concatExpand(bitstring, bitstring, bitstring, bitstring, bitstring): bitstring.


(* DH-based KEM *)



(* For P-256 and P-521
se a left-hand-side pattern matching of Serialize
*)
type G_t [bounded,large].
type serialized_point_t [fixed,large].
fun Serialize(G_t): serialized_point_t [data].
fun p2b(serialized_point_t): bitstring [data].
type Z_t [bounded,large].
const dummy_Zt: Z_t.
expand DH_good_group(
  G_t,
  Z_t,
  g,
  exp,
  exp_1,
  mult
).

proba P_GDH.
proba P_sqGDH.
expand mod_square_GDH(
  (* types *)
  G_t,  (* Group elements *)
  Z_t,  (* Exponents *)
  (* variables *)
  g,    (* a generator of the group *)
  exp,  (* exponentiation function *)
  exp_1, (* a symbol that replaces exp after game transformation *)
  mult, (* multiplication function for exponents *)
  (* probabilities *)
  P_GDH, (* probability of breaking the GDH assumption *)
  P_sqGDH (* probability of breaking the square GDH assumption *)
).






letfun DH(exponent: Z_t, group_element: G_t) =
  Serialize(exp(group_element, exponent)).
letfun pk(exponent: Z_t) =
  exp(g, exponent).
letfun GenerateKeyPair() =
  new z: Z_t;
  (z, exp(g, z)).


(* KDF *)

type hash_key_t [fixed].

type extract_t [fixed,large].
fun e2b(extract_t): bitstring.
const lbytes_empty_e: extract_t.
const lbytes_empty: bitstring.
equation e2b(lbytes_empty_e) = lbytes_empty.

expand ROM_hash_2(
  (* types *)
  hash_key_t,
  bitstring,
  bitstring,
  extract_t,
  (* functions *)
  Extract,
  (* processes *)
  Extract_orcl,
  (* parameters *)
  N_qExtr  (* number of queries to the oracle by the adversary *)
).

proba P_PRF.
type expand_t [fixed,large].
expand PRF_1(
  extract_t,
  bitstring,
  expand_t,
  Expand,
  P_PRF
).

def boolean_choice(value_t, test) {
  fun test(bool, value_t, value_t) : value_t.

  equation forall x:value_t, y:value_t; test(true, x, y) = x.
  equation forall x:value_t, y:value_t; test(false, x, y) = y.
  (* Knowing the equations defined above, this can be deduced, but
     CryptoVerif can't do this on its own. *)
  equation forall x:value_t, b:bool; test(b,x,x) = x.

  (* If r1 or r2 leak elsewhere, the transformation will not go through. *)
  (* TODO What's the probability to distinguish the two games? *)
  equiv(random_choice(test))
    r1 <-R value_t; r2 <-R value_t; Otest(b: bool) := return(test(b, r1, r2))
    <=(0)=>
    r3 <-R value_t; Otest(b: bool) := return(r3).
}

expand boolean_choice(expand_t, test).


letfun LabeledExtract(key_extr: hash_key_t, salt: bitstring, label: bitstring, IKM: bitstring) =
  let labeledIKM = concatExtract(RFCXXXX, suite_id, label, IKM) in
  Extract(key_extr, salt, labeledIKM).

letfun LabeledExpand(PRK: extract_t, label: bitstring, info: bitstring, L: length_t) =
  let labeledInfo = concatExpand(I2OSP2(L), RFCXXXX, suite_id, label, info) in
  Expand(PRK, labeledInfo).

letfun ExtractAndExpand(key_extr: hash_key_t, dh: bitstring, kemContext: bitstring) =
  let eae_prk = LabeledExtract(key_extr, lbytes_empty, label_eae_prk, dh) in
  LabeledExpand(eae_prk, label_zz, kemContext, Nzz).





type AuthEncap_res_t.
fun AuthEncap_Some(expand_t, bitstring): AuthEncap_res_t [data].
const AuthEncap_None: AuthEncap_res_t.
equation forall zz: expand_t, enc: bitstring;
  AuthEncap_Some(zz, enc) <> AuthEncap_None.

letfun AuthEncap(key_extr: hash_key_t, pkR: G_t, skS: Z_t) =
  let (skE: Z_t, pkE: G_t) = GenerateKeyPair() in
  (
    let dh: bitstring = concatDH(p2b(DH(skE, pkR)), p2b(DH(skS, pkR))) in
    let enc: bitstring = p2b(Serialize(pkE)) in
    let pkRm: bitstring = p2b(Serialize(pkR)) in
    let pkSm: bitstring = p2b(Serialize(pk(skS))) in
    let kemContext: bitstring = concatContext(enc, pkRm, pkSm) in
    let zz: expand_t = ExtractAndExpand(key_extr, dh, kemContext) in
    AuthEncap_Some(zz, enc)
  ) else (
    AuthEncap_None
  ).

type AuthDecap_res_t.
fun AuthDecap_Some(expand_t): AuthDecap_res_t [data].
const AuthDecap_None: AuthDecap_res_t.
equation forall zz: expand_t; AuthDecap_Some(zz) <> AuthDecap_None.

letfun AuthDecap(key_extr: hash_key_t, enc: bitstring, skR: Z_t, pkS: G_t) =
  let p2b(Serialize(pkE: G_t)) = enc in
  (
    let dh: bitstring = concatDH(p2b(DH(skR, pkE)), p2b(DH(skR, pkS))) in
    let pkRm: bitstring = p2b(Serialize(pk(skR))) in
    let pkSm: bitstring = p2b(Serialize(pkS)) in
    let kemContext: bitstring = concatContext(enc, pkRm, pkSm) in
    let zz: expand_t = ExtractAndExpand(key_extr, dh, kemContext) in
    AuthDecap_Some(zz)
  ) else (
    AuthDecap_None
  ).

(* TODO possibly rename expand_t to kem_key_t *)

table C(bitstring). 
table E(bool, G_t, bitstring).

implementation
  type length_t = 8; (* one byte *)
  fun I2OSP2 = "i2osp2";

  const RFCXXXX = "RFCXXXX ";
  const label_eae_prk = "eae_prk";
  const label_zz = "zz";

  fun concatDH = "concatDH";
  fun concatExtract = "concatExtract";
  fun concatContext = "concatContext";
  fun concatExpand = "concatExpand";

  (* for DHKEM(X25519, HKDF-SHA256) because P256
     is not in the OCaml bindings of HACL* *)
  const Nzz = "32";
  type G_t = "Bytes.t";
  (*type serialized_point_t*)
  type Z_t = "Bytes.t";
  fun p2b = "id" [inverse = "id"].


param N, Nenc, Ndec.

equivalence
  Ostart() := 
    key_extr <-R hash_key_t;
    return();
    (
      foreach i <= N do Osetup() := sk <-R Z_t; return(); (
        foreach ienc <= Nenc do ( Oencap(pk_R: G_t) :=
          return(AuthEncap(key_extr, pk_R, sk))) |
        foreach idec <= Ndec do ( Odecap(pk_S: G_t, enc: bitstring) :=
          return(AuthDecap(key_extr, enc, sk, pk_S))) |
        Opk() := return(exp(g, sk))
      ) |
      run Extract_orcl(key_extr)
    )

  Ostart() :=
    key_extr <-R hash_key_t;
    return();
    (
      foreach i <= N do Osetup() := sk <-R Z_t; return(); (
        foreach ienc <= Nenc do ( Oencap(pk_R: G_t) :=
          let AuthEncap_Some(k: expand_t, c_enc: bitstring) = AuthEncap(key_extr, pk_R, sk) in (
            return(AuthEncap_Some(k, c_enc))
          ) else (
            return(AuthEncap_None)
          )) |
        foreach idec <= Ndec do ( Odecap(pk_S: G_t, c_dec: bitstring) :=
          find ienc1 <= Nenc, i1 <= N suchthat
              defined(sk[i1], pk_R[ienc1, i1], k[ienc1, i1], c_enc[ienc1, i1]) &&
              pk(sk) = pk_R[ienc1, i1] && pk(sk[i1]) = pk_S && c_enc[ienc1, i1] = c_dec then (
            return(AuthDecap_Some(k[ienc1, i1]))
          ) orfind idec1 <= Ndec, i1 <= N suchthat
              defined(sk[i1], pk_S[idec1, i1], k'[idec1, i1], c_dec[idec1, i1]) &&
              sk = sk[i1] && pk_S[idec1, i1] = pk_S && c_dec[idec1, i1] = c_dec then (
            return(AuthDecap_Some(k'[idec1, i1]))
          ) else (
              find i1 <= N suchthat defined(sk[i1]) && pk_S = pk(sk[i1]) then (
                let AuthDecap_Some(k0) = AuthDecap(key_extr, c_dec, sk, pk_S) in (
                  k' <-R expand_t;
                  return(AuthDecap_Some(k'))
                ) else (
                  return(AuthDecap_None)
                )
              ) else (
                return(AuthDecap(key_extr, c_dec, sk, pk_S))
              )
          )) |
        Opk() := return(pk(sk))
      ) |
      run Extract_orcl(key_extr)
    )

(* EXPECTED
RESULT Could not prove indistinguishability between game 1 and game 2.
8.028s (user 7.988s + system 0.040s), max rss 92512K
END *)
