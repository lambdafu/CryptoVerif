(* Encrypted Key Exchange, version of 
http://www.di.ens.fr/~pointche/pub.php?reference=BrChPo03

What's missing:
- final reasoning step to show that Pr[bad] is bounded (may be hard!)
- optimization of counting for computation of probabilities, both
for crypto transformations and for elimination of collisions.

Contributions to mention in the paper:
- allow array indices as arguments of functions in equivalences,
  to formalize CDH
- allow nested find in find conditions
- formalization of the ideal cipher model.
- manually guided elimination of collisions for passwords
- abort events, and their manual insertion; computation of probabilities
that avoids counting several times the difference between the
same games, even with events
- manual insertion of case distinctions and other instructions
- manual replacement of a term with an equal term (may not be used
for EKE)
- possibility to designate the number of different calls to an oracle
in probability formulas, for expressing more precise bounds.
- [unique] option of find

Current evaluation of CDH proba: 
(qH1 * NS + NP * qH0 + 3 * NS * qH0 + NP * qH1 + 10 * NU * qH0 + 
6 * NU * qH1) pCDH(time...)
9/1/2010 (by Simplify.filter_indices):
improved to (23 * qH0 + 11 * qH1) pCDH(time...)
??/1/2010 (by Simplify.is_compatible_indices):
improved to (6 * qH0 + 3 * qH1) pCDH(time...)
18/1/2010 (by Simplify.same_oracle_call):
improved to 2 * (qH0 + qH1) pCDH(time...)
Goal: (qH0 + qH1) pCDH(time...)
+ the time should use qD rather than qH0 + qH1
*)

proof {
show_game occ;
insert 158 "find j <= NU suchthat defined(X[j]) && X[j] = X_s then";
show_game occ;
insert 158 "find nj <= qH1 suchthat defined(x11[nj], x12[nj], x13[nj], x14[nj]) && (U = x11[nj]) && (S = x12[nj]) && (X_s = x13[nj]) && (Y = x14[nj]) then";
show_game occ;
insert_event Auth 191;
crypto enc;
show_game occ;
insert_event Encrypt 759;
auto;
show_game
}

(* set interactiveMode = true. *)

param NU, NS, NP.

type exponent [large, fixed].
type G [large, fixed].
type passwd [password, fixed].
     (* I want to eliminate collisions with the password in 
     some cases but not others. I want to eliminate them in the protocol
     itself, but not in enc_dec_oracle (because if I eliminate them in
     enc_dec_oracle, the probability of attack will depend on qE/|passwd| 
     and/or qD/|passwd| so it may become too large). *)


type hashinput.
type hash0 [fixed].
type hash1 [fixed,large].
type host [bounded].

(* Computational Diffie-Hellman *)

proba pCDH.

expand CDH(G, exponent, g, exp, mult, pCDH).

(* Ideal cipher model *)

expand ICM_cipher(passwd, G, enc, dec, enc_dec_oracle, qE, qD).

(* Hash functions in the random oracle model *)
(*
Problem: if I use hash(concat(...)), after game transformations I get
equality tests x = concat(y1,y2,y3,y4,y5) that I would like to transform into
x = concat(x1,x2,x3,x4,x5) && x1 = y1 && ... for some x1...x5 but
CryptoVerif cannot do that. As a temporary solution, I consider only
hash functions with 5 arguments.

expand ROM_hash(hashinput, hash0, h0, hashoracle0, qH0).
expand ROM_hash(hashinput, hash1, h1, hashoracle1, qH1).
fun concat(host, host, G, G, G):hashinput [compos].
*)

param N, qH0, qH1.

fun h0(host, host, G, G, G):hash0.

equiv (x1: host, x2: host, x3: G, x4: G, x5: G) N -> h0(x1, x2, x3, x4, x5) [all]
      <=(0)=>
      (x1: host, x2: host, x3: G, x4: G, x5: G) N -> find[unique] j <= N suchthat defined(x1[j],x2[j],x3[j],x4[j],x5[j],r[j]) && otheruses(r[j]) && x1 = x1[j] && x2 = x2[j] && x3 = x3[j] && x4 = x4[j] && x5 = x5[j] then r[j] else
			 new r:hash0; r.

channel c10, c20.

let hashoracle0 = ! qH0 in(c10, (x1: host, x2: host, x3: G, x4: G, x5: G)); out(c20, h0(x1,x2,x3,x4,x5)). 

fun h1(host, host, G, G, G):hash1.

equiv (x1: host, x2: host, x3: G, x4: G, x5: G) N -> h1(x1, x2, x3, x4, x5) [all]
      <=(0)=>
      (x1: host, x2: host, x3: G, x4: G, x5: G) N -> find[unique] j <= N suchthat defined(x1[j],x2[j],x3[j],x4[j],x5[j],r1[j]) && otheruses(r1[j]) && x1 = x1[j] && x2 = x2[j] && x3 = x3[j] && x4 = x4[j] && x5 = x5[j] then r1[j] else
			 new r1:hash1; r1.

channel c11, c21.

let hashoracle1 = ! qH1 in(c11, (x11: host, x12: host, x13: G, x14: G, x15: G)); out(c21, h1(x11,x12,x13,x14,x15)). 


(* Queries *)

query secret sk_u.
query secret sk_s.
query secret sk_p.

channel c1, c2, c3, c4, c5, c6, c7, c8, c9, cp,
	start, finish.

const U : host.
const S : host.

event bad.
(*
event beginA(host, host, shkey).
event endB(host, host, shkey).

query x:host, y:host, k:shkey;
	event endB(x,y,k) ==> beginA(x,y,k).
query x:host, y:host, k:shkey;
	event inj:endB(x,y,k) ==> inj:beginA(x,y,k).
*)

(* Client *)

let processU =
	in(c1, ());
	new x: exponent;
	let X = exp(g,x) in
	out(c2, (U, X));
        in(c5, (=S, Ystar_u: G));
	let Y_u = dec(Ystar_u, pw) in
	let K_u = exp(Y_u, x) in
	let auth_u = h1(U,S,X,Y_u,K_u) in
	out(c6, auth_u);
	in(c9, ());
	let sk_u: hash0 = h0(U,S,X,Y_u,K_u).

(* Server *)

let processS =
	in(c3, (=U, X_s: G));
	new y: exponent;
	let Y = exp(g,y) in
	let Ystar = enc(Y, pw) in
	out(c4, (S, Ystar));
	in(c7, auth_s: hash1);
	let K_s = exp(X_s, y) in
	if auth_s = h1(U,S,X_s,Y,K_s) then
	let sk_s: hash0 = h0(U,S,X_s,Y,K_s).

(* Sessions that are subject only to a passive attack.
   We send a transcript of the session *)

let processPassive =
        in(cp, ());
        new xp: exponent;
	let Xp = exp(g, xp) in
	new yp: exponent;
	let Yp = exp(g, yp) in
	let Kp = exp(g, mult(xp,yp)) in
	let Ystarp = enc(Yp, pw) in
	let authp = h1(U, S, Xp, Yp, Kp) in
	let sk_p: hash0 = h0(U, S, Xp, Yp, Kp) in
	out(cp, (U, Xp, S, Ystarp, authp)).

process 
	in(start, ());
	new pw: passwd;
	out(c8, ());
	((! NU processU) |
	 (! NS processS) | 
	 (! NP processPassive) | enc_dec_oracle | hashoracle0 | hashoracle1)

