(*

Woo and Lam public-key auth protocol (1992, computer)

A -> B: A
B -> A: N
A -> B: { N }_skA
B -> S: A
S -> B: A, { A, pkA }_skS

Attack
Full agreement is true, but there is an attack !
(Indeed, the messages never mention B.)

*)

param N.
param N2.
param N3.
param N4.

type nonce [large,fixed].
type host [bounded].
type skey [bounded].
type pkey [bounded].
type keyseed [large,fixed].
type seed [fixed].
type signature [bounded].
type blocksize [fixed].
type blocksizebot [bounded].

fun pad(nonce):blocksize [compos].
fun concat2(host, pkey):blocksize [compos].

forall z:nonce, x2:host, y2:pkey;
	pad(z) <> concat2(x2,y2).

(* Signatures *)

proba Psign.
proba Psigncoll.

expand UF_CMA_signature(keyseed, pkey, skey, blocksize, signature, seed, sskgen, spkgen, sign, check, Psign, Psigncoll).

(* Queries *)

channel c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13,
	start, finish.

const A:host.
const B:host.

event beginA(host).
event beginAfull(host,host,nonce).
event endB(host, host, nonce).

query x:host, y:host, z:nonce;
	event endB(x,y,z) ==> beginAfull(x,y,z).
query x:host, y:host, z:nonce;
	event endB(x,y,z) ==> beginA(y).
query x:host, y:host, z:nonce;
	event inj:endB(x,y,z) ==> inj:beginAfull(x,y,z).
query x:host, y:host, z:nonce;
	event inj:endB(x,y,z) ==> inj:beginA(y).

let processA =
	in(c1, hostB0:host);
	event beginA(hostB0);
	out(c2, A);
	in(c3, n:nonce);
	event beginAfull(A, hostB0, n);
	new r1:seed;
	out(c4, sign(pad(n), skA, r1)).

let processB =
	in(c5, hostA0:host);
	new n:nonce;
	out(c6, n);
	in(c7, m:signature);
	out(c8, hostA0);
	in(c9, (=hostA0, pkA2:pkey, m4:signature));
	if check(concat2(hostA0, pkA2), pkS, m4) then
	if check(pad(n), pkA2, m) then
	(* OK *)
	if hostA0 = A then
	event endB(hostA0, B, n).


let processS =
	in(c10, hostA:host);
	find j2 <= N2 suchthat defined(Khost[j2],Rkey[j2]) && (Khost[j2] = hostA) then
	let pka = Rkey[j2] in
	new r2:seed;
	out(c11, (hostA, pka, sign(concat2(hostA, pka), skS, r2))).

let processK =
	in(c12, (Khost: host, Kkey: pkey));
	let Rkey:pkey = 
		if Khost = A then pkA else
		if Khost = B then pkB else
		Kkey.

process 
	in(start, ());
	new rkA: keyseed;
	let pkA = spkgen(rkA) in
	let skA = sskgen(rkA) in
	new rkB: keyseed;
	let pkB = spkgen(rkB) in
	let skB = sskgen(rkB) in
	new rkS: keyseed;
	let pkS = spkgen(rkS) in
	let skS = sskgen(rkS) in
	out(c13, (pkA, pkB, pkS));
	((! N processA) |
	 (! N processB) | 
	 (! N processS) |
	 (! N2 processK))


(* EXPECTED
RESULT Could not prove event inj:endB(x, y, z) ==> inj:beginA(y), event inj:endB(x, y, z) ==> inj:beginAfull(x, y, z), event endB(x, y, z) ==> beginA(y), event endB(x, y, z) ==> beginAfull(x, y, z).
0.060s (user 0.060s + system 0.000s), max rss 24048K
END *)
