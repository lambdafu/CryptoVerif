(**********************************************************************
*
* Chosen *ciphertext* for CCM mode, one plaintext block, *separate* nonces for
* the counter mode and CBC mac
*
*  * Cryptoverif version: 1.18
*  * Blocks: 2
*  * Result: unknown
*
*
***********************************************************************)


(* I believe that this example is subject to an attack:

the decryption oracle can be turned into an AES oracle:
if one gives a ciphertext mac_join(cm_join(x-1,x-1),x,0) to the
decryption oracle, we have
   counter_nonce = x-1
   cipherblock1 = x-1
   tag_nonce = x
   mac_tag = 0
so
   counter1 = x
   pad1 = aes(x, aesk)
   plaintext1 = xor(aes(x, aesk), x-1)
   b0 = x
   t1 = aes_enc(x, aesk)
   t2 = aes_enc(x-1, aesk)
   s0 = aes_enc(x-1, aesk)
   recomputed_tag = 0
so the test recomputed_tag = mac_tag succeeds, and
Odec(mac_join(cm_join(x-1,x-1),x,0)) returns xor(aes(x, aesk), x-1)
so aes(x, aesk) = xor(Odec(mac_join(cm_join(x-1,x-1),x,0)), x-1).

From that, it is easy to break the scheme: given a challenge ciphertext
mac_join(cm_join(counter_nonce,cipherblock1),tag_nonce,mac_tag),
one can decrypt it by computing pad1 = aes(counter_nonce+1, aesk)
using the previous oracle with x = counter_nonce+1. Then
the plaintext is xor(cipherblock1, pad1).

*)

type block [fixed, large].
type aes_keyseed [fixed, large, bounded].
type aes_key [large, bounded].
proba Paes.
expand PRP_cipher(aes_keyseed, aes_key, block, aes_kgen, aes_enc, aes_dec, Paes).


type cm_ciphertext [bounded].
fun cm_join(block, block): cm_ciphertext [compos].

type maced_ciphertext [bounded].
fun mac_join(cm_ciphertext, block, block): maced_ciphertext [compos].




(* define xor to exist over blocks *)
expand Xor(block, xor, zero_block).


(* Useful helper function. Dunno why. *)
fun test(bool, block, block):block.
forall x:block,y:block; test(true,x,y) = x.
forall x:block,y:block; test(false,x,y) = y.

(* axiomitize incr *)
fun incr(block): block [compos, uniform].
forall x:block; incr(x) <> x. 
collision x <-R block; y <-R block; return(incr(x) = y) <=( 1/|block| )=> return(false). 


(* Parameters *)

param N_enc. (* the number of times the adversary gets to call the encryption oracle *)
param N_dec. (* the number of times the adversary gets to call the decryption oracle *)
param C. (* the number of challenge ciphertexts available to the adversary *)



(* what do we want? That the adversary does not know which plaintext 
   was encrypted *)

query secret secret_bit.



let enc_oracle = 
    Oenc(b1 : block):=
       
       tag_nonce <-R block;
       b0 <- tag_nonce;

       t1 <- aes_enc(b0, aesk);
       t2 <- aes_enc( xor(t1, b1), aesk);



       counter_nonce <-R block;
       s0 <- aes_enc(counter_nonce, aesk);

       counter1 <- incr(counter_nonce);
       pad1 <- aes_enc(counter1, aesk);
       cipherblock1 <- xor(b1, pad1);

       this_cm_ciphertext <- cm_join(counter_nonce, cipherblock1);

       tag <- xor(t2, s0);

       ciphertext <- mac_join(this_cm_ciphertext, tag_nonce, tag);

       return (ciphertext).


let dec_oracle = 
   Odec(maced_ctext: maced_ciphertext) :=
   find 
       u <= C suchthat defined(challenge[u]) && (maced_ctext = challenge[u])
   then
       end
   else
	let mac_join(cm_ctext, tag_nonce, mac_tag) = maced_ctext in      

	    let cm_join(counter_nonce, cipherblock1) = cm_ctext in


	    	counter1 <- incr(counter_nonce);
		pad1 <- aes_enc(counter1 (* WAS: counter_nonce (typo) *), aesk);
		plaintext1 <- xor(pad1, cipherblock1);

		b0 <- tag_nonce;
		t1 <- aes_enc(b0, aesk);
		t2 <- aes_enc( xor(t1, plaintext1), aesk);

 		s0 <- aes_enc(counter_nonce, aesk);
		
		recomputed_tag <- xor(t2, s0);

		if recomputed_tag = mac_tag
                    then return(plaintext1).



let challenge_oracle =
       
       Ochallenge(b11: block,  
       		  b21: block ) :=

       b1 <- test(secret_bit, b11, b21);

       (* le sigh-- cut and copy from encryption oracle *)

       tag_nonce <-R block;
       b0 <- tag_nonce;

       t1 <- aes_enc(b0, aesk);
       t2 <- aes_enc( xor(t1, b1), aesk);



       counter_nonce <-R block;
       s0 <- aes_enc(counter_nonce, aesk);

       counter1 <- incr(counter_nonce);
       pad1 <- aes_enc(counter1, aesk);
       cipherblock1 <- xor(b1, pad1);

       this_cm_ciphertext <- cm_join(counter_nonce, cipherblock1);

       tag <- xor(t2, s0);

       ciphertext <- mac_join(this_cm_ciphertext, tag_nonce, tag);

       (* end cut and copy from encryption oracle *)

       challenge : maced_ciphertext <- ciphertext;

       return(challenge).





process 
	Ostart() :=
	(* Choose the key *)
	aesx <-R aes_keyseed;
        aesk <- aes_kgen(aesx);

        secret_bit <-R bool;

	(* Make encryption oracles available now IN PARALLEL 
 	   with the rest of the game. *)
	return;

        (foreach i <= N_enc do enc_oracle) | (foreach i <= N_dec do dec_oracle) | (foreach i <= C do challenge_oracle)

