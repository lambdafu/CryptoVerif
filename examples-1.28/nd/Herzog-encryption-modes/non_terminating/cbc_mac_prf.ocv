(**********************************************************************
*
* Security of the CBC mac
*
*  * Cryptoverif version: 1.18
*  * Blocks: 2
*  * Result: unknown
*
*
***********************************************************************)

set interactiveMode = true.

type block [fixed, large].
type aes_keyseed [fixed, large, bounded].
type aes_key [large, bounded].
proba Paes.
expand PRP_cipher(aes_keyseed, aes_key, block, aes_kgen, aes_enc, aes_dec, Paes).


(* define xor to exist over blocks *)
expand Xor(block, xor, zero_block).



(* Parameters *)

param N_tag. (* the number of times the adversary gets to call the encryption oracle *)


let tag_oracle = 
    Otag(b1 : block, b2 : block):=
       
       tag1 <- aes_enc(b1, aesk);
       tag2 <- aes_enc( xor(tag1, b2), aesk);
       return (tag2).

process 
	Ostart() :=
	(* Choose the key *)
	aesx <-R aes_keyseed;
        aesk <- aes_kgen(aesx);

	(* Make tag and verification oracles available now IN PARALLEL 
 	   with the rest of the game. *)
	return;

        (foreach i <= N_tag do tag_oracle) 

(* After crypto aes_enc:

      Ostart() :=
      return();
      foreach i_38 <= N_tag do
      Otag(b1: block, b2: block) :=
      find [unique] @i_56 = @ri_55 <= N_tag suchthat defined(@4_x_45[@ri_55], @4_r2_44[@ri_55]) && (b1 = @4_x_45[@ri_55]) then
      (
        @4_x_45: block <- xor(@4_r2_44[@i_56], b2);
        find [unique] @i_52 = @ri_51 <= N_tag suchthat defined(@4_x_45[@ri_51], @4_r2_44[@ri_51]) && (@4_x_45 = @4_x_45[@ri_51]) then
          return(@4_r2_44[@i_52])
        orfind @i_50 = @ri_49 <= N_tag suchthat defined(b1[@ri_49], @4_r2_47[@ri_49]) && (@4_x_45 = b1[@ri_49]) then
          return(@4_r2_47[@i_50])
        else
          @4_r2_44 <-R block;
          return(@4_r2_44)
      )
      orfind @i_54 = @ri_53 <= N_tag suchthat defined(b1[@ri_53], @4_r2_47[@ri_53]) && (b1 = b1[@ri_53]) then
      (
        @4_x_45: block <- xor(@4_r2_47[@i_54], b2);
        find [unique] @i_52 = @ri_51 <= N_tag suchthat defined(@4_x_45[@ri_51], @4_r2_44[@ri_51]) && (@4_x_45 = @4_x_45[@ri_51]) then
          return(@4_r2_44[@i_52])
        orfind @i_50 = @ri_49 <= N_tag suchthat defined(b1[@ri_49], @4_r2_47[@ri_49]) && (@4_x_45 = b1[@ri_49]) then
          return(@4_r2_47[@i_50])
        else
          @4_r2_44 <-R block;
          return(@4_r2_44)
      )
      else
        @4_r2_47 <-R block;
        @4_x_45: block <- xor(@4_r2_47, b2);
        find [unique] @i_52 = @ri_51 <= N_tag suchthat defined(@4_x_45[@ri_51], @4_r2_44[@ri_51]) && (@4_x_45 = @4_x_45[@ri_51]) then
          return(@4_r2_44[@i_52])
        else
          @4_r2_44 <-R block;
          return(@4_r2_44)

How to transform this game into a PRF game:

      Ostart() :=
      return();
      foreach i_38 <= N_tag do
      Otag(b1: block, b2: block) :=
      find [unique] i = j <= N_tag suchthat defined(res[j], b1[j], b2[j]) && (b1 = b1[j]) && (b2 = b2[j]) then
          return(res[i])
      else
          res <-R block;
          return(res)

is not entirely clear to me.

I think we need a kind of global dependency analysis on @4_r2_47, to show that 
the tests b1 = @4_x_45[@ri_55] and @4_x_45 = b1[@ri_49] are impossible,
the test @4_x_45 = @4_x_45[@ri_51] (first occurrence) implies 
   either xor(@4_r2_47[@i_54], b2) = xor(@4_r2_47[@ri_51], b2[@ri_51])
   	  which implies @i_54 = @ri_51 and b2 = b2[@ri_51]
          so b1 = b1[@i_54] = b1[@ri_51]

   or xor(@4_r2_47[@i_54], b2) = xor(@4_r2_47[@i_54[@ri_51]], b2[@ri_51])
   	  which implies @i_54 = @i_54[@ri_51] and b2 = b2[@ri_51]
          so b1 = b1[@i_54] = b1[@i_54[@ri_51]] = b1[@ri_51]

the test @4_x_45 = @4_x_45[@ri_51] (second occurrence) is impossible

Global dependency analysis could be improved by using term simplification
in Transf_globaldepanal.almost_indep_test.
To handle the two definitions of @4_x_45, either use SArename or
introduce an intermediate variable:
   i <- i_38 or i <- @i_54
then in both cases
   @4_x_45 = xor(@4_r2_47[i], b2)
@4_x_45 = @4_x_45[@ri_51] becomes
   xor(@4_r2_47[i], b2) = xor(@4_r2_47[i[@ri_51]], b2[@ri_51])
by elimination of collisions when i <> i[@ri_51], the case i <> i[@ri_51]
is impossible (since b2 does not depend on @4_r2_47) so the test is 
equivalent to
   i = i[@ri_51] && b2 = b2[@ri_51]
   

Hence we get

      Ostart() :=
      return();
      foreach i_38 <= N_tag do
      Otag(b1: block, b2: block) :=
      find [unique] @i_54 = @ri_53 <= N_tag suchthat defined(b1[@ri_53], @4_r2_47[@ri_53]) && (b1 = b1[@ri_53]) then
      (
        @4_x_45: block <- xor(@4_r2_47[@i_54], b2);
        find [unique] @i_52 = @ri_51 <= N_tag suchthat defined(b1[@ri_51], b2[@ri_51], @4_r2_44[@ri_51]) && (b1 = b1[@ri_51]) && (b2 = b2[@ri_51]) then
          return(@4_r2_44[@i_52])
        else
          @4_r2_44 <-R block;
          return(@4_r2_44)
      )
      else
        @4_r2_47 <-R block;
        @4_x_45: block <- xor(@4_r2_47, b2);
        @4_r2_44 <-R block;
        return(@4_r2_44)

By moving the test 
  find [unique] @i_52 = @ri_51 <= N_tag suchthat defined(b1[@ri_51], b2[@ri_51], @4_r2_44[@ri_51]) && (b1 = b1[@ri_51]) && (b2 = b2[@ri_51]) then
earlier, we get

      Ostart() :=
      return();
      foreach i_38 <= N_tag do
      Otag(b1: block, b2: block) :=
      find [unique] @i_52 = @ri_51 <= N_tag suchthat defined(b1[@ri_51], b2[@ri_51], @4_r2_44[@ri_51]) && (b1 = b1[@ri_51]) && (b2 = b2[@ri_51]) then
        return(@4_r2_44[@i_52])
      else
        find [unique] @i_54 = @ri_53 <= N_tag suchthat defined(b1[@ri_53], @4_r2_47[@ri_53]) && (b1 = b1[@ri_53]) then
        (
          @4_x_45: block <- xor(@4_r2_47[@i_54], b2);
          @4_r2_44 <-R block;
          return(@4_r2_44)
        )
        else
          @4_r2_47 <-R block;
          @4_x_45: block <- xor(@4_r2_47, b2);
          @4_r2_44 <-R block;
          return(@4_r2_44)

we can remove the assignments to @4_x_45 and @4_r2_47 and 
merge the branches, yielding
(Notice that there is a defined condition on @4_r2_47, 
but this condition becomes disappears by the merging itself.)

      Ostart() :=
      return();
      foreach i_38 <= N_tag do
      Otag(b1: block, b2: block) :=
      find [unique] @i_52 = @ri_51 <= N_tag suchthat defined(b1[@ri_51], b2[@ri_51], @4_r2_44[@ri_51]) && (b1 = b1[@ri_51]) && (b2 = b2[@ri_51]) then
        return(@4_r2_44[@i_52])
      else
        @4_r2_44 <-R block;
        return(@4_r2_44)

*)