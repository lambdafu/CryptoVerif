(* encryption scheme by Bellare and Rogaway, Random Oracles are
Practical: a Paradigm for Designing Efficient Protocols, CCS'93, 
section 3.2: 
	E(x) = f(r) || H(r) xor x || H2(r || x) 
(CCA2) -- in progress *)

set interactiveMode = true.

(* The proof is as follows:

show_game occ
insert 21 let concat(xh2',xh2'') = xh2 in
crypto rom(hash2)
crypto rom(hash)
remove_assign binder pk
crypto ow(f) r x_108
crypto remove_xor(xor) @9_r_152
show_game

The obtained game does not depend on menc.

We can then easily show that if menc is defined by 
"in(c, (m1,m2)); new b1:bool; let menc = if b1 then m1 else m2"
then the secrecy of b1 is preserved.
(In earlier versions, the system failed to show that directly; 
it now succeeds, see encryptBR93-2.)
*)

param nx, qD.

type pkey [bounded].
type skey [bounded].
type keyseed [large,fixed].
type hasht [large,fixed].
type hasht2 [large,fixed].
type seed [large,fixed]. 

(* One-way trapdoor permutation *)

proba POW.

expand OW_trapdoor_perm(keyseed, pkey, skey, seed, pkgen, skgen, f, mf, POW).

(* Hash function, random oracle model *)

type hashkey [fixed].

expand ROM_hash(hashkey, seed, hasht, hash).

param qH [noninteractive].
channel hc1, hc2.
let hashoracle = ! qH in(hc1, x: seed); out(hc2, hash(hk,x)).

(* Another hash function, random oracle model *)

expand ROM_hash(hashkey, bitstring, hasht2, hash2).

fun concat(seed,hasht):bitstring [compos].

param qH2 [noninteractive].
channel hc3, hc4.
let hashoracle2 = ! qH2 in(hc3, xh2:bitstring); out(hc4, hash2(hk2,xh2)).

(* Xor *)

expand Xor(hasht, xor, zero).

(* Queries *)

query secret1 menc.

channel c5, c6, c7, c8, c9, hstart, hret, start.

let processD =
	! qD
	in(c5, (a:seed, b: hasht, c:hasht2));
        (* The attacker cannot call the decryption oracle on the test ciphertext *)
	find suchthat defined(aT,bT,cT) && a = aT && b = bT && c = cT then yield else
	let x = mf(sk,a) in
	let m = xor(hash(hk,x), b) in
	if c = hash2(hk2,concat(x,m)) then
	out(c6, m).

let processT = 
	in(c7, menc:hasht);
	new x:seed;
	let aT:seed = f(pk,x) in
	let bT:hasht = xor(hash(hk,x), menc) in
	let cT:hasht2 = hash2(hk2,concat(x,menc)) in
	out(c8, (aT,bT,cT)).

process 
	in(hstart, ());
	new hk: hashkey;
	new hk2: hashkey;
	out(hret, ());	
	(hashoracle | hashoracle2 | 
	(in(start, ());
	new r:keyseed; 
	let sk = skgen(r) in
	let pk = pkgen(r) in
	out(c9, pk);
	(processD | processT)))

