(*************************************************************
 *                                                           *
 *       Cryptographic protocol verifier                     *
 *                                                           *
 *       Bruno Blanchet                                      *
 *                                                           *
 *       Copyright (C) ENS, CNRS, INRIA, 2005-2011           *
 *                                                           *
 *************************************************************)

(*

    Copyright ENS, CNRS, INRIA 
    contributor: Bruno Blanchet, Bruno.Blanchet@ens.fr
    
This software is a computer program whose purpose is to verify 
cryptographic protocols in the computational model.

This software is governed by the CeCILL-B license under French law and
abiding by the rules of distribution of free software.  You can  use, 
modify and/ or redistribute the software under the terms of the CeCILL-B
license as circulated by CEA, CNRS and INRIA at the following URL
"http://www.cecill.info". 

As a counterpart to the access to the source code and  rights to copy,
modify and redistribute granted by the license, users are provided only
with a limited warranty  and the software's author,  the holder of the
economic rights,  and the successive licensors  have only  limited
liability. 

In this respect, the user's attention is drawn to the risks associated
with loading,  using,  modifying and/or developing or reproducing the
software by the user in light of its specific status of free software,
that may mean  that it is complicated to manipulate,  and  that  also
therefore means  that it is reserved for developers  and  experienced
professionals having in-depth computer knowledge. Users are therefore
encouraged to load and test the software's suitability as regards their
requirements in conditions enabling the security of their systems and/or 
data to be ensured and,  more generally, to use and operate it in the 
same conditions as regards security. 

The fact that you are presently reading this means that you have had
knowledge of the CeCILL-B license and that you accept its terms.

*)
(* Signed Diffie-Hellman protocol *)
(*
set interactiveMode = true.
*)

proof {
crypto uf_cma(sign) rkA;
crypto rom(h);
crypto uf_cma(sign) rkB;
crypto pCDH;
auto
}

param N, N2.

type host [bounded].
type keyseed [large,fixed].
type seed [fixed].
type pkey [bounded].
type skey [bounded].
type blocksize [bounded].
type signature [bounded].

type Z [large,fixed].
type G [large,fixed].
type K [large,fixed].
type D [fixed].

(* the CDH assumption *) 

proba pCDH.

expand CDH(G, Z, g, exp, mult, pCDH).

(* h in the random oracle model *)

type hashkey [fixed].


(* signatures *)

(*
fun concatA(host, G):blocksize [compos].
fun concatB(host, G):blocksize [compos].
forall x:host, t:G, x':host, t':G;
   concatA(x,t) <> concatB(x',t').
*)

    
proba Psign.
proba Psigncoll.

expand UF_CMA_signature(keyseed, pkey, skey, G, signature, seed, skgen, pkgen, sign, check, Psign, Psigncoll).

expand ROM_hash(hashkey, bitstring, D, h).

param nH [noninteractive].
channel hc1, hc2.
let processH = ! nH in(hc1, (x:host, y:host, z:G, t:G, v:G, w:G)); out(hc2, h(hk,(x,y,z,t,v,w))).


const A,B:host.

(* query *)
query secret keyA.
query secret keyB.

event endA(host, host, G, G).
event beginB(host, host, G, G).
event endB(host, host, G, G).

(*
query x:G, y:G; event inj:endA(A, B, x, y) ==> inj:beginB(A, B, x, y).
query x:G, y:G; event inj:endB(A, B, x, y) ==> inj:endA(A, B, x, y).
*)

channel start, cstart, cA1, cA2, cA3, cA4, cA5, cA6, cB1, cB2, cB3, cB4, cB5, cH, cHret, cK.

let processA = 
  in(cA1, (hostB: host));
  new a:Z;
  let ga = exp(g,a) in

  new r1:seed;
  out(cA2, (A, hostB, ga, sign(ga, skA, r1)));
  in(cA3, (=hostB, =A, gb:G, s:signature));


  find j2 <= N2 suchthat defined(Khost[j2],Rkey[j2]) && (Khost[j2] = hostB) then
  let pkhostB = Rkey[j2] in
  if check(gb, pkhostB, s) then
  
  let gab = exp(gb, a) in
  let gAB2 = exp(pkB2, skA2) in
  let kA = h(hk, (A, hostB, ga, gb, gab, gAB2)) in 
  event endA(A, hostB, ga, gb);
  (* OK *)
  
  if hostB = B then 
  (let keyA:D = kA).
  (*else
   out(cA4, kA).*)

let processB =
  in(cB1, (hostA:host, =B, ga:G, s:signature));

  find j2 <= N2 suchthat defined(Khost[j2],Rkey[j2]) && (Khost[j2] = hostA) then
  let pkhostA = Rkey[j2] in
  if check(ga, pkhostA, s) then

  new b:Z;
  let gb = exp(g,b) in
  new r2: seed;
  event beginB(hostA, B, ga, gb);
  let gab = exp(ga, b) in
  let gAB2 = exp(pkA2, skB2) in
 
  out(cB2, (B, hostA, gb, sign(gb, skB, r2)));
  (* OK *)
  in(cB3, ());

  let kB = h(hk, (hostA, B, ga, gb, gab, gAB2)) in 
  event endB(hostA, B, ga, gb);

  if hostA = A then 
  (let keyB:D = kB).
  (*else
   out(cB4, kB).*)


let processK =
  !N2
  in(cK, (Khost: host, (Kkey: pkey, Kkey2: G)));
  let (Rkey:pkey, Rkey2:G) = 
		if Khost = B then (pkB, pkB2) else
		if Khost = A then (pkA, pkA2) else
		(Kkey, Kkey2).

process
	in(start, ());
	new hk: hashkey;
	new rkA : keyseed;
        new rA2 : Z;
	let skA = skgen(rkA) in
        let skA2 = rA2 in  
	let pkA = pkgen(rkA) in
        let pkA2 = exp(g, rA2) in
	new rkB : keyseed;
        new rB2 : Z;
	let skB = skgen(rkB) in
        let skB2 = rB2 in
	let pkB = pkgen(rkB) in
        let pkB2 = exp(g, rB2) in
	out(cstart, (pkA, pkA2, pkB, pkB2));
	((!N processA) | (!N processB) | processH | processK)

