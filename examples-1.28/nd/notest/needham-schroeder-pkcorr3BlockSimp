(* Needham Schroeder public key protocol. *)

param N.
param N2.
param N3.
param N4.

type nonce [large,fixed].
type host.
type key.
type keyseed [large,fixed].
type seed [fixed].
type signature.
type blocksize [fixed].
type blocksizebot.

fun concat1(nonce, host):blocksize [compos].
fun concat2(nonce, nonce, host):blocksize [compos].
fun concat3(key, host):blocksize [compos].
fun pad(nonce):blocksize [compos].

forall y:key,z:host,y2:nonce,z2:host;
	concat3(y,z) <> concat1(y2,z2).
forall z:nonce,t:nonce,u:host,y2:nonce,z2:host;
	concat2(z,t,u) <> concat1(y2,z2).
forall z:nonce,t:nonce,u:host,y2:key,z2:host;
	concat2(z,t,u) <> concat3(y2,z2).
forall y:nonce,y2:nonce,z2:host;
	pad(y) <> concat1(y2,z2).
forall z:nonce,t:nonce,u:host,y2:nonce;
	concat2(z,t,u) <> pad(y2).
forall y:nonce,y2:key,z2:host;
	pad(y) <> concat3(y2,z2).



(* Public-key encryption (CCA2) *)

proba Penc.
proba Penccoll.

fun enc(blocksize, key, seed): bitstring.
fun skgen(keyseed):key.
fun pkgen(keyseed):key.
fun dec(bitstring, key): blocksizebot.

fun enc2(blocksize, key, seed): bitstring.
fun skgen2(keyseed):key.
fun pkgen2(keyseed):key.
fun dec2(bitstring, key): blocksizebot.

fun injbot(blocksize):blocksizebot [compos].

const Z:blocksize.

forall m:blocksize, r:keyseed, r2:seed; 
	dec(enc(m, pkgen(r), r2), skgen(r)) = injbot(m).
forall m:blocksize, r:keyseed, r2:seed; 
	dec2(enc2(m, pkgen2(r), r2), skgen2(r)) = injbot(m).

equiv  !N3 new r: keyseed; (() N -> pkgen(r),
			    (m:bitstring) N2 -> dec(m, skgen(r))),
       (x:blocksize, y:key) N4 -> new r2:seed; enc(x,y,r2) [all]
     <=(N4 * Penc)=> 
       !N3 new r: keyseed; (() N -> pkgen2(r),
			    (m:bitstring) N2 -> 
		find j <= N4 suchthat defined(m2[j],y[j],x[j]) &&
		y[j] = pkgen2(r) && m = m2[j] then injbot(x[j]) else dec2(m, skgen2(r))),
       (x:blocksize, y:key) N4 -> new r2:seed;new r3:seed; 
		find k <= N3 suchthat defined(r[k]) && y = pkgen2(r[k]) then
			(let m2:bitstring = enc2(Z, y, r2) in
			m2)
		else enc(x,y,r3).

collision new r1:keyseed; new r2:keyseed; 
	pkgen(r1) = pkgen(r2) <=(Penccoll)=> r1 = r2.
collision new r1:keyseed; new r2:keyseed; 
	pkgen2(r1) = pkgen2(r2) <=(Penccoll)=> r1 = r2.
collision new r1:keyseed; new r2:keyseed; 
	skgen(r1) = skgen(r2) <=(Penccoll)=> r1 = r2.
collision new r1:keyseed; new r2:keyseed; 
	skgen2(r1) = skgen2(r2) <=(Penccoll)=> r1 = r2.

(* Signatures *)

proba Psign.
proba Psigncoll.

fun sign(blocksize, key, seed): signature.
fun sskgen(keyseed):key.
fun spkgen(keyseed):key.
fun check(blocksize, key, signature): bool.

fun sign2(blocksize, key, seed): signature.
fun sskgen2(keyseed):key.
fun spkgen2(keyseed):key.
fun check2(blocksize, key, signature): bool.

forall m:blocksize, r:keyseed, r2:seed; 
	check(m, spkgen(r), sign(m, sskgen(r), r2)) = true.
forall m:blocksize, r:keyseed, r2:seed; 
	check2(m, spkgen2(r), sign2(m, sskgen2(r), r2)) = true.

equiv  !N3 new r: keyseed; (() N -> spkgen(r),
			    (x: blocksize) N2 -> new r2: seed; sign(x, sskgen(r), r2)),
       (m: blocksize, y: key, si: signature) N4 -> check(m, y, si) [all]
     <=(Psign)=>
       !N3 new r: keyseed; (() N -> spkgen2(r),
			    (x: blocksize) N2 -> new r2: seed; sign2(x, sskgen2(r), r2)),
       (m: blocksize, y: key, si: signature) N4 -> 
		find j <= N2, k <= N3 suchthat defined(x[j,k],r[k]) && y = spkgen2(r[k]) && m = x[j,k] && check2(m, y, si) then true else
		find k <= N3 suchthat defined(r[k]) && y = spkgen2(r[k]) then false else
		check(m,y,si).

collision new r1:keyseed; new r2:keyseed; 
	spkgen(r1) = spkgen(r2) <=(Psigncoll)=> r1 = r2.
collision new r1:keyseed; new r2:keyseed; 
	spkgen2(r1) = spkgen2(r2) <=(Psigncoll)=> r1 = r2.
collision new r1:keyseed; new r2:keyseed; 
	sskgen(r1) = sskgen(r2) <=(Psigncoll)=> r1 = r2.
collision new r1:keyseed; new r2:keyseed; 
	sskgen2(r1) = sskgen2(r2) <=(Psigncoll)=> r1 = r2.

(* Queries *)

query secret NaA.
query secret NaB.
query secret NbA.
query secret NbB.

const c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15: channel.
const start, yield, finish: channel.
const A : host.
const B : host.

let processA =
	in(c1, hostX: host);
	out(c2, (A, hostX));
	in(c3, (pkX: key, =hostX, ms: signature));
	if check(concat3(pkX, hostX), pkS, ms) then
	(* Message 3 *)
        new Na: nonce;
	new r3: seed;
        out(c4, enc(concat1(Na, A), pkX, r3));
	(* Message 6 *)
        in(c5, m: bitstring);
	let injbot(concat2(=Na, Nb, =hostX)) = dec(m, skA) in
	(* Message 7 *)
	new r4: seed;
	out(c6, enc(pad(Nb), pkX, r4));
	(* OK *)
	in(finish, =());
	if hostX = B then
	let NaA:nonce = Na in 
	let NbA:nonce = Nb in 0.

let processB =
	(* Message 3 *)
	in(c7, m:bitstring);
	let injbot(concat1(Na, hostY)) = dec(m, skB) in
	out(c8, (B, hostY));
	in(c9, (pkY: key, =hostY, ms: signature));
	if check(concat3(pkY, hostY), pkS, ms) then
	(* Message 6 *)
	new Nb: nonce;
	new r5: seed;
	out(c10, enc(concat2(Na, Nb, B), pkY, r5));
	(* Message 7 *)
	in(c11, m3: bitstring);
	let injbot(pad(=Nb)) = dec(m3, skB) in
	(* OK *)
	if hostY = A then
	let NaB: nonce = Na in
	let NbB: nonce = Nb in 0.

let processK =
	in(c12, (Khost: host, Kkey: key));
	0.

let processS = 
	in(c13, (h1: host, h2: host));
	if h2 = A then
		new r3: seed;
		out(c14, (pkA, h2, sign(concat3(pkA, h2), skS, r3)))
	else if h2 = B then
		new r3: seed;
		out(c14, (pkB, h2, sign(concat3(pkB, h2), skS, r3)))
	else
		find j2 <= N2 suchthat defined(Khost[j2],Kkey[j2]) && (Khost[j2] = h2) then
		new r3: seed;
		out(c14, (Kkey[j2], h2, sign(concat3(Kkey[j2], h2), skS, r3))).

process 
	in(start, =());
	new rkA: keyseed;
	let pkA = pkgen(rkA) in
	let skA = skgen(rkA) in
	new rkB: keyseed;
	let pkB = pkgen(rkB) in
	let skB = skgen(rkB) in
	new rkS: keyseed;
	let pkS = spkgen(rkS) in
	let skS = sskgen(rkS) in
	out(c15, (pkA, pkB, pkS));
	((! N processA) |
	 (! N processB) | 
	 (! N processS) |
	 (! N2 processK))

