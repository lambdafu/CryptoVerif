forall x:bool; not(not(x)) = x.
forall x:bool,y:bool; (not(x && y)) = (not(x) || not(y)).
forall x:bool,y:bool; (not(x || y)) = (not(x) && not(y)).
forall ; not(true) = false.
forall ; not(false) = true.

const bottom:bitstringbot.

(***************************** Symmetric encryption *********************************************)


(* IND-CPA probabilistic symmetric encryption 
   keyseed: type of key seeds, must be "fixed" (to be able to generate random numbers from it), typically large.
   key: type of keys
   cleartext: type of cleartexts
   ciphertext: type of ciphertexts
   seed: type of random seeds for encryption, must be "fixed"

   kgen: key generation function 
   enc: encryption function
   dec: decryption function
   injbot: natural injection from cleartext to bitstringbot
   Z: function that returns for each cleartext a cleartext of the same length consisting only of zeroes.

   Penc: probability of breaking the IND-CPA property

   The types keyseed, key, cleartext, ciphertext, seed and the probability Penc must be declared before this
   macro is expanded. The functions kgen, enc, dec, injbot, and Z are declared by this macro. They not must be
   declared elsewhere, and they can be used only after expanding the macro.
*)

define IND_CPA_sym_enc(keyseed, key, cleartext, ciphertext, seed, kgen, enc, dec, injbot, Z, Penc) { 

param N, N2.

fun enc(cleartext, key, seed): ciphertext.
fun kgen(keyseed):key.
fun dec(ciphertext, key): bitstringbot.

fun enc2(cleartext, key, seed): ciphertext.
fun kgen2(keyseed):key.

fun injbot(cleartext):bitstringbot [compos].
(* The function Z returns for each bitstring, a bitstring
   of the same length, consisting only of zeroes. *)
fun Z(cleartext):cleartext.

forall x:cleartext; injbot(x) <> bottom.
forall m:cleartext, r:keyseed, r2:seed; 
	dec(enc(m, kgen(r), r2), kgen(r)) = injbot(m).

equiv  ! N2 new r: keyseed; ((x:cleartext) N -> new r2: seed; enc(x, kgen(r), r2)) 
     <=(N2 * Penc(time, N, maxlength(x)))=> 
       ! N2 new r: keyseed; ((x:cleartext) N -> new r2: seed; enc2(Z(x), kgen2(r), r2)).

}


(* IND-CPA and INT-CTXT probabilistic symmetric encryption 
   keyseed: type of key seeds, must be "fixed" (to be able to generate random numbers from it), typically large.
   key: type of keys
   cleartext: type of cleartexts
   ciphertext: type of ciphertexts
   seed: type of random seeds for encryption, must be "fixed"

   kgen: key generation function 
   enc: encryption function
   dec: decryption function
   injbot: natural injection from cleartext to bitstringbot
   Z: function that returns for each cleartext a cleartext of the same length consisting only of zeroes.

   Penc: probability of breaking the IND-CPA property
   Pencctxt: probability of breaking the INT-CTXT property

   The types keyseed, key, cleartext, ciphertext, seed and the probabilities Penc, Pencctxt must be declared before this
   macro is expanded. The functions kgen, enc, dec, injbot, and Z are declared by this macro. They not must be
   declared elsewhere, and they can be used only after expanding the macro.
*)


define IND_CPA_INT_CTXT_sym_enc(keyseed, key, cleartext, ciphertext, seed, kgen, enc, dec, injbot, Z, Penc, Pencctxt) { 

param N, N2, N3.

fun enc(cleartext, key, seed): ciphertext.
fun kgen(keyseed):key.
fun dec(ciphertext, key): bitstringbot.

fun enc2(cleartext, key, seed): ciphertext.
fun kgen2(keyseed):key.

fun injbot(cleartext):bitstringbot [compos].
forall x:cleartext; injbot(x) <> bottom.

(* The function Z returns for each bitstring, a bitstring
   of the same length, consisting only of zeroes. *)
fun Z(cleartext):cleartext.

forall m:cleartext, r:keyseed, r2:seed; 
	dec(enc(m, kgen(r), r2), kgen(r)) = injbot(m).

	(* IND-CPA *)

equiv  ! N2 new r: keyseed; ((x:cleartext) N -> new r2: seed; enc(x, kgen2(r), r2)) 
     <=(N2 * Penc(time, N, maxlength(x)))=> 
       ! N2 new r: keyseed; ((x:cleartext) N -> new r2: seed; enc2(Z(x), kgen2(r), r2)).

	(* INT-CTXT *)

equiv ! N2 new r: keyseed; ((x:cleartext) N -> new r2: seed; enc(x, kgen(r), r2),
			    (y:ciphertext) N3 -> dec(y,kgen(r))) 
     <=(N2 * Pencctxt(time, N, N3, maxlength(x), maxlength(y)))=> 
      ! N2 new r: keyseed; ((x:cleartext) N -> new r2: seed; let z:ciphertext =  enc(x, kgen2(r), r2) in z,
			    (y:ciphertext) N3 -> find j <= N suchthat defined(x[j],r2[j],z[j]) && z[j] = y then injbot(x[j]) else bottom).

}

(* IND-CCA2 and INT-PTXT probabilistic symmetric encryption 
   keyseed: type of key seeds, must be "fixed" (to be able to generate random numbers from it), typically large.
   key: type of keys
   cleartext: type of cleartexts
   ciphertext: type of ciphertexts
   seed: type of random seeds for encryption, must be "fixed"

   kgen: key generation function 
   enc: encryption function
   dec: decryption function
   injbot: natural injection from cleartext to bitstringbot
   Z: function that returns for each cleartext a cleartext of the same length consisting only of zeroes.

   Penc: probability of breaking the IND-CCA2 property
   Pencptxt: probability of breaking the INT-PTXT property

   The types keyseed, key, cleartext, ciphertext, seed and the probabilities Penc, Pencctxt must be declared before this
   macro is expanded. The functions kgen, enc, dec, injbot, and Z are declared by this macro. They not must be
   declared elsewhere, and they can be used only after expanding the macro.
*)

define IND_CCA2_INT_PTXT_sym_enc(keyseed, key, cleartext, ciphertext, seed, kgen, enc, dec, injbot, Z, Penc, Pencptxt) { 

param N, N2, N3.

fun enc(cleartext, key, seed): ciphertext.
fun kgen(keyseed):key.
fun dec(ciphertext, key): bitstringbot.

fun enc2(cleartext, key, seed): ciphertext.
fun kgen2(keyseed):key.
fun dec2(ciphertext, key): bitstringbot.

fun injbot(cleartext):bitstringbot [compos].
forall x:cleartext; injbot(x) <> bottom.

(* The function Z returns for each bitstring, a bitstring
   of the same length, consisting only of zeroes. *)
fun Z(cleartext):cleartext.

forall m:cleartext, r:keyseed, r2:seed; 
	dec(enc(m, kgen(r), r2), kgen(r)) = injbot(m).

	(* IND-CCA2 *)

equiv  ! N2 new r: keyseed; ((x:cleartext) N -> new r2: seed; enc(x, kgen(r), r2),
                             (y:ciphertext) N3 -> dec2(y,kgen(r)))
     <=(N2 * Penc(time, N, N3, maxlength(x), maxlength(y)))=> 
       ! N2 new r: keyseed; ((x:cleartext) N -> new r2: seed; let z:ciphertext = enc2(Z(x), kgen2(r), r2) in z,
			     (y:ciphertext) N3 -> find j <= N suchthat defined(x[j],r2[j],z[j]) && y = z[j] then injbot(x[j]) else dec2(y, kgen2(r))).

	(* INT-PTXT *)

equiv ! N2 new r: keyseed; ((x:cleartext) N -> new r2: seed; enc(x, kgen(r), r2),
			    (y:ciphertext) N3 -> dec(y,kgen(r))) 
     <=(N2 * Pencptxt(time, N, N3, maxlength(x), maxlength(y)))=> 
      ! N2 new r: keyseed; ((x:cleartext) N -> new r2: seed; enc(x, kgen(r), r2),
			    (y:ciphertext) N3 -> 
				let z = dec2(y, kgen(r)) in
                                find j <= N suchthat defined(x[j]) && z = injbot(x[j]) then injbot(x[j]) else bottom).

}

(* SPRP block cipher
   keyseed: type of key seeds, must be "fixed" (to be able to generate random numbers from it), typically large.
   key: type of keys
   blocksize: type of the input and output of the cipher, must be "fixed" and "large".
   (The modeling of SPRP block ciphers is not perfect in that, in order to encrypt
   a new message, one chooses a fresh random number, not necessarily different from previously
   generated random numbers. Then CryptoVerif needs to eliminate collisions between those 
   random numbers, so blocksize must really be "large".)

   kgen: key generation function 
   enc: encryption function
   dec: decryption function

   Penc: probability of breaking the SPRP property

   The types keyseed, key, blocksize and the probability Penc must be declared before this
   macro is expanded. The functions kgen, enc, dec are declared by this macro. They not must be
   declared elsewhere, and they can be used only after expanding the macro.

 *)


define SPRP_cipher(keyseed, key, blocksize, kgen, enc, dec, Penc) {

param N, N2, N3.

fun enc(blocksize, key): blocksize.
fun kgen(keyseed):key.
fun dec(blocksize, key): blocksize.

forall m:blocksize, r:keyseed; 
	dec(enc(m, kgen(r)), kgen(r)) = m.

equiv  !N3 new r: keyseed; ((x:blocksize) N -> enc(x, kgen(r)),
			(m:blocksize) N2 -> dec(m, kgen(r)))
     <=(N3 * (Penc(time, N, N2) + (N+N2)*(N+N2-1)/|blocksize|))=>
       !N3 new r: keyseed; ((x:blocksize) N -> 
		find j<=N suchthat defined(x[j],r2[j]) && otheruses(r2[j]) && x = x[j] then r2[j] 
		orfind k<=N2 suchthat defined(r4[k],m[k]) && otheruses(r4[k]) && x = r4[k] then m[k] 
		else new r2: blocksize; r2,
			(m:blocksize) N2 ->
		find j<=N suchthat defined(x[j],r2[j]) && otheruses(r2[j]) && m = r2[j] then x[j] 
		orfind k<=N2 suchthat defined(r4[k],m[k]) && otheruses(r4[k]) && m = m[k] then r4[k] 
		else new r4: blocksize; r4).

}

(* PRP block cipher
   keyseed: type of key seeds, must be "fixed" (to be able to generate random numbers from it), typically large.
   key: type of keys
   blocksize: type of the input and output of the cipher, must be "fixed" and "large".
   (The modeling of PRP block ciphers is not perfect in that, in order
   to encrypt a new message, one chooses a fresh random number, not
   necessarily different from previously generated random numbers. In
   other words, we model a PRF rather than a PRP, and apply the
   PRF/PRP switching lemma to make sure that this is sound. Then
   CryptoVerif needs to eliminate collisions between those random
   numbers, so blocksize must really be "large".)

   kgen: key generation function 
   enc: encryption function
   dec: decryption function

   Penc: probability of breaking the PRP property

   The types keyseed, key, blocksize and the probability Penc must be declared before this
   macro is expanded. The functions kgen, enc, dec are declared by this macro. They not must be
   declared elsewhere, and they can be used only after expanding the macro.

 *)


define PRP_cipher(keyseed, key, blocksize, kgen, enc, dec, Penc) {

param N, N2, N3.

fun enc(blocksize, key): blocksize.
fun kgen(keyseed):key.
fun dec(blocksize, key): blocksize.

forall m:blocksize, r:keyseed; 
	dec(enc(m, kgen(r)), kgen(r)) = m.

equiv  !N3 new r: keyseed; (x:blocksize) N -> enc(x, kgen(r))
     <=(N3 * (Penc(time, N) + N * (N-1) / |blocksize|))=>
       !N3 new r: keyseed; (x:blocksize) N -> 
		find j<=N suchthat defined(x[j],r2[j]) && otheruses(r2[j]) && x = x[j] then r2[j] 
		else new r2: blocksize; r2.

}

(*************************************** MACs ***************************************)


(* UF-CMA mac 
   mkeyseed: type of key seeds, must be "fixed" (to be able to generate random numbers from it), typically large.
   mkey: type of keys
   macinput: type of inputs of MACs
   macres: type of result of MACs

   mkgen: key generation function 
   mac: MAC function
   check: verification function

   Pmac: probability of breaking the UF-CMA property

   The types mkeyseed, mkey, macinput, macres and the probability Pmac must be declared before this
   macro is expanded. The functions mkgen, mac, check are declared by this macro. They not must be
   declared elsewhere, and they can be used only after expanding the macro.

*)

define UF_CMA_mac(mkeyseed, mkey, macinput, macres, mkgen, mac, check, Pmac) {

param N, N2, N3.

fun mac(macinput, mkey):macres.
fun check(macinput, mkey, macres): bool.
fun mkgen(mkeyseed):mkey.

fun mac2(macinput, mkey):macres.
fun check2(macinput, mkey, macres): bool.
fun mkgen2(mkeyseed):mkey.

forall m:macinput, r:mkeyseed;
	check(m, mkgen(r), mac(m, mkgen(r))).
forall m:macinput, r:mkeyseed;
	check2(m, mkgen2(r), mac2(m, mkgen2(r))).

equiv ! N3 new r: mkeyseed;(
	 (x: macinput) N -> mac(x, mkgen(r)),
	 (m: macinput, ma: macres) N2 -> check(m, mkgen(r), ma))
     <=(N3 * Pmac(time, N, N2, max(maxlength(x), maxlength(m))))=>
      ! N3 new r: mkeyseed;(
	 (x: macinput) N -> mac2(x, mkgen2(r)),
	 (m: macinput, ma: macres) N2 -> 
	    find j <= N suchthat defined(x[j]) && (m = x[j]) && check2(x[j], mkgen2(r), ma) then true else false).

}

(* SUF-CMA mac (strongly unforgeable MAC)
   The difference between a UF-CMA MAC and a SUF-CMA MAC is that, for a UF-CMA MAC, the adversary may
   easily forge a new MAC for a message for which he has already seen a MAC. Such a forgery is guaranteed 
   to be hard for a SUF-CMA MAC.
 
   mkeyseed: type of key seeds, must be "fixed" (to be able to generate random numbers from it), typically large.
   mkey: type of keys
   macinput: type of inputs of MACs
   macres: type of result of MACs

   mkgen: key generation function 
   mac: MAC function
   check: verification function

   Pmac: probability of breaking the SUF-CMA property

   The types mkeyseed, mkey, macinput, macres and the probability Pmac must be declared before this
   macro is expanded. The functions mkgen, mac, check are declared by this macro. They not must be
   declared elsewhere, and they can be used only after expanding the macro.

*)

define SUF_CMA_mac(mkeyseed, mkey, macinput, macres, mkgen, mac, check, Pmac) {

param N, N2, N3.

fun mac(macinput, mkey):macres.
fun check(macinput, mkey, macres): bool.
fun mkgen(mkeyseed):mkey.

fun mac2(macinput, mkey):macres.
fun mkgen2(mkeyseed):mkey.

forall m:macinput, r:mkeyseed;
	check(m, mkgen(r), mac(m, mkgen(r))).

equiv ! N3 new r: mkeyseed;(
	 (x: macinput) N -> mac(x, mkgen(r)),
	 (m: macinput, ma: macres) N2 -> check(m, mkgen(r), ma))
     <=(N3 * Pmac(time, N, N2, max(maxlength(x), maxlength(m))))=>
      ! N3 new r: mkeyseed;(
	 (x: macinput) N -> mac2(x, mkgen2(r)),
	 (m: macinput, ma: macres) N2 -> 
	    find j <= N suchthat defined(x[j]) && (m = x[j]) && ma = mac2(x[j], mkgen2(r)) then true else false).

}

(******************************* Public-key encryption *******************************)

(* IND-CCA2 probabilistic public-key encryption 
   keyseed: type of key seeds, must be "fixed" (to be able to generate random numbers from it), typically large.
   pkey: type of public keys
   skey: type of secret keys
   cleartext: type of cleartexts, must be "bounded" or "fixed" (the encryptions of *all* cleartexts of any length
   	      are assumed to be indistinguishable from each other).
   ciphertext: type of ciphertexts
   seed: type of random seeds for encryption, must be "fixed"

   pkgen: public-key generation function 
   skgen: secret-key generation function
   enc: encryption function
   dec: decryption function
   injbot: natural injection from cleartext to bitstringbot
   Z: a constant cleartext

   Penc: probability of breaking the IND-CCA2 property
   Penccoll: probability of collision between independently generated keys

   The types keyseed, pkey, skey, cleartext, ciphertext, seed and the
   probabilities Penc, Penccoll must be declared before this macro is
   expanded. The functions pkgen, skgen, enc, dec, injbot, and the
   constant Z are declared by this macro. They not must be declared
   elsewhere, and they can be used only after expanding the macro. 
*)


define IND_CCA2_public_key_enc(keyseed, pkey, skey, cleartext, ciphertext, seed, skgen, pkgen, enc, dec, injbot, Z, Penc, Penccoll) {

param N, N2, N3, N4.

fun enc(cleartext, pkey, seed): ciphertext.
fun skgen(keyseed):skey.
fun pkgen(keyseed):pkey.
fun dec(ciphertext, skey): bitstringbot.

fun enc2(cleartext, pkey, seed): ciphertext.
fun skgen2(keyseed):skey.
fun pkgen2(keyseed):pkey.
fun dec2(ciphertext, skey): bitstringbot.

fun injbot(cleartext):bitstringbot [compos].

const Z:cleartext.

forall m:cleartext, r:keyseed, r2:seed; 
	dec(enc(m, pkgen(r), r2), skgen(r)) = injbot(m).
forall m:cleartext, r:keyseed, r2:seed; 
	dec2(enc2(m, pkgen2(r), r2), skgen2(r)) = injbot(m).

equiv  !N3 new r: keyseed; (() [2] -> pkgen(r),
			    (m:ciphertext) N2 -> dec(m, skgen(r)),
                            (x1:cleartext) N -> new r1:seed; enc(x1, pkgen(r),r1)),
       (x:cleartext, y:pkey) N4 [3] -> new r2:seed; enc(x,y,r2) [all]
     <=(N3 * (N4+N) * Penc(time, N2))=> 
       !N3 new r: keyseed; (() -> pkgen2(r),
			    (m:ciphertext) N2 -> 
                find j <= N suchthat defined(m1[j],x1[j]) && m = m1[j] then injbot(x1[j]) else
		find j <= N4 suchthat defined(m2[j],y[j],x[j]) &&
		y[j] = pkgen2(r) && m = m2[j] then injbot(x[j]) else dec2(m, skgen2(r)),
		            (x1:cleartext) N -> 
                        new r1:seed; 
			let m1:ciphertext = enc2(Z, pkgen2(r), r1) in
			m1),
       (x:cleartext, y:pkey) N4 -> 
		find k <= N3 suchthat defined(r[k]) && y = pkgen2(r[k]) then
			(new r2:seed; 
			let m2:ciphertext = enc2(Z, y, r2) in
			m2)
		else new r3:seed; enc(x,y,r3).

collision new r1:keyseed; new r2:keyseed; 
	pkgen(r1) = pkgen(r2) <=(Penccoll)=> r1 = r2.
collision new r1:keyseed; new r2:keyseed; 
	pkgen2(r1) = pkgen2(r2) <=(Penccoll)=> r1 = r2.
collision new r1:keyseed; new r2:keyseed; 
	skgen(r1) = skgen(r2) <=(Penccoll)=> r1 = r2.
collision new r1:keyseed; new r2:keyseed; 
	skgen2(r1) = skgen2(r2) <=(Penccoll)=> r1 = r2.

}

(*************************************** Signatures ******************************)

(* UF-CMA probabilistic signatures 
   keyseed: type of key seeds, must be "fixed" (to be able to generate random numbers from it), typically large.
   pkey: type of public keys
   skey: type of secret keys
   signinput: type of inputs of signatures
   signature: type of signatures
   seed: type of random seeds for signatures, must be "fixed"

   pkgen: public-key generation function 
   skgen: secret-key generation function
   sign: signature function
   check: verification function

   Psign: probability of breaking the UF-CMA property
   Psigncoll: probability of collision between independently generated keys

   The types keyseed, pkey, skey, signinput, signature, seed and the
   probabilities Psign, Psigncoll must be declared before this macro
   is expanded. The functions pkgen, skgen, sign, and check are
   declared by this macro. They not must be declared elsewhere, and
   they can be used only after expanding the macro.  
*)

define UF_CMA_signature(keyseed, pkey, skey, signinput, signature, seed, skgen, pkgen, sign, check, Psign, Psigncoll) {

param N, N2, N3, N4.

fun sign(signinput, skey, seed): signature.
fun skgen(keyseed):skey.
fun pkgen(keyseed):pkey.
fun check(signinput, pkey, signature): bool.

fun sign2(signinput, skey, seed): signature.
fun skgen2(keyseed):skey.
fun pkgen2(keyseed):pkey.
fun check2(signinput, pkey, signature): bool.

forall m:signinput, r:keyseed, r2:seed; 
	check(m, pkgen(r), sign(m, skgen(r), r2)) = true.
forall m:signinput, r:keyseed, r2:seed; 
	check2(m, pkgen2(r), sign2(m, skgen2(r), r2)) = true.

equiv  !N3 new r: keyseed; (() [2] -> pkgen(r),
			    (x: signinput) N2 -> new r2: seed; sign(x, skgen(r), r2),
			    (m1: signinput, si1:signature) N -> check(m1, pkgen(r), si1)),
       (m: signinput, y: pkey, si: signature) N4 [3] -> check(m, y, si) [all]
     <=(N3 * Psign(time, N2, maxlength(x)))=>
       !N3 new r: keyseed; (() -> pkgen2(r),
			    (x: signinput) N2 -> new r2: seed; sign2(x, skgen2(r), r2),
			    (m1: signinput, si1:signature) N -> 
                              find j <= N2 suchthat defined(x[j]) && m1 = x[j] && check2(m1, pkgen2(r), si1) then true else false),
       (m: signinput, y: pkey, si: signature) N4 -> 
		find j <= N2, k <= N3 suchthat defined(x[j,k],r[k]) && y = pkgen2(r[k]) && m = x[j,k] && check2(m, y, si) then true else
		find k <= N3 suchthat defined(r[k]) && y = pkgen2(r[k]) then false else
		check(m,y,si).

collision new r1:keyseed; new r2:keyseed; 
	pkgen(r1) = pkgen(r2) <=(Psigncoll)=> r1 = r2.
collision new r1:keyseed; new r2:keyseed; 
	pkgen2(r1) = pkgen2(r2) <=(Psigncoll)=> r1 = r2.
collision new r1:keyseed; new r2:keyseed; 
	skgen(r1) = skgen(r2) <=(Psigncoll)=> r1 = r2.
collision new r1:keyseed; new r2:keyseed; 
	skgen2(r1) = skgen2(r2) <=(Psigncoll)=> r1 = r2.

}

(* SUF-CMA probabilistic signatures 
   keyseed: type of key seeds, must be "fixed" (to be able to generate random numbers from it), typically large.
   pkey: type of public keys
   skey: type of secret keys
   signinput: type of inputs of signatures
   signature: type of signatures
   seed: type of random seeds for signatures, must be "fixed"

   pkgen: public-key generation function 
   skgen: secret-key generation function
   sign: signature function
   check: verification function

   Psign: probability of breaking the UF-CMA property
   Psigncoll: probability of collision between independently generated keys

   The types keyseed, pkey, skey, signinput, signature, seed and the
   probabilities Psign, Psigncoll must be declared before this macro
   is expanded. The functions pkgen, skgen, sign, and check are
   declared by this macro. They not must be declared elsewhere, and
   they can be used only after expanding the macro.  
*)

define SUF_CMA_signature(keyseed, pkey, skey, signinput, signature, seed, skgen, pkgen, sign, check, Psign, Psigncoll) {

param N, N2, N3, N4.

fun sign(signinput, skey, seed): signature.
fun skgen(keyseed):skey.
fun pkgen(keyseed):pkey.
fun check(signinput, pkey, signature): bool.

fun sign2(signinput, skey, seed): signature.
fun skgen2(keyseed):skey.
fun pkgen2(keyseed):pkey.

forall m:signinput, r:keyseed, r2:seed; 
	check(m, pkgen(r), sign(m, skgen(r), r2)) = true.

equiv  !N3 new r: keyseed; (() [2] -> pkgen(r),
			    (x: signinput) N2 -> new r2: seed; sign(x, skgen(r), r2),
			    (m1: signinput, si1:signature) N -> check(m1, pkgen(r), si1)),
       (m: signinput, y: pkey, si: signature) N4 [3] -> check(m, y, si) [all]
     <=(N3 * Psign(time, N2, maxlength(x)))=>
       !N3 new r: keyseed; (() -> pkgen2(r),
			    (x: signinput) N2 -> new r2: seed; sign2(x, skgen2(r), r2),
			    (m1: signinput, si1:signature) N -> 
                              find j <= N2 suchthat defined(x[j],r2[j]) && m1 = x[j] && si1 = sign2(x[j], skgen2(r), r2[j]) then true else false),
       (m: signinput, y: pkey, si: signature) N4 -> 
		find j <= N2, k <= N3 suchthat defined(x[j,k],r[k],r2[j,k]) && y = pkgen2(r[k]) && m = x[j,k] && si = sign2(x[j,k], skgen2(r[k]), r2[j,k]) then true else
		find k <= N3 suchthat defined(r[k]) && y = pkgen2(r[k]) then false else
		check(m,y,si).

collision new r1:keyseed; new r2:keyseed; 
	pkgen(r1) = pkgen(r2) <=(Psigncoll)=> r1 = r2.
collision new r1:keyseed; new r2:keyseed; 
	pkgen2(r1) = pkgen2(r2) <=(Psigncoll)=> r1 = r2.
collision new r1:keyseed; new r2:keyseed; 
	skgen(r1) = skgen(r2) <=(Psigncoll)=> r1 = r2.
collision new r1:keyseed; new r2:keyseed; 
	skgen2(r1) = skgen2(r2) <=(Psigncoll)=> r1 = r2.

}

(******************************* Hash functions ****************************)

(* Hash function in the random oracle model
   hashinput: type of the input of the hash function
   hashoutput: type of the output of the hash function, must be "fixed"

   hash: the hash function.
   hashoracle: a process that allows the adversary to call the hash function.
   WARNING: the hash oracle must be made available to the adversary,
   by including "hashoracle" in the executed process.
   qH: number of requests to the hash oracle

   The types hashinput and hashoutput must be declared before this macro.
   The function hash, the process hashoracle, and the parameter qH are 
   defined by this macro. They not must be declared elsewhere, and
   they can be used only after expanding the macro.


 *)

define ROM_hash(hashinput, hashoutput, hash, hashoracle, qH) {

param N, qH.

fun hash(hashinput):hashoutput.

equiv (x:hashinput) N -> hash(x) [all]
      <=(0)=>
      (x:hashinput) N -> find j <= N suchthat defined(x[j],r[j]) && otheruses(r[j]) && x= x[j] then r[j] else
			 new r:hashoutput; r.

channel c1, c2.

let hashoracle = ! qH in(c1, x:hashinput); out(c2, hash(x)). 

}

(* Collision resistant hash function 
   key: type of the key of the hash function, must be "fixed"
   hashinput: type of the input of the hash function
   hashoutput: type of the output of the hash function

   hash: the hash function.
   Phash: probability of breaking collision resistance.
   WARNING: A collision resistant hash function is a keyed hash function.
   The key must be generated once and for all at the beginning of the game,
   and immediately made available to the adversary.

   The types key, hashinput, hashoutput, and the probability Phash
   must be declared before this macro.  The function hash is defined
   by this macro. It not must be declared elsewhere, and it can be
   used only after expanding the macro.

 *)

define CollisionResistant_hash(key, hashinput, hashoutput, hash, Phash) {

fun hash(key, hashinput):hashoutput.

collision new k:key; forall x:hashinput, y:hashinput;
	h(k,x) = h(k,y) <=(Phash)=> x = y.

}

(********************************* Miscellaneous ***************************)

(* One-way trapdoor permutation 
   seed: type of random seeds to generate keys, must be "fixed"
   pkey: type of public keys
   skey: type of secret keys
   D: type of the input and output of the permutation, must be "fixed"

   pkgen: public-key generation function
   skgen: secret-key generation function
   f: the permutation (taking as argument the public key)
   invf: the inverse permutation of f (taking as argument the secret key,
         i.e. the trapdoor)

   POW: probability of breaking the one-wayness property

   The types seed, pkey, skey, D, and the probability POW must be
   declared before this macro. The functions pkgen, skgen, f, invf
   are defined by this macro. They not must be declared elsewhere, and
   they can be used only after expanding the macro. 
*)

define OW_trapdoor_perm(seed, pkey, skey, D, pkgen, skgen, f, invf, POW) {

param nK, nf, n2.

const mark:bitstring.
fun pkgen(seed):pkey.
fun pkgen'(seed):pkey.
fun skgen(seed):skey.
fun f(pkey, D):D.
fun f'(pkey, D):D.
fun invf(skey, D):D.

(* invf is the inverse of f *)

forall r:seed, x:D; invf(skgen(r), f(pkgen(r), x)) = x.

(* f is the inverse of invf *)

forall r:seed, x:D; f(pkgen(r), invf(skgen(r), x)) = x.

(* Injectivity of f *)

forall k:pkey, x:D, x':D; (f(k,x) = f(k,x')) = (x = x').
forall k:pkey, x:D, x':D; (f'(k,x) = f'(k,x')) = (x = x').

(* injectivity of invf *)

forall k:skey, x:D, x':D; (invf(k,x) = invf(k,x')) = (x = x').

(* f/invf are inverse permutations; use this to remove some
   occurrences of invf in equality tests *)

forall r:seed, x:D, x':D; 
	(x' = invf(skgen(r),x)) = (f(pkgen(r),x') = x).

(* We can permute the distribution, for uniformly distributed random
   numbers x. Do that only when x is used in invf(skgen(r),x) *)

equiv !nK new r: seed; (
	() -> pkgen(r),
	!nf new x:D; (() -> invf(skgen(r),x), () -> x))
<=(0)=>
      !nK new r: seed; (
	() -> pkgen(r),
	!nf new x:D; (() -> x, () -> f(pkgen(r), x))).

(* One-wayness *)

equiv !nK new r: seed; (
	() -> pkgen(r),
	!nf new x: D; (() -> f(pkgen(r), x),
		       (x':D) n2 -> x' = x,
		       () -> x))
<=(nK * nf * POW(time + (nK-1) * time(pkgen) + (nf*nK-1) * time(f)))=>
      !nK new r: seed; (
	() -> pkgen'(r),
	!nf new x: D; (() -> f'(pkgen'(r), x),
		       (x':D) n2 -> if defined(k) then x' = x else false,
		       () -> let k:bitstring = mark in x)).

}

(* Pseudo random function (PRF) 
   keyseed: type of key seeds, must be "fixed" (to be able to generate random numbers from it), typically large.
   key: type of keys
   input: type of the input of the PRF.
   output: type of the output of the PRF, must be "fixed".

   kgen: key generation function 
   f: PRF function

   Pprf: probability of breaking the PRF property

   The types keyseed, key, input, output and the probability Pprf must be declared before this
   macro is expanded. The functions kgen and f are declared by this macro. They not must be
   declared elsewhere, and they can be used only after expanding the macro.

*)

define PRF(keyseed, key, input, output, kgen, f, Pprf) {

param N, N2, N3.

fun f(key, input): output.
fun kgen(keyseed):key.

equiv  !N3 new r: keyseed; (x:input) N -> f(kgen(r), x)
     <=(N3 * Pprf(time, N))=>
       !N3 new r: keyseed; (x:input) N -> 
		find j<=N suchthat defined(x[j],r2[j]) && otheruses(r2[j]) && x = x[j] then r2[j] 
		else new r2: output; r2.

}


define Database(option,Some,None, guid,db,unit,key,value, newdb,insert,select)
{
fun Some(value):option[compos].
fun None():option[compos].

forall x:bitstring;
  Some(x)<>None.


const un:unit.

fun newdb(guid):db[compos].
fun insert(db,key,value):unit[compos].
fun select(db,key):option[compos]. (* NOTE: to avoid that simplify duplicates calls to select when
                                      we have code "let F = select(...) in let Some(...) = F in ...",
				      the [compos] option should be removed --- and it should be removed
				      for a correct semantics. *)

param N.
param N1.
param N2.

proba Pdb.
equiv ! N  new d: guid; ((k:key,v:value) N1 -> insert(newdb(d),k,v),
      	                 (k':key) N2 ->       select(newdb(d),k'))
     <=(N * Pdb(N2))=> 
      ! N  new d: guid;  ((k:key,v:value) N1 -> un,
      	                 (k':key) N2 -> find j <= N1 suchthat defined(k[j],v[j]) && k'=k[j] then Some(v[j]) else None).

}


define public_key_enc(keyseed, pkey, skey, cleartext, ciphertext, seed, skgen, pkgen, enc, dec, injbot, Z, Penc, Penccoll)
{
fun enc(cleartext, pkey, seed): ciphertext.
fun skgen(keyseed):skey.
fun pkgen(keyseed):pkey.
fun dec(ciphertext, skey): bitstringbot.
fun injbot(cleartext):bitstringbot [compos].
}


define mac(mkeyseed, mkey, macinput, macres, mkgen, mac, check, Pmac) 
{
fun mac(macinput, mkey):macres.
fun check(macinput, mkey, macres): bool.
fun mkgen(mkeyseed):mkey.
}
