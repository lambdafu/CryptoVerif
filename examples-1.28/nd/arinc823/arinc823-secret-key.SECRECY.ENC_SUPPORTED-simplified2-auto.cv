(* ARINC 823 
AMS protocol using a shared secret key
described in Attachment 8 of the ARINC specification 823 Part I. 

CryptoVerif model by Bruno Blanchet, INRIA Paris-Rocquencourt. 

Simplifications:
- one MAC size
- compress and encode = identity
- removed ground initiated trigger
- policy always BOTH (except for the first message)
*)

(**** Declarations of types, constants, and function symbols ****)

(* Type for session ids, used internally in the model to distinguish
   each session of the protocol. *)

type session_ids [large, fixed].

(* Type of 32 bits numbers *)

type t_Rand32 [large, fixed]. 

(* Ids 
U = aircraft
V = ground entity *)

type t_id [fixed]. (* 8 bytes = 64 bits entity type, AMS_EntityType *)
const U, V: t_id.

(* AMS Message elements *)

type t_AMS_elem.
type t_software_part_number.
type t_policy_id.

fun buildAMS10_s_init_info(t_software_part_number, t_policy_id, t_id, t_id): t_AMS_elem [compos].
fun buildAMS40_entity_id(t_id, t_id): t_AMS_elem [compos].
const comp_algo_void: t_AMS_elem.

fun payload_with_1_element(t_AMS_elem): bitstring [compos].
fun concat_AMS_element(t_AMS_elem, bitstring): bitstring [compos].

(* Algorithms *)

type t_AMS_AlgID [bounded].
type t_MAClen [bounded].
type t_AuthAlgo [bounded].
type t_EncAlgo [bounded].

fun algo(t_MAClen, t_AuthAlgo, t_EncAlgo): t_AMS_AlgID [compos].

const MAClen32: t_MAClen.
const HMAC_SHA256: t_AuthAlgo.
const AES128_CFB128: t_EncAlgo.

(* Policy types *)

type t_AMS_Policy [fixed]. (* 2 bits *)

const AUTH, BOTH: t_AMS_Policy.

(* Protocol ids *)

type t_AMS_PID [bounded]. (* 1 byte, "1" or "2" *)

const ams_pid1 (* public-key protocol *), ams_pid2 (* shared-key protocol *): t_AMS_PID.

(* Commands *)

type t_Cmd [fixed]. (* 4 bits *)

const Data_IND, Info_IND, DataCnf_IND, Release_REQ, Release_RSP_Minus, 
      Release_RSP_Plus, Init_IND, Init_REQ, Init_RSP_Minus, Init_RSP_Plus,
      Abort_IND: t_Cmd.

(* Counter *)

type t_Count [fixed].

const Count1: t_Count.
const Count_unspecified: t_Count. 
      (* Used as a dummy value to fill the count argument
      	 of event recv_msg when the message is sent unprotected. *)

(* MAC *)

type mac_key [large, fixed].

type t_SHA256_out [large, fixed]. (* 256 bits, output of SHA256 *)

fun MAC(mac_key, bitstring): t_SHA256_out.

fun sessionMAC(t_MAClen, mac_key, bitstring): bitstring.

(* sessionMAC is SUF-CMA *)

fun sessionMAC2(t_MAClen, mac_key, bitstring): bitstring.
param N, N2, N3.
type mac_32bits [fixed].

proba PPRF. 
      (* PPRF(t, qMAC, l, qKDF256, qKDF128) is the probability of 
         distinguishing MAC, KDF256, and KDF128 from independent pseudo-random
	 functions in time t, with qMAC, qKDF256, qKDF128 queries to
	 MAC, KDF256, and KDF128 respectively, with MAC queries of length
	 at most l. *)

equiv suf_cma_truncated32_mac
      ! N3 new k: mac_key;(
	 !N Omac(x: bitstring) := sessionMAC(MAClen32, k, x),
	 !N2 Ocheck(m: bitstring, ma: bitstring) := ma = sessionMAC(MAClen32, k, m))
     <=(N3 * (4*N2/|mac_32bits| + 2*PPRF(time + (N3-1)*(N+N2)*time(sessionMAC,maxlength(x)), N + N2, max(maxlength(x), maxlength(m)), 0, 0)))=> [computational]
      ! N3 new k: mac_key [unchanged];(
	 !N Omac(x: bitstring) := sessionMAC2(MAClen32, k, x),
	 !N2 Ocheck(m: bitstring, ma: bitstring) := 
	    find j <= N suchthat defined(x[j]) && (m = x[j]) && ma = sessionMAC2(MAClen32, k, m) then true else false).

(* Encryption *)

type enc_key [large, fixed]. (* 128 bits *)
type t_IVdata [fixed].

type byte [fixed]. (* 1 byte = 8 bits *)
const CstDN: byte. (* 0x00 *)
const CstUP: byte. (* 0x01 *)
fun buildIVdata(byte, t_Count): t_IVdata [compos].

fun E'(enc_key, t_IVdata, bitstring): bitstring.
fun D'(enc_key, t_IVdata, bitstring): bitstring.

forall k: enc_key, IVdata: t_IVdata, msg: bitstring;
      D'(k, IVdata, E'(k, IVdata, msg)) = msg.

(* encryption is IND-CPA provided IVdata is distinct
   for each encryption *)

proba Penc.
	(* Penc(t, N, l) is the probability of breaking the IND-CPA property of encryption
	   in time t, with N queries to the left-right encryption oracle, of length at most l
	   (for one encryption key). *)

(* Z(x) is a bitstring of the same length as x, containing only zeroes *)
fun Z(bitstring): bitstring.

fun E''(enc_key, t_IVdata, bitstring): bitstring.

event repeated_IVdata.

equiv 
      !N2 new k: enc_key; !N Oenc(IVdata: t_IVdata, msg: bitstring) := E'(k, IVdata, msg)
<=(N2 * Penc(time + (N2-1)*(N*time(E', maxlength(msg)) + N*time(Z, maxlength(msg))), N, maxlength(msg)))=>
      !N2 new k: enc_key; !N Oenc(IVdata: t_IVdata, msg: bitstring) := 
      	      	 	         find i <= N suchthat defined(IVdata[i],r[i]) && IVdata = IVdata[i] then
				     event_abort repeated_IVdata
				 else
				     let r: bitstring = E''(k, IVdata, Z(msg)) in
				     r.

(* Hash function HASH is collision resistant *)

type hash_key [large,fixed].
proba Phash.
expand CollisionResistant_hash(hash_key, bitstring, t_SHA256_out, HASH, Phash).

fun concat_hash(bitstring, t_Rand32): bitstring [compos].

fun KDF256(mac_key, t_SHA256_out, t_id, t_id): mac_key.
fun KDF128(mac_key, t_SHA256_out, t_id, t_id): enc_key.

(* MAC is HMAC_SHA256, it is SUF-CMA;
   KDF256, KDF128 are PRFs, even when they share the same key as the MAC *)

param qMAC, qVer, qKDF256, qKDF128, qColl.
fun MAC2(mac_key, bitstring): t_SHA256_out.

equiv
	! N new k: mac_key;
	(! qMAC O_mac(m: bitstring) := MAC(k, m),
	 ! qVer O_Ver(mv: bitstring, mac: t_SHA256_out) := mac = MAC(k, mv),
	 ! qKDF256 O_KDF256(X2: t_SHA256_out, U2: t_id, V2: t_id) := KDF256(k, X2, U2, V2),
	 ! qKDF128 O_KDF128(X3: t_SHA256_out, U3: t_id, V3: t_id) := KDF128(k, X3, U3, V3))
<=(N * (4 * qVer / |t_SHA256_out| + 
PPRF(time + (N-1)*(qMAC * time(MAC, maxlength(m)) + qVer * time(MAC, maxlength(mv)) + qKDF256 * time(KDF256) + qKDF128 * time(KDF128)), qMAC + qVer, max(maxlength(m), maxlength(mv)), qKDF256, qKDF128) +
PPRF(time + (N-1)*(qMAC * time(MAC, maxlength(m)) + qVer * time(MAC, maxlength(mv)) + qKDF256 * time(KDF256) + qKDF128 * time(KDF128)), qMAC + qVer, max(maxlength(m), maxlength(mv)), 0, 0)))=>
	! N new k: mac_key;
	(! qMAC O_mac(m: bitstring) := MAC2(k, m),
	 ! qVer O_Ver(mv: bitstring, mac: t_SHA256_out) := 
	    find j <= qMAC suchthat defined(m[j]) && mv = m[j] && mac = MAC2(k, mv) then
    	    	true
            else
		false,
         ! qKDF256 O_KDF256(X2: t_SHA256_out, U2: t_id, V2: t_id) := 
	    find[unique] j2 <= qKDF256 suchthat defined(X2[j2], U2[j2], V2[j2], r2[j2]) && X2 = X2[j2] && U2 = U2[j2] && V2 = V2[j2] then
                r2[j2]
            else
	        new r2: mac_key;
		r2,
	 ! qKDF128 O_KDF128(X3: t_SHA256_out, U3: t_id, V3: t_id) := 
            find[unique] j3 <= qKDF128 suchthat defined(X3[j3], U3[j3], V3[j3], r3[j3]) && X3 = X3[j3] && U3 = U3[j3] && V3 = V3[j3] then
                r3[j3]
            else
		new r3: enc_key;
		r3).

(* MAC is HMAC_SHA256, it is collision resistant *)

fun MAC2collision(mac_key, bitstring, bitstring): bool.

(* This equality allows simplification to automatically transform
   x = y into MAC2collision(k,m1,m2) when x = MAC2(k,m1) and y = MAC2(k,m2).
   Without this equality, the transformation of x = y into MAC2(k, m1)
   = MAC2(k, m2) is not automatically done by the cryptographic
   transformation because x = y can (apparently) be discharged without
   doing anything since it does not contain k. *)
forall k: mac_key, m1: bitstring, m2: bitstring;
       (MAC2(k, m1) = MAC2(k, m2)) = MAC2collision(k,m1,m2).

equiv
	! N new k: mac_key;
	(! qMAC O_mac(m: bitstring) := MAC2(k, m),
	 ! qColl O_coll(m1: bitstring, m2: bitstring) [useful_change] := (MAC2collision(k, m1, m2)))
<=((6 * qColl + 2 * qColl * qColl + 2 * qMAC * qColl + 0.5 * qMAC * qMAC) / |t_SHA256_out| + 
   2 * PPRF(time, qMAC + 2 * qColl, max(maxlength(m), maxlength(m2), maxlength(m1)), 0, 0))=>
	! N new k: mac_key;
	(! qMAC O_mac(m: bitstring) := MAC2(k, m),
	 ! qColl O_coll(m1: bitstring, m2: bitstring) := (m1 = m2)).
	

(* Time *)

type t_AMS_Time [fixed].

fun check_time(t_AMS_Time, t_AMS_Time): bool.
     (* check_time(tU, tV) is supposed to check that 
     	tV - 60 seconds <= tU <= tV + 120 seconds. *)

table table_times(t_AMS_Time).
      (* table used to remember all times tU at which the
      	 aircraft started a session, to prevent it from	
	 starting two sessions with the same tU. *)

(* Supplementary address type *)

type t_AMS_SuppAddr.

(* Session identifiers *)

type t_SID [fixed]. (* 3 bits *)
const SID0, SID1, SID2, SID3, SID4, SID5: t_SID.

(* Building AMS messages *)

type t_AMS_IMI. (* empty or "PM1." *)
type t_AMS_ID.

(* t_AMS_SuppAddr has variable length, but starts with / and ends with .
   so it can be distinguished from the PID, and its length can be determined. *)
fun buildAMS_id1(t_AMS_SuppAddr, t_AMS_IMI, t_AMS_PID): t_AMS_ID [compos].
fun buildAMS_id2(t_AMS_PID): t_AMS_ID [compos].

type t_AMS_Header. (* 2 bytes = 16 bits *)

fun buildAMS_Header(bool (*R1 parameter, ignored*), t_AMS_Policy, t_SID, t_Cmd): t_AMS_Header [compos].

fun buildAMS_msg_prefix_Init(t_AMS_ID, t_AMS_Header, bitstring, t_AMS_AlgID, t_AMS_Time): bitstring [compos].
fun buildAMS_msg_prefix_Rest(t_AMS_ID, t_AMS_Header, bitstring, t_Count): bitstring [compos].
fun buildAMS_RSP(bitstring, t_AMS_AlgID, t_AMS_Time, t_Rand32): bitstring [compos].

fun buildMAC_arg(t_id, t_id, bitstring): bitstring [compos].
fun build_msg_Init(bitstring, t_SHA256_out): bitstring [compos].
fun buildAMS_appendix_Init(t_AMS_AlgID, t_AMS_Time, t_SHA256_out): bitstring [compos].
fun concat(bitstring, bitstring): bitstring. (* concatenation; it is NOT compos, because the
    		      		  	     	lengths of the two concatenated bitstrings is not known. *)
fun split_message(t_MAClen, bitstring): bitstring.
    			    		(* split_message(l, m) returns a pair (m1, m2) such that
					   m is the concatenation of m1 and m2, and m2 has length l.
					   In this protocol, m2 is the MAC, m1 is the rest of the message. *)

(* Tables of message counters
   We simulate a distinct table for each session by
   adding a unique session identifier as first argument. *)

table received_count_table(session_ids, t_Count).
table sent_count_table(session_ids, t_Count).

(**** Security properties ****)

(* Secrecy *)

fun test(bool, bitstring, bitstring): bitstring.
forall x:bitstring,y:bitstring; test(true,x,y) = x.
forall x:bitstring,y:bitstring; test(false,x,y) = y.
forall b:bool,x:bitstring; test(b,x,x) = x.

forall b:bool,x:bitstring,y:bitstring; 
       Z(test(b, x, y)) =
       test(b, Z(x), Z(y)).

query secret b.

(**** The protocol ****)

param Naircraft, Nground, Nground_init, Nground_init_react, Nmessage.
channel c_gen1, c_gen2, c_aircraft0, c_aircraft0', c_aircraft1, c_aircraft2, c_aircraft3, c_aircraft4, 
	c_ground1, c_ground2, 
	choicechannel, pub.

(* The process tunnel_protocol models the secure session data exchange
   (Attachment 8, Section 8.3) *)

let tunnel_protocol =
(
    (* Sender side *)
    ! Nmessage
    in(choicechannel, (AMS_payload1: bitstring, AMS_payload2: bitstring,  
		       ams_dstaddr: t_AMS_SuppAddr, ams_imi: t_AMS_IMI, 
		       count: t_Count, cmd: t_Cmd));
		       (* cmd can be
		       	  - Data_IND / DataCnf_IND in case D04
			  - Info_IND in case X04
			  - Release_REQ in case R03 (Confirmed release)
			  - Release_RSP+ / Release_RSP- in case R12 (reply to a confirmed release request)
			  - Abort_IND in case A03 (Abort) *)
    (* We never send two messages with the same count, in the same session. *)
    get sent_count_table(=current_session_id, =count) in yield else
    (* Secrecy is possible only when the two messages have policy BOTH;
       in particular we require the two messages to have the same policy *)
    if Z(AMS_payload1) = Z(AMS_payload2) then
    let AMS_payload = test(b, AMS_payload1, AMS_payload2) in
    (* D/X02 *)
    insert sent_count_table(current_session_id, count);
    (* D/X03 *)
    let encrypted_AMS_payload =
          E'(KENC_UV, buildIVdata(dir_send, count), AMS_payload)
    in
    (* D/X04 *)
    let ams_id = buildAMS_id1(ams_dstaddr, ams_imi, ams_pid) in
    let ams_header = buildAMS_Header(false, BOTH, sid, cmd) in
    let AMS_Data_IND_prefix = buildAMS_msg_prefix_Rest(ams_id, ams_header, encrypted_AMS_payload, count) in
    let TBP_AMS_Data_IND = buildMAC_arg(my_id, other_id, AMS_Data_IND_prefix) in
    let mac = sessionMAC(MAClen, KMAC_UV, TBP_AMS_Data_IND) in
    let AMS_Data_IND = concat(AMS_Data_IND_prefix, mac) in
    (* D/X05 *)
    out(pub, AMS_Data_IND)
)
|
(
    (* Receiver side *)
    ! Nmessage
    in(pub, AMS_Data_IND: bitstring);
    (* D/X06 *)
    let (AMS_Data_IND_prefix: bitstring, mac: bitstring) = split_message(MAClen, AMS_Data_IND) in
    (* The MAC checking of step D/X08 is moved here to facilitate verification *)
    let TBP_AMS_Data_IND = buildMAC_arg(other_id, my_id, AMS_Data_IND_prefix) in
    if mac = sessionMAC(MAClen, KMAC_UV, TBP_AMS_Data_IND) then
    let buildAMS_msg_prefix_Rest(ams_id, ams_header, encrypted_AMS_payload, MsgCount) = AMS_Data_IND_prefix in
    let buildAMS_Header(R1, protect_mode, sid, cmd) = ams_header in
    (* D/X07 *)
    (* D/X08 *)
    (* Check on the message count is slightly weaker than the check
       given in the specification: we just discard the message if a message
       with the same count has already been received in the same session. *)
    get received_count_table(=current_session_id, =MsgCount) in yield else
    insert received_count_table(current_session_id, MsgCount);
    (* Message accepted *)
    (* D/X09 *)
    let AMS_payload = 
	   D'(KENC_UV, buildIVdata(dir_recv, MsgCount), encrypted_AMS_payload)
    in
    yield
).

(* Secure session initiation, aircraft-initiated (Attachement 8, Section 8.2.1) *)

let aircraft =
    in(c_aircraft1, (software_part_number: t_software_part_number, policy_id: t_policy_id, 
	      ams_dstaddr: t_AMS_SuppAddr, ams_imi: t_AMS_IMI, sid: t_SID, 
	      tU: t_AMS_Time));
    (* Refuse to run the aircraft session twice with the same tU.
       This is necessary to prove secrecy. It models the recommendation
       that the aircraft should never run two sessions with the same tU. *)
    get table_times(=tU) in yield else
    insert table_times(tU);
    let MAClen = MAClen32  in
    (* Choose a session id *)
    new current_session_id: session_ids;
    (* Message 1, N01 *)
    let s_init_info = buildAMS10_s_init_info(software_part_number, policy_id, U, V) in
    let ams_payload = concat_AMS_element(s_init_info, payload_with_1_element(comp_algo_void)) in
    (* N02 *)
    let ams_id = buildAMS_id1(ams_dstaddr, ams_imi, ams_pid2) in
    let ams_header = buildAMS_Header(false, AUTH, sid, Init_REQ) in
    let alg_ID_U = algo(MAClen, HMAC_SHA256, AES128_CFB128) in
    let AMS_Init_REQ_prefix = buildAMS_msg_prefix_Init(ams_id, ams_header, ams_payload, alg_ID_U, tU) in
    let TBP_AMS_Init_REQ = buildMAC_arg(U, V, AMS_Init_REQ_prefix) in
    let MAC0_U = MAC(K_UV, TBP_AMS_Init_REQ) in
    let AMS_Appendix = buildAMS_appendix_Init(alg_ID_U, tU, MAC0_U) in
    let AMS_Init_REQ = build_msg_Init(AMS_Init_REQ_prefix, MAC0_U) in
    (* N03 *)
    out(c_aircraft2, AMS_Init_REQ);
    (* Message 2, N12 *)
    in(c_aircraft3, AMS_Init_RSP: bitstring);
    let (AMS_Init_RSP_prefix: bitstring, mac2: bitstring) = split_message(MAClen, AMS_Init_RSP) in
    let buildAMS_msg_prefix_Rest(ams_id2, ams_header2, buildAMS_RSP(AMS_payload2, AlgSel, =tU, RandV), =Count1) = AMS_Init_RSP_prefix in
    let buildAMS_Header(R1, =AUTH, sid2, =Init_RSP_Plus) = ams_header2 in
    (* N13 *)
    let X_UV = HASH(hk, concat_hash(AMS_Appendix, RandV)) in
    (* N14 *)
    let KMAC_UV = KDF256(K_UV, X_UV, U, V) in
    (* N15 - This should be done only if the encryption is not NULL,
       but doing it anyway does not hurt. *)
    let KENC_UV = KDF128(K_UV, X_UV, U, V) in
    (* N16 *)
    let TBP_AMS_Init_RSP = buildMAC_arg(V, U, AMS_Init_RSP_prefix) in
    (* N17 *)
    if mac2 = sessionMAC(MAClen, KMAC_UV, TBP_AMS_Init_RSP) then
    insert received_count_table(current_session_id, Count1);
    (* When the command is Init_RSP- instead of Init_RSP_Plus, 
       the aircraft entity executes an airline configurable unavailable action,
       which is ignored here. *)
    (* Message accepted, secure session established *)
    (* Parameters for the process tunnel_protocol *)
    let ams_pid = ams_pid2 in
    let dir_send = CstDN in
    let dir_recv = CstUP in
    let my_id = U in
    let other_id = V in
    out(c_aircraft4, ());
    tunnel_protocol.
    (*tunnel_protocol(ams_pid2, common_comp_algo_id, policy_id,
      KMAC_UV, KENC_UV, MAClen, common_enc_algo, sid, CstDN, CstUP, U, V)*)

let ground = 
    in(c_ground1, (tV: t_AMS_Time, 
            app_data: bitstring,
            AMS_Init_REQ: bitstring));
    (* Choose a session id *)
    new current_session_id: session_ids;
    (* Message 1, N04 *)
    let build_msg_Init(AMS_Init_REQ_prefix, MAC0_U) = AMS_Init_REQ in
    (* The MAC checking of step N05 is moved here to facilitate verification *)
    let TBP_AMS_Init_REQ = buildMAC_arg(U, V, AMS_Init_REQ_prefix) in
    if MAC0_U = MAC(K_UV, TBP_AMS_Init_REQ) then
    let buildAMS_msg_prefix_Init(ams_id, ams_header, ams_payload, alg_ID_U, tU) = AMS_Init_REQ_prefix in
    let AMS_Appendix = buildAMS_appendix_Init(alg_ID_U, tU, MAC0_U) in
    if check_time(tU, tV) then
    let buildAMS_Header(R1, =AUTH, sid: t_SID, =Init_REQ) = ams_header in
    let algo(MAClen, =HMAC_SHA256, enc_algo) = alg_ID_U in
    let common_enc_algo = AES128_CFB128 in
    let concat_AMS_element(s_init_info, payload_with_1_element(comp_algo_id)) = ams_payload in
    let buildAMS10_s_init_info(software_part_number, policy_id, =U, =V) = s_init_info in
    (* N05 *)
    (* Uniqueness check of AMS_Appendix not modeled *)
    (* N06 - Message 1 accepted *)
    (* Termination of another session with the same peer aircraft not modeled *)
    new RandV: t_Rand32;
    let X_UV = HASH(hk, concat_hash(AMS_Appendix, RandV)) in
    (* N07 *)
    let KMAC_UV = KDF256(K_UV, X_UV, U, V) in
    (* N08 - This should be done only if the encryption is not NULL,
       but doing it anyway does not hurt. *)
    let KENC_UV = KDF128(K_UV, X_UV, U, V) in
    (* Message 2, N09 *)
    (* I consider the optional Query and Ping as application data, 
       whose content does not need to be detailed. *)
    let AMS_payload = concat_AMS_element(comp_algo_void, app_data) in
    insert sent_count_table(current_session_id, Count1);
    (* N10 *)
    let ams_id = buildAMS_id2(ams_pid2) in
    let ams_header = buildAMS_Header(false, AUTH, sid, Init_RSP_Plus) in
    let AlgSel = algo(MAClen, HMAC_SHA256, common_enc_algo) in
    let AMS_Init_RSP_prefix = buildAMS_msg_prefix_Rest(ams_id, ams_header, buildAMS_RSP(AMS_payload, AlgSel, tU, RandV), Count1) in
    let TBP_AMS_Init_RSP = buildMAC_arg(V, U, AMS_Init_RSP_prefix) in
    let mac = sessionMAC(MAClen, KMAC_UV, TBP_AMS_Init_RSP) in
    let AMS_Init_RSP = concat(AMS_Init_RSP_prefix, mac) in
    (* N11 *)
    (* Parameters for the process tunnel_protocol *)
    let ams_pid = ams_pid2 in
    let dir_send = CstUP in
    let dir_recv = CstDN in
    let my_id = V in
    let other_id = U in
    out(c_ground2, AMS_Init_RSP);
    tunnel_protocol. (* tunnel_protocol(ams_pid2, common_comp_algo_id, policy_id,
      KMAC_UV, KENC_UV, MAClen, common_enc_algo, sid, CstUP, CstDN, V, U)*)

(* Putting the whole system together *)

process 
	in(c_gen1, ()); new b: bool; new K_UV: mac_key; new hk: hash_key; out(c_gen2, hk);
	((! Naircraft aircraft) | 
	 (! Nground ground))

(* EXPECTED
All queries proved.
1.108s (user 1.008s + system 0.100s), max rss 1795888K
END *)

