
(* Signed Diffie-Hellman protocol *)

param n, q, nH, N, N2, nCDH, nCDH', n1, n2, n3.

type host.
type keyseed [large,fixed].
type seed [fixed].
type pkey [bounded].
type skey [bounded].
type blocksize.
type signature.

type Z [fixed].
type G.
type K [large,fixed].
type D [fixed].

fun exp(G,Z): G.
const g:G.

fun mult(Z,Z): Z.
equation commut(mult).

(* exponents multiply *)

forall a:G, x:Z, y:Z;
  exp(exp(a,x), y) = exp(a, mult(x,y)).

(* the CDH assumption 

This does not work for two reasons:
1) a and b both get mapped to x (or perhaps both to y), as CryptoVerif
does not know a priori whether exp(g,x) or exp(g,y) should be used.
2) the fact that mult is commutative is not fully taken into account:
since the mapping z = exp(g, mult(x,y)) succeeds apparently,
the mapping z = exp(g, mult(y,x)) is not tried, but the transformation
will later fail when we check that the mappings of several expressions
are compatible.
These two problems could be considered bugs in the transformation mechanism,
since not all possibilities are considered. 
20/12/2009: PROBLEMS NOW FIXED, the equivalence below works.

examplesnd/test/signedDH-simp-onesession-distinctexp considers a modified
equivalence that solves these problems.
*) 

proba pCDH.

equiv
    !n new x:Z; new y:Z; (
      () -> exp(g,x), 
      () -> exp(g,y), 
      (z:G) nCDH -> z = exp(g, mult(x,y)),
      (z:G, m:G) n1 -> z = exp(m,x),
      (z:G, m:G) n2 -> z = exp(m,y),
      (m:G, m':G) n3 -> exp(m,x) = exp(m',y)
 )
<=(pCDH(time,n,nCDH))=>
    !n new x:Z; new y:Z; (
      () -> exp(g,x), 
      () -> exp(g,y), 
      (z:G) nCDH -> false,
      (z:G, m:G) n1 -> z = exp(m,x),
      (z:G, m:G) n2 -> z = exp(m,y),
      (m:G, m':G) n3 -> exp(m,x) = exp(m',y)
 ).


(* h in the random oracle model *)

fun h(K,G): D.

equiv !n new k:K; (x:G) nH -> h(k,x)
      <=(0)=>
      !n new k:K; (x:G) nH -> find j <= nH suchthat defined(x[j],r[j]) && otheruses(r[j]) && x= x[j] then r[j] else
			 new r:D; r.

(* signatures *)

fun concatA(host, host, G, G):blocksize [compos].
fun concatB(host, host, G, G):blocksize [compos].
forall x:host, y:host, z:G, t:G, x':host, y':host, z':G, t':G;
   concatA(x,y,z,t) <> concatB(x',y',z',t').
    
proba Psign.
proba Psigncoll.

expand UF_CMA_signature(keyseed, pkey, skey, blocksize, signature, seed, skgen, pkgen, sign, check, Psign, Psigncoll).

const A,B:host.

(* query *)
query secret keyA.
query secret keyB.

channel start, cstart, cA1, cA2, cA3, cA4, cA5, cA6, cB1, cB2, cB3, cB4, cB5, cH, cHret, cK.

let processA = 
  in(cA1, (hostB: host));
  new a:Z;
  let ga = exp(g,a) in
  out(cA2, (A, hostB, ga));
  in(cA3, (=A, =hostB, gb:G, s:signature));
  if hostB = B then
  (
  if check(concatB(A, hostB, ga, gb), pkB, s) then
  new r2: seed;
  let gab = exp(gb, a) in
  let kA = h(k, gab) in 
  out(cA4, sign(concatA(A, hostB, ga, gb), skA, r2));
  (* OK *)
  in(cA5, ());
  let keyA:D = kA
  )
  else
  (
  new r2: seed;
  let gab = exp(gb, a) in
  let kA = h(k, gab) in 
  out(cA4, sign(concatA(A, hostB, ga, gb), skA, r2));
  (* OK *)
  in(cA5, ());
  out(cA6, kA)
  ).

let processB =
  in(cB1, (hostA:host, =B, ga:G));
  new b:Z;
  let gb = exp(g,b) in
  new r1:seed;
  out(cB2, (hostA, B, gb, sign(concatB(hostA, B, ga, gb), skB, r1)));
  in(cB3, s:signature);
  if hostA = A then
  (
  if check(concatA(hostA, B, ga, gb), pkA, s) then
  let gab = exp(ga, b) in
  let kB = h(k, gab) in
  (* OK *)
  let keyB:D = kB
  )
  else
  (
  let gab = exp(ga, b) in
  let kB = h(k, gab) in
  (* OK *)
  out(cB4, kB)
  ).

let processH =
  !nH
  in(cH, xH:G);
  out(cHret, h(k,xH)).

process
	in(start, ());
	new k:K;
	new rkA : keyseed;
	let skA = skgen(rkA) in
	let pkA = pkgen(rkA) in
	new rkB : keyseed;
	let skB = skgen(rkB) in
	let pkB = pkgen(rkB) in
	out(cstart, (pkA, pkB));
	(processA | processB | processH)


(* EXPECTED
All queries proved.
0.120s (user 0.120s + system 0.000s), max rss 32208K
END *)
