
(** The Luby-Rackoff construction **)

(** A construction 
    using a pseudo-random family of functions over a large domain
    and an almost-XOR-universal-hash function family
    is shown to be pseudo-random.
    See Section 6, "Sequences of Games", Victor Shoup. **)

proof {
      auto;
      show_game occ;
      insert 27 "if defined(x[@i_77], y_87[@i_77], r_72[@i_77]) && (u = u[@i_77]) && (v = v[@i_77]) then";
      show_game occ;
      insert_event e2 90;
      insert_event e3 79;
      show_game occ;
      replace 50 "x[@i_77]";
      SArename x_71;
      simplify;
      auto;
      show_game occ;
      replace 45 "y_87[@i_77]";
      auto;
      remove_assign binder x;
      merge_branches;
      success
}
(* This proof requires a bit more advice than desired: it is normal
to put the events manually, but the rest should be automated.

This proof shows that the obtained function is a pseudo-random function.
We additionally need to prove that it is a permutation, that is,
it is injective. This can be done manually without using sequences of
games.
*)


param n, m, q.

type S [large,fixed].
type K [large,fixed].

type D [large,fixed].
type DD [fixed].

proba pPRF.
proba pAXUH.
proba pXOR.

fun f(S,D): D.

(* f(S) is a pseudo-random function family *) 

equiv
    !n new s:S;
      (x:D) m -> f(s,x) [all] 
<=(pPRF(time,n,m))=>
    !n 
      (x:D) m -> find u <= m 
	            suchthat defined(x[u],r[u]) 
                          && x = x[u]
	            then r[u]
                    else new r:D; r.


(* the theory of xor implies several propositions... *)

expand Xor(D, xor, zero).

fun h(K,D): D.

(* ...and h(K) is an almost-XOR-universal-hash function family *)

equiv !m new k:K; !n Oxorh(x:D, x':D, y:D) := 
      xor(h(k,x),h(k,x')) = y 
 <=(n * m * pAXUH(time))=>
      !m !n Oxorh(x:D, x':D, y:D) := (x = x' && y = zero).

(* query *)
query secret b.

channel dummy, start, c1, c2.

(* The Luby-Rackoff construction *)

let processC = !q
    in(c1, (u:D,v:D));
    let temp1 = h(k,v) in
    let w = xor(u,temp1) in
    let temp2 = f(s1,w) in 
    let x = xor(v,temp2) in
    let temp3 = f(s2,x) in
    let y = xor(w,temp3) in
    out(c2, (x,y)).

(* The random function *)

let processC2 = !q
    in(c1, (u':D,v':D));
    find i <= q suchthat defined(u'[i],v'[i],x'[i],y'[i]) && (u' = u'[i]) && (v' = v'[i]) then
      out(c2, (x'[i],y'[i])) 
    else
      new x':D;
      new y':D;
      out(c2, (x',y')).

process
  in(start, ());
  new b:bool;
  new k:K;
  new s1:S;
  new s2:S;
  if b then 
    out(dummy, ());
    processC 
  else 
    out(dummy, ());
    processC2

(* EXPECTED
All queries proved.
0.030s (user 0.030s + system 0.000s), max rss 18864K
END *)
