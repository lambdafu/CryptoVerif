
(* Signed Diffie-Hellman protocol *)

proof {
crypto h;
crypto uf_cma(sign);
crypto uf_cma(sign);
show_game;
remove_assign binder gab_138;
remove_assign binder gab_143;
crypto pCDH
}

param n, n', q, nH, N, N2, nCDH, nCDH'.

type host.
type keyseed [large,fixed].
type seed [fixed].
type pkey [bounded].
type skey [bounded].
type blocksize.
type signature.

type Z [large,fixed].
type G.
type K [large,fixed].
type D [fixed].

fun exp(G,Z): G.
fun exp'(G,Z): G.
const g:G.

fun mult(Z,Z): Z.
equation commut(mult).

(* exponents multiply *)

forall a:G, x:Z, y:Z;
  exp(exp(a,x), y) = exp(a, mult(x,y)).

(* the CDH assumption *) 

proba pCDH.

const mark: bitstring.

equiv
    !n new a:Z; (
      () -> exp(g,a), 
      (m:G) n' -> exp(m,a),
      (m:G, j<=n) nCDH [useful_change] -> m = exp(g, mult(a[j], a)),
      (j<=n, j'<=n, j''<=n) nCDH' -> exp(g, mult(a[j], a)) = exp(g, mult(a[j'],a[j'']))
    )
<=(pCDH(time,n,nCDH))=>
    !n new a:Z; (
      () -> exp'(g,a), 
      (m:G) n' -> let k:bitstring = mark in exp'(m, a),
      (m:G, j<=n) nCDH -> find v<=n', u<=n suchthat defined(k[v,u],a[u]) && (a = a[u] || a[j] = a[u]) then m = exp'(g, mult(a[j], a)) else false,
      (j<=n, j'<=n, j''<=n) nCDH' -> ((a[j] = a[j']) && (a = a[j''])) ||
      		   	   	      ((a[j] = a[j'']) && (a = a[j']))
    ).


(* h in the random oracle model *)

fun h(K,G): D.

equiv !n new k:K; (x:G) nH -> h(k,x)
      <=(0)=>
      !n new k:K; (x:G) nH -> find j <= nH suchthat defined(x[j],r[j]) && otheruses(r[j]) && x= x[j] then r[j] else
			 new r:D; r.

(* signatures *)

fun concatA(host, host, G, G):blocksize [compos].
fun concatB(host, host, G, G):blocksize [compos].
forall x:host, y:host, z:G, t:G, x':host, y':host, z':G, t':G;
   concatA(x,y,z,t) <> concatB(x',y',z',t').
    
proba Psign.
proba Psigncoll.

expand UF_CMA_signature(keyseed, pkey, skey, blocksize, signature, seed, skgen, pkgen, sign, check, Psign, Psigncoll).

const A,B:host.

(* query *)
query secret keyA.
query secret keyB.

channel start, cstart, cA1, cA2, cA3, cA4, cA5, cA6, cB1, cB2, cB3, cB4, cB5, cH, cHret, cK.

let processA = 
  in(cA1, (hostB: host));
  new a:Z;
  let ga = exp(g,a) in
  out(cA2, (A, hostB, ga));
  in(cA3, (=A, =hostB, gb:G, s:signature));
  find j2 <= N2 suchthat defined(Khost[j2],Rkey[j2]) && (Khost[j2] = hostB) then
  let pkhostB = Rkey[j2] in
  if check(concatB(A, hostB, ga, gb), pkhostB, s) then
  new r2: seed;
  let gab = exp(gb, a) in
  let kA = h(k, gab) in 
  out(cA4, sign(concatA(A, hostB, ga, gb), skA, r2));
  (* OK *)
  in(cA5, ());
  if hostB = B then 
  (let keyA:D = kA)
  else
   out(cA6, kA).

let processB =
  in(cB1, (hostA:host, =B, ga:G));
  new b:Z;
  let gb = exp(g,b) in
  new r1:seed;
  out(cB2, (hostA, B, gb, sign(concatB(hostA, B, ga, gb), skB, r1)));
  in(cB3, s:signature);
  find j2 <= N2 suchthat defined(Khost[j2],Rkey[j2]) && (Khost[j2] = hostA) then
  let pkhostA = Rkey[j2] in
  if check(concatA(hostA, B, ga, gb), pkhostA, s) then
  let gab = exp(ga, b) in
  let kB = h(k, gab) in
  (* OK *)
  if hostA = A then
  (let keyB:D = kB)
  else
   out(cB4, kB).

let processH =
  !nH
  in(cH, xH:G);
  out(cHret, h(k,xH)).

let processK =
  !N2
  in(cK, (Khost: host, Kkey: pkey));
  let Rkey:pkey = 
		if Khost = B then pkB else
		if Khost = A then pkA else
		Kkey.

process
	in(start, ());
	new k:K;
	new rkA : keyseed;
	let skA = skgen(rkA) in
	let pkA = pkgen(rkA) in
	new rkB : keyseed;
	let skB = skgen(rkB) in
	let pkB = pkgen(rkB) in
	out(cstart, (pkA, pkB));
	((!N processA) | (!N processB) | processH | processK)


(* EXPECTED
Error: Cryptographic transformation failed
xtime: error in child process (status : 512)
END *)
