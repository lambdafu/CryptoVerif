
(** Hashed ElGamal encryption scheme, in the random oracle model **)

(** An encryption scheme is shown to be SS
    under the CDH assumption, in the random oracle model.
    See Section 8, "Sequences of Games", Victor Shoup. **)

param n, q, nH, nCDH, nCDH'.

type Z [fixed].
type G.
type K [large,fixed].
type D [fixed].

proba pCDH.

fun exp(G,Z): G.
const gamma:G.

fun mult(Z,Z): Z.
equation commut(mult).

(* exponents multiply *)

forall a:G, x:Z, y:Z;
  exp(exp(a,x), y) = exp(a, mult(x,y)).

fun xor(D,D): D.

(* xor self-cancels *)

forall x:D, y:D;
  xor(x, xor(x,y)) = y.

(* xor(.,y) is a one-time pad *)

equiv 
    (y:D) n -> new x:D; xor(x,y) [all]
<=(0)=>   (* BB: The difference of probability is 0 *)
    (y:D) n -> new x:D; x.

(* the CDH assumption *) 

equiv
    !n new x:Z; new y:Z; (
      () -> exp(gamma,x), 
      () -> exp(gamma,y), 
      (z:G) nCDH -> z = exp(gamma, mult(x,y))
 )
<=(pCDH(time,n,nCDH))=>
    !n new x:Z; new y:Z; (
      () -> exp(gamma,x), 
      () -> exp(gamma,y), 
      (z:G) nCDH -> false ).

fun h(K,G): D.

(* h in the random oracle model *)

equiv !n new k:K; (x:G) nH -> h(k,x)
      <=(0)=>
      !n new k:K; (x:G) nH -> find j <= nH suchthat defined(x[j],r[j]) && otheruses(r[j]) && x= x[j] then r[j] else
			 new r:D; r.

    
fun choose(bool,D,D): D.

(* choose(b,M,N) = if b then M else N *)

forall x:bool, y:D, z:D;
  (x && choose(x,y,z) = y) || (not(x) && choose(x,y,z) = z).

(* query *)
query secret b.

channel dummy, cPK, cE, cEret, cH, cHret, start.

let processE = 
    in(cE, (m0:D, m1:D));
    new b:bool;
    let m = choose(b,m1,m0) in
    new y:Z;
    let beta = exp(gamma,y) in
    let delta = exp(alpha,y) in
    let hash = h(k,delta) in
    let v = xor(hash, m) in
    out(cEret, (beta,v)).

let processH =
  !nH
  in(cH, xH:G);
  out(cHret, h(k,xH)).

process
  !q   (* BB: Replication not present in Shoup's paper, but ok *)
  in(dummy, ());
  new x:Z;
  new k:K;
  let alpha = exp(gamma,x) in
  out(cPK, alpha); 
  (processE | processH)



(* EXPECTED
All queries proved.
0.030s (user 0.030s + system 0.000s), max rss 19040K
END *)
