(* Needham Schroeder public key protocol, 
   with key = H(Na,Nb). *)

(* set interactiveMode = true. *)

proof {
SArename Rkey;
crypto sign rkS;
success; (* shows fullA(B, k, x) && fullB(A, k', x) ==> k = k' *)
crypto enc rkA;
crypto enc rkB;
crypto hash;  (* SArename Na_24, simplify done automatically *)
success;  (* shows inj:partA(B, x) ==> inj:partB(A, x) && secrecy key *)
auto
}


(* 

SArename Nb_33
simplify
SArename Na_24
simplify
success

 *)


param N.
param N2.
param N3.
param N4.

type nonce [large,fixed].
type host [bounded].
type pkey [bounded].
type skey [bounded].
type keyseed [large,fixed].
type seed [fixed].
type spkey [bounded].
type sskey [bounded].
type skeyseed [large,fixed].
type sseed [fixed].
type signature [bounded].
type blocksize [large,fixed].
type blocksizebot [large,bounded].
type sblocksize [large,bounded].
type shkey [large,fixed].

fun concat1(nonce, host):blocksize [compos].
fun concat2(nonce, nonce, host):blocksize [compos].
fun concat3(pkey, host):sblocksize [compos].
fun pad(nonce):blocksize [compos].

forall z:nonce,t:nonce,u:host,y2:nonce,z2:host;
	concat2(z,t,u) <> concat1(y2,z2).
forall y:nonce,y2:nonce,z2:host;
	pad(y) <> concat1(y2,z2).
forall z:nonce,t:nonce,u:host,y2:nonce;
	concat2(z,t,u) <> pad(y2).

(* Public-key encryption (CCA2) *)

proba Penc.
proba Penccoll.

fun enc(blocksize, pkey, seed): bitstring.
fun skgen(keyseed):skey.
fun pkgen(keyseed):pkey.
fun dec(bitstring, skey): blocksizebot.

fun enc2(blocksize, pkey, seed): bitstring.
fun skgen2(keyseed):skey.
fun pkgen2(keyseed):pkey.
fun dec2(bitstring, skey): blocksizebot.

fun injbot(blocksize):blocksizebot [compos].

const Z:blocksize.

forall m:blocksize, r:keyseed, r2:seed; 
	dec(enc(m, pkgen(r), r2), skgen(r)) = injbot(m).
forall m:blocksize, r:keyseed, r2:seed; 
	dec2(enc2(m, pkgen2(r), r2), skgen2(r)) = injbot(m).

forall m:blocksize, m':blocksize, x:pkey, r:seed;
	(enc(m, x, r) = enc(m', x, r)) = (m = m').

equiv  !N3 new r: keyseed; (() -> pkgen(r),
			    (m:bitstring) N2 -> dec(m, skgen(r))),
       (x:blocksize, y:pkey) N4 -> new r2:seed; enc(x,y,r2) [all]
     <=(N3 * N4 * Penc(time, N2))=> 
       !N3 new r: keyseed; (() -> pkgen2(r),
			    (m:bitstring) N2 -> 
		find j <= N4 suchthat defined(m2[j],y[j],x[j]) &&
		y[j] = pkgen2(r) && m = m2[j] then injbot(x[j]) else dec2(m, skgen2(r))),
       (x:blocksize, y:pkey) N4 -> 
		find k <= N3 suchthat defined(r[k]) && y = pkgen2(r[k]) then
			(new r2:seed;
			let m2:bitstring = enc2(Z, y, r2) in
			m2)
		else new r3:seed; enc(x,y,r3).

collision new r1:keyseed; new r2:keyseed; 
	pkgen(r1) = pkgen(r2) <=(Penccoll)=> r1 = r2.
collision new r1:keyseed; new r2:keyseed; 
	pkgen2(r1) = pkgen2(r2) <=(Penccoll)=> r1 = r2.
collision new r1:keyseed; new r2:keyseed; 
	skgen(r1) = skgen(r2) <=(Penccoll)=> r1 = r2.
collision new r1:keyseed; new r2:keyseed; 
	skgen2(r1) = skgen2(r2) <=(Penccoll)=> r1 = r2.

(* Signatures *)

proba Psign.
proba Psigncoll.

fun sign(sblocksize, sskey, sseed): signature.
fun sskgen(skeyseed):sskey.
fun spkgen(skeyseed):spkey.
fun check(sblocksize, spkey, signature): bool.

fun sign2(sblocksize, sskey, sseed): signature.
fun sskgen2(skeyseed):sskey.
fun spkgen2(skeyseed):spkey.
fun check2(sblocksize, spkey, signature): bool.

forall m:sblocksize, r:skeyseed, r2:sseed; 
	check(m, spkgen(r), sign(m, sskgen(r), r2)) = true.
forall m:sblocksize, r:skeyseed, r2:sseed; 
	check2(m, spkgen2(r), sign2(m, sskgen2(r), r2)) = true.

equiv  !N3 new r: skeyseed; (() -> spkgen(r),
			    (x: sblocksize) N2 -> new r2: sseed; sign(x, sskgen(r), r2)),
       (m: sblocksize, y: spkey, si: signature) N4 -> check(m, y, si) [all]
     <=(N3 * Psign(time, N2))=>
       !N3 new r: skeyseed; (() -> spkgen2(r),
			    (x: sblocksize) N2 -> new r2: sseed; sign2(x, sskgen2(r), r2)),
       (m: sblocksize, y: spkey, si: signature) N4 -> 
		find j <= N2, k <= N3 suchthat defined(x[j,k],r[k]) && y = spkgen2(r[k]) && m = x[j,k] && check2(m, y, si) then true else
		find k <= N3 suchthat defined(r[k]) && y = spkgen2(r[k]) then false else
		check(m,y,si).

collision new r1:skeyseed; new r2:skeyseed; 
	spkgen(r1) = spkgen(r2) <=(Psigncoll)=> r1 = r2.
collision new r1:skeyseed; new r2:skeyseed; 
	spkgen2(r1) = spkgen2(r2) <=(Psigncoll)=> r1 = r2.
collision new r1:skeyseed; new r2:skeyseed; 
	sskgen(r1) = sskgen(r2) <=(Psigncoll)=> r1 = r2.
collision new r1:skeyseed; new r2:skeyseed; 
	sskgen2(r1) = sskgen2(r2) <=(Psigncoll)=> r1 = r2.

(* Hash function, random oracle model *)

fun hash(bitstring):shkey.

equiv (x:bitstring) N -> hash(x) [all]
      <=(0)=>
      (x:bitstring) N -> find j <= N suchthat defined(x[j],r[j]) && otheruses(r[j]) && x= x[j] then r[j] else
			 new r:shkey; r.

(* Queries *)

channel c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, 
	c15, c16, c17, c18, c19, start, cBK, cAK.
const A : host.
const B : host.
fun acceptA(host):bitstring.
fun acceptB(host):bitstring.

event fullA(host, shkey, bitstring).
event partA(host, bitstring).
event fullB(host, shkey, bitstring).
event partB(host, bitstring).

query x:bitstring;
	event inj:partA(B, x) ==> inj:partB(A, x).
query x:bitstring, k:shkey;
	event inj:fullB(A, k, x) ==> inj:fullA(B, k, x). (* Not shown - 7/10/2016: now shown *)
query x:bitstring, k:shkey, k':shkey;
	event inj:fullB(A, k, x) ==> inj:fullA(B, k', x). (* Not shown - 7/10/2016: now shown *)
query x:bitstring, k:shkey, k':shkey;
	event fullA(B, k, x) && fullB(A, k', x) ==> k = k'.
query secret keyA.

(* When k is removed from fullB/fullA, the prover shows:
query x:bitstring;
	event inj:fullB(A, x) ==> inj:fullA(B, x).
This is sufficient to infer the desired property, since
k is a function of the second message of the protocol included in x,
and the same function for both participants. Note that 
in B, pkY = pkA since hostY = A by the event fullB(A, x). *)

let processA =
	in(c1, hostX: host);
	out(c2, (A, hostX));
	in(c3, (pkX: pkey, =hostX, ms: signature));
	if check(concat3(pkX, hostX), pkS, ms) then
	(* Message 3 *)
        new Na: nonce;
	new r3: seed;
	let m1 = enc(concat1(Na, A), pkX, r3) in 
        out(c4, m1);
	(* Message 6 *)
        in(c5, m: bitstring);
	let injbot(concat2(=Na, Nb, =hostX)) = dec(m, skA) in
	(* Message 7 *)
	new r4: seed;
	let m3 = enc(pad(Nb), pkX, r4) in
	let k = hash((Na, Nb)) in
	event partA(hostX, (m1, m));
	event fullA(hostX, k, (m1, m, m3));
	if hostX = B then
		(let keyA:shkey = k in out(c6, (m3, acceptA(hostX))))
	else
		(out(c6, (m3, acceptA(hostX))); in(cAK, ()); out(cAK, k)).

let processB =
	(* Message 3 *)
	in(c7, m:bitstring);
	let injbot(concat1(Na, hostY)) = dec(m, skB) in
	out(c8, (B, hostY));
	in(c9, (pkY: pkey, =hostY, ms: signature));
	if check(concat3(pkY, hostY), pkS, ms) then
	(* Message 6 *)
	new Nb: nonce;
	new r5: seed;
	let m2 = enc(concat2(Na, Nb, B), pkY, r5) in
	event partB(hostY, (m, m2));
	out(c10, m2);
	(* Message 7 *)
	in(c11, m3: bitstring);
	let injbot(pad(=Nb)) = dec(m3, skB) in
	let k = hash((Na, Nb)) in
	(* OK *)
	event fullB(hostY, k, (m, m2, m3));
        if hostY = A then
		(out(c17, acceptB(hostY)))
	else
		(out(c17, acceptB(hostY)); in(cBK, ()); out(cBK, k)).

let processK =
	in(c12, (Khost: host, Kkey: pkey));
	let Rkey:pkey = 
		if Khost = A then pkA else
		if Khost = B then pkB else
		Kkey.

let processS = 
	in(c13, (h1: host, h2: host));
	find j2 <= N2 suchthat defined(Khost[j2],Rkey[j2]) && (Khost[j2] = h2) then
	new r3: sseed;
	out(c14, (Rkey[j2], h2, sign(concat3(Rkey[j2], h2), skS, r3))).

process 
	in(start, ());
	new rkA: keyseed;
	let pkA = pkgen(rkA) in
	let skA = skgen(rkA) in
	new rkB: keyseed;
	let pkB = pkgen(rkB) in
	let skB = skgen(rkB) in
	new rkS: skeyseed;
	let pkS = spkgen(rkS) in
	let skS = sskgen(rkS) in
	out(c15, (pkA, pkB, pkS));
	((! N processA) |
	 (! N processB) | 
	 (! N processS) |
	 (! N2 processK) |
	 (! N3 in(c18,x:bitstring);out(c19,hash(x))))


(* EXPECTED
All queries proved.
17.380s (user 17.330s + system 0.050s), max rss 331024K
END *)
