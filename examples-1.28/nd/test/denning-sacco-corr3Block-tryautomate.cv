(* Denning-Sacco key distribution protocol. (corrected version) *)

set backtrackOnCrypto = true. 
(* set interactiveMode = true. *)

(* The proof to enter is as follows:

SArename Rkey
SArename SRkey   --- the system does not guess this instruction! In fact, it guesses it, but too late, it seems...
	 	     It guesses it before "crypto sign rkA" (which is when it is really needed), but in fact
		     the proof works only if it is guessed before "crypto sign rkS". The problem is that the checks
		     with pkA get polluted with checks with pkS when pkA is not explicit before "crypto sign rkS".
		     It would be nice to be able to make some simplification a posteriori so that the proof
		     works even if "SArename SRkey" is applied after "crypto sign rkS".
crypto enc rkB
crypto sign rkS
crypto sign rkA
success
auto
quit

For the proof to succeed, it is important that "crypto enc rkB" is 
applied before "crypto sign rkA". This is because, when
A talks to B and we apply "crypto enc rkB", we replace the plaintext
with Z, and reuse the plaintext directly at the decryption site in
B, then by simplify check(..., pkA, sign(..., skA, r)) cancels out, and 
the computation of the signature under skA in this case disappears.
There is then one case less to consider when applying "crypto sign rkA".

*)

param N.
param N2.
param N3.
param N4.

type host [bounded].
type pkey [bounded].
type skey [bounded].
type keyseed [large,fixed].
type seed [fixed].
type spkey [bounded].
type sskey [bounded].
type skeyseed [large,fixed].
type sseed [fixed].
type signature [bounded].
type blocksize [fixed].
type blocksizebot [bounded].
type sblocksize [bounded].
type shkey [fixed]. (* distributed key *)

fun concat1(shkey, host, host, signature):blocksize [compos].
fun concat2(shkey, host, host):sblocksize [compos].
fun concat3(host, pkey):sblocksize [compos].
fun concat4(host, spkey):sblocksize [compos].

forall y:host,z:pkey,y2:shkey,z2:host,t2:host;
        concat3(y,z) <> concat2(y2,z2,t2).
forall y:host,z:pkey,y2:host,z2:spkey;	
	concat3(y,z) <> concat4(y2,z2).
forall y:host,z:spkey,y2:shkey,z2:host,t2:host;
        concat4(y,z) <> concat2(y2,z2,t2).

(* Public-key encryption (CCA2) *)

proba Penc.
proba Penccoll.

fun enc(blocksize, pkey, seed): bitstring.
fun skgen(keyseed):skey.
fun pkgen(keyseed):pkey.
fun dec(bitstring, skey): blocksizebot.

fun enc2(blocksize, pkey, seed): bitstring.
fun skgen2(keyseed):skey.
fun pkgen2(keyseed):pkey.
fun dec2(bitstring, skey): blocksizebot.

fun injbot(blocksize):blocksizebot [compos].

const Z:blocksize.

forall m:blocksize, r:keyseed, r2:seed; 
	dec(enc(m, pkgen(r), r2), skgen(r)) = injbot(m).
forall m:blocksize, r:keyseed, r2:seed; 
	dec2(enc2(m, pkgen2(r), r2), skgen2(r)) = injbot(m).

equiv  !N3 new r: keyseed; (() [2] -> pkgen(r),
			    (m:bitstring) N2 -> dec(m, skgen(r)),
                            (x1:blocksize) N -> new r1:seed; enc(x1, pkgen(r),r1)),
       (x:blocksize, y:pkey) N4 [3] -> new r2:seed; enc(x,y,r2) [all]
     <=(N3 * N4 * Penc(time, N2))=> 
       !N3 new r: keyseed; (() -> pkgen2(r),
			    (m:bitstring) N2 -> 
                find j <= N suchthat defined(m1[j],x1[j]) && m = m1[j] then injbot(x1[j]) else
		find j <= N4 suchthat defined(m2[j],y[j],x[j]) &&
		y[j] = pkgen2(r) && m = m2[j] then injbot(x[j]) else dec2(m, skgen2(r)),
		            (x1:blocksize) N -> 
                        new r1:seed; 
			let m1:bitstring = enc2(Z, pkgen2(r), r1) in
			m1),
       (x:blocksize, y:pkey) N4 -> 
		find k <= N3 suchthat defined(r[k]) && y = pkgen2(r[k]) then
			(new r2:seed; 
			let m2:bitstring = enc2(Z, y, r2) in
			m2)
		else new r3:seed; enc(x,y,r3).

collision new r1:keyseed; new r2:keyseed; 
	pkgen(r1) = pkgen(r2) <=(Penccoll)=> r1 = r2.
collision new r1:keyseed; new r2:keyseed; 
	pkgen2(r1) = pkgen2(r2) <=(Penccoll)=> r1 = r2.
collision new r1:keyseed; new r2:keyseed; 
	skgen(r1) = skgen(r2) <=(Penccoll)=> r1 = r2.
collision new r1:keyseed; new r2:keyseed; 
	skgen2(r1) = skgen2(r2) <=(Penccoll)=> r1 = r2.

(* Signatures *)

proba Psign.
proba Psigncoll.

fun sign(sblocksize, sskey, sseed): signature.
fun sskgen(skeyseed):sskey.
fun spkgen(skeyseed):spkey.
fun check(sblocksize, spkey, signature): bool.

fun sign2(sblocksize, sskey, sseed): signature.
fun sskgen2(skeyseed):sskey.
fun spkgen2(skeyseed):spkey.
fun check2(sblocksize, spkey, signature): bool.

forall m:sblocksize, r:skeyseed, r2:sseed; 
	check(m, spkgen(r), sign(m, sskgen(r), r2)) = true.
forall m:sblocksize, r:skeyseed, r2:sseed; 
	check2(m, spkgen2(r), sign2(m, sskgen2(r), r2)) = true.

equiv  !N3 new r: skeyseed; (() [2] -> spkgen(r),
			    (x: sblocksize) N2 -> new r2: sseed; sign(x, sskgen(r), r2),
			    (m1: sblocksize, si1:signature) N -> check(m1, spkgen(r), si1)),
       (m: sblocksize, y: spkey, si: signature) N4 [3] -> check(m, y, si) [all]
     <=(N3 * Psign(time, N2))=>
       !N3 new r: skeyseed; (() -> spkgen2(r),
			    (x: sblocksize) N2 -> new r2: sseed; sign2(x, sskgen2(r), r2),
			    (m1: sblocksize, si1:signature) N -> 
                              find j <= N2 suchthat defined(x[j]) && m1 = x[j] && check2(m1, spkgen(r), si1) then true else false),
       (m: sblocksize, y: spkey, si: signature) N4 -> 
		find j <= N2, k <= N3 suchthat defined(x[j,k],r[k]) && y = spkgen2(r[k]) && m = x[j,k] && check2(m, y, si) then true else
		find k <= N3 suchthat defined(r[k]) && y = spkgen2(r[k]) then false else
		check(m,y,si).

collision new r1:skeyseed; new r2:skeyseed; 
	spkgen(r1) = spkgen(r2) <=(Psigncoll)=> r1 = r2.
collision new r1:skeyseed; new r2:skeyseed; 
	spkgen2(r1) = spkgen2(r2) <=(Psigncoll)=> r1 = r2.
collision new r1:skeyseed; new r2:skeyseed; 
	sskgen(r1) = sskgen(r2) <=(Psigncoll)=> r1 = r2.
collision new r1:skeyseed; new r2:skeyseed; 
	sskgen2(r1) = sskgen2(r2) <=(Psigncoll)=> r1 = r2.

(* Queries *)

query secret1 keyA.
query secret1 keyB.
query secret keyA.
(* query secret keyB. *)

channel c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, 
	start, finish.

const A : host.
const B : host.

event beginA(host, host, shkey).
event endB(host, host, shkey).

query x:host, y:host, k:shkey;
	event endB(x,y,k) ==> beginA(x,y,k).
(* query x:host, y:host, k:shkey;
	event inj:endB(x,y,k) ==> inj:beginA(x,y,k). *)

let processA =
	in(c1, (=A, =pkA, cert1:signature, hostX: host, pkX:pkey, cert2:signature));
	if check(concat4(A, pkA), pkS, cert1) then
	if check(concat3(hostX, pkX), pkS, cert2) then 
	new k:shkey;
	new r1:sseed;
	new r2:seed;
	event beginA(A, hostX, k);
        out(c2, (A, pkA, cert1, hostX, pkX, cert2, enc(concat1(k, A, hostX, sign(concat2(k, A, hostX), skA, r1)), pkX, r2)));
	(* OK *)
	in(finish, ());
        if hostX = B then
	(
	let keyA:shkey = k
	)
	else out(c8, k).

let processB =
	in(c3, (hostY:host, pkY:spkey, cert1:signature, =B, =pkB, cert2:signature, m:bitstring));
	if check(concat4(hostY, pkY), pkS, cert1) then
	if check(concat3(B, pkB), pkS, cert2) then 
        let injbot(concat1(k, =hostY, =B, s)) = dec(m,skB) in
	if check(concat2(k, hostY, B), pkY, s) then
	(* OK *)
        if hostY = A then
	(
	event endB(hostY, B, k);
        let keyB:shkey = k
	)
	else out(c9, k).

let processK =
	in(c4, (Khost: host, Kkey: pkey));
	let Rkey:pkey = 
		if Khost = B then pkB else
		Kkey.

let processS = 
	in(c5, (h1: host, h2: host));
	find j2 <= N2 suchthat defined(Khost[j2],Rkey[j2]) && (Khost[j2] = h2) then
	new r3: sseed;
	out(c6, (h2, Rkey[j2], sign(concat3(h2, Rkey[j2]), skS, r3))).

let processSK =
	in(c10, (SKhost: host, SKkey: spkey));
	let SRkey:spkey = 
		if SKhost = A then pkA else
		SKkey.

let processSS = 
	in(c11, (h1: host, h2: host));
	find j2 <= N2 suchthat defined(SKhost[j2],SRkey[j2]) && (SKhost[j2] = h2) then
	new r3: sseed;
	out(c12, (h2, SRkey[j2], sign(concat4(h2, SRkey[j2]), skS, r3))).

process 
	in(start, ());
	new rkA: skeyseed;
	let pkA = spkgen(rkA) in
	let skA = sskgen(rkA) in
	new rkB: keyseed;
	let pkB = pkgen(rkB) in
	let skB = skgen(rkB) in
	new rkS: skeyseed;
	let pkS = spkgen(rkS) in
	let skS = sskgen(rkS) in
	out(c7, (pkA, pkB, pkS));
	((! N processA) |
	 (! N processB) | 
	 (! N processS) |
	 (! N processSS) |
	 (! N2 processK) |
	 (! N2 processSK))


(* EXPECTED
All queries proved.
0.560s (user 0.560s + system 0.000s), max rss 48352K
END *)
