param N.
param N2.
param N3.

type nonce [large,fixed].
type host.
type key [fixed].
type keyseed [fixed].
type seed [fixed].
type macs [fixed].

(* For simplicity, in this first example, I ignore the length of messages *)
(* Shared-key encryption (CPA) *)

proba Penc.

fun enc(bitstring, key, seed): bitstring.
fun enc'(bitstring, key, seed): bitstring.
fun kgen(keyseed):key.
fun dec(bitstring, key): bitstring.

forall m:bitstring, r:keyseed, r2:seed; 
	dec(enc(m, kgen(r), r2), kgen(r)) = m.

const Z: bitstring.
equiv  !N2 new r: keyseed; ((x:bitstring) N -> new r2: seed; enc(x, kgen(r), r2)) 
     <=(N2 * N * Penc)=> 
       !N2 new r: keyseed; ((x:bitstring) N -> new r2: seed; enc'(Z, kgen(r), r2)).

(* Mac *)

proba Pmac.

fun mac(bitstring, key):macs.
fun mac'(bitstring, key):macs.
fun check(bitstring, key, macs): bool.
fun mkgen(keyseed):key.

forall m:bitstring, r:keyseed;
	check(m, mkgen(r), mac(m, mkgen(r))).

equiv !N3 new r: keyseed;(
	 (x: bitstring) N -> mac(x, mkgen(r)),
	 (m: bitstring, ma: macs) N2 -> check(m, mkgen(r), ma))
     <=(N3 * N2 * Pmac)=>
      !N3 new r: keyseed;(
	 (x: bitstring) N -> mac'(x, mkgen(r)),
	 (m: bitstring, ma: macs) N2 -> 
	    find j <= N suchthat defined(x[j]) && (m = x[j]) && (ma = mac'(x[j], mkgen(r))) then true else false).


(* Queries *)

query secret keyA.
query secret keyB.

channel c, start, finish.
const A : host.
const B : host.

let processA = 
	in(c, hb: host);
	new M : nonce;
	new Na : nonce;
	new s1 : seed;
	let ea1 = enc((Na, M, A, hb), Kas, s1) in
	out(c, (M, A, hb, ea1, mac(ea1, mKas)));
	in(c, (=M, ea2: bitstring, ma2: macs));
	if check(ea2, mKas, ma2) then
	let (=Na, ka:bitstring) = dec(ea2, Kas) in
	if hb = B then
	let keyA:bitstring = ka.

let processB =
	in(c, (M: nonce, ha: host, =B, ea:bitstring, ma:macs));
	new Nb : nonce;
	new s2 : seed;
	let e2 = enc((Nb, M, ha, B), Kbs, s2) in
	out(c, let x = mac(e2, mKbs) in (M, ha, B, ea, ma, e2, x));
	in(c, (=M, ea2: bitstring, ma2: macs, eb2: bitstring, mb2: macs));
	if check(eb2, mKbs, mb2) then
	let (=Nb, kb:bitstring) = dec(eb2, Kbs) in
	out(c, (M, ea2, ma2));
	in(finish, =());
	if ha = A then
	let keyB:bitstring = kb.

let processK =
	in(c, (Khost: host, Kkey: key, Kmkey: key));
	let Rkey:key = 
		if Khost = A then Kas else
		if Khost = B then Kbs else
		Kkey
	in
	let Rmkey:key =
		if Khost = A then mKas else
		if Khost = B then mKbs else
		Kmkey.

let processS =
	in(c, (M: nonce, ha: host, hb: host, ea1: bitstring, ma1: macs, eb1: bitstring, mb1: macs));
	find jA <= N2 suchthat defined(Rkey[jA], Rmkey[jA], Khost[jA]) && ha = Khost[jA] then
	let kas = Rkey[jA] in
	let mkas = Rmkey[jA] in
	find jB <= N2 suchthat defined(Rkey[jB], Rmkey[jB], Khost[jB]) && hb = Khost[jB] then
	let kbs = Rkey[jB] in
	let mkbs = Rmkey[jB] in
	if check(ea1, mkas, ma1) then
	let (Na:nonce, =M, =ha, =hb) = dec(ea1, kas) in
	if check(eb1, mkbs, mb1) then
	let (Nb:nonce, =M, =ha, =hb) = dec(eb1, kbs) in
	new rk: keyseed;
	let k = kgen(rk) in
	new s3: seed;
	new s4: seed;
	let e1 = enc((Na, k), kas, s3) in
	let e2 = enc((Nb, k), kbs, s4) in
	out(c, (M, e1, mac(e1, mkas), e2, mac(e2, mkbs))).
	
process 
	in(start, =());
	new rKas: keyseed;
	let Kas = kgen(rKas) in
	new rmKas: keyseed;
	let mKas = mkgen(rmKas) in
	new rKbs: keyseed;
	let Kbs = kgen(rKbs) in
	new rmKbs: keyseed;
	let mKbs = mkgen(rmKbs) in
	out(start, ());
	((! N processA) |
	 (! N processB) | 
	 (! N processS) |
	 (! N2 processK))

(* EXPECTED
All queries proved.
1.920s (user 1.900s + system 0.020s), max rss 100800K
END *)
