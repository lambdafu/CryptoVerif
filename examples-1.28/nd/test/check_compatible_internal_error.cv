(* Caused an internal error
Doing simplify... Internal error: Program point not found in check_compatible_deflist; deflist probably altered since whole_game was set
because find conditions were not scanned in check_compatible_deflist
*)

proof {
show_game occ;
insert 101 "find j <= NU suchthat defined(X[j]) && X[j] = X_s then";
crypto enc;
show_game occ;
insert_event Encrypt 248;
auto
}

param NU, NS, NP, N, N'.

type exponent [large, fixed].
type G [large, fixed].
type passwd [password, fixed].
     (* I want to eliminate collisions with the password in 
     some cases but not others. I want to eliminate them in the protocol
     itself, but not in enc_dec_oracle (because if I eliminate them in
     enc_dec_oracle, the probability of attack will depend on qE/|passwd| 
     and/or qD/|passwd| so it may become too large). *)


type hashinput.
type hash0 [fixed].
type hash1 [fixed,large].
type host.

(* Computational Diffie-Hellman *)

proba pCDH.

expand CDH(G, exponent, g, exp, mult, pCDH).

(* equiv !N new X:G; () -> X <=(0)=> !N new x:exponent; () -> exp(g,x). *)
equiv !N new X:G; (() -> X, (m:exponent) N' [useful_change] -> exp(X,m))
<=(0)=> 
      !N new x:exponent; (() -> exp(g,x), (m:exponent) N' -> exp(g,mult(x,m))).

(* Ideal cipher model *)

type cipherkey [fixed].

expand ICM_cipher(cipherkey, passwd, G, enc, dec).

param qE, qD [noninteractive].
channel ec1, ec2, ec3, ec4.
let enc_dec_oracle =
       (! qE in(ec1, (x:G, ke:passwd)); out(ec2, enc(ck,x,ke)))
     | (! qD in(ec3, (m:G, kd:passwd)); out(ec4, dec(ck,m,kd))).

(* Hash functions in the random oracle model *)

type hashkey [fixed].
(*
Problem: if I use hash(concat(...)), after game transformations I get
equality tests x = concat(y1,y2,y3,y4,y5) that I would like to transform into
x = concat(x1,x2,x3,x4,x5) && x1 = y1 && ... for some x1...x5 but
CryptoVerif cannot do that. For simplicity, I consider only
hash functions with 5 arguments.

expand ROM_hash(hashkey, hashinput, hash0, h0).
expand ROM_hash(hashkey, hashinput, hash1, h1).
fun concat(host, host, G, G, G):hashinput [compos].
*)

param Nh, qH0, qH1, Neq.

fun h0(hashkey, host, host, G, G, G):hash0.

equiv !Nh new hk: hashkey;
         (!N OH(x1: host, x2: host, x3: G, x4: G, x5: G) := h0(hk, x1, x2, x3, x4, x5),
          !Neq Oeq(x1': host, x2': host, x3': G, x4': G, x5': G, r': hash0) := r' = h0(hk, x1', x2', x3', x4', x5'))
      <=(#Oeq/|hash0|)=>
      !Nh (!N OH(x1: host, x2: host, x3: G, x4: G, x5: G) :=
      	        find[unique] j <= N suchthat defined(x1[j],x2[j],x3[j],x4[j],x5[j],r[j]) && 
	   		x1 = x1[j] && x2 = x2[j] && x3 = x3[j] && x4 = x4[j] && x5 = x5[j] then r[j] else
			 new r:hash0; r,
           !Neq Oeq(x1': host, x2': host, x3': G, x4': G, x5': G, r': hash0) :=
      	        find[unique] j <= N suchthat defined(x1[j],x2[j],x3[j],x4[j],x5[j],r[j]) && 
	   		x1' = x1[j] && x2' = x2[j] && x3' = x3[j] && x4' = x4[j] && x5' = x5[j] then r' = r[j] else false).

channel c10, c20.

let hashoracle0 = ! qH0 in(c10, (x1: host, x2: host, x3: G, x4: G, x5: G)); out(c20, h0(hk0,x1,x2,x3,x4,x5)).


fun h1(hashkey, host, host, G, G, G):hash1.

equiv !Nh new hk: hashkey;
         (!N OH(x1: host, x2: host, x3: G, x4: G, x5: G) := h1(hk, x1, x2, x3, x4, x5),
          !Neq Oeq(x1': host, x2': host, x3': G, x4': G, x5': G, r': hash1) := r' = h1(hk, x1', x2', x3', x4', x5'))
      <=(#Oeq/|hash1|)=>
      !Nh (!N OH(x1: host, x2: host, x3: G, x4: G, x5: G) :=
      	        find[unique] j <= N suchthat defined(x1[j],x2[j],x3[j],x4[j],x5[j],r1[j]) && 
	   		x1 = x1[j] && x2 = x2[j] && x3 = x3[j] && x4 = x4[j] && x5 = x5[j] then r1[j] else
			 new r1:hash1; r1,
           !Neq Oeq(x1': host, x2': host, x3': G, x4': G, x5': G, r': hash1) :=
      	   find[unique] j <= N suchthat defined(x1[j],x2[j],x3[j],x4[j],x5[j],r1[j]) && 
	   		x1' = x1[j] && x2' = x2[j] && x3' = x3[j] && x4' = x4[j] && x5' = x5[j] then r' = r1[j] else false).

channel c11, c21.

let hashoracle1 = ! qH1 in(c11, (x11: host, x12: host, x13: G, x14: G, x15: G)); out(c21, h1(hk1,x11,x12,x13,x14,x15)). 

(* Queries *)

query secret sk_u.
query secret sk_s.
query secret sk_p.

channel c1, c2, c3, c4, c5, c6, c7, c8, c9, cp,
	start, finish.

const U : host.
const S : host.

event bad.
(*
event beginA(host, host, shkey).
event endB(host, host, shkey).

query x:host, y:host, k:shkey;
	event endB(x,y,k) ==> beginA(x,y,k).
query x:host, y:host, k:shkey;
	event inj:endB(x,y,k) ==> inj:beginA(x,y,k).
*)

(* Client *)

let processU =
	in(c1, ());
	new x: exponent;
	let X = exp(g,x) in
	out(c2, (U, X));
        in(c5, (=S, Ystar_u: G));
	let Y_u = dec(ck, Ystar_u, pw) in
	let K_u = exp(Y_u, x) in
	let auth_u = h1(hk1, U,S,X,Y_u,K_u) in
	out(c6, auth_u);
	in(c9, ());
	let sk_u: hash0 = h0(hk0, U,S,X,Y_u,K_u).

(* Server *)

let processS =
	in(c3, (=U, X_s: G));
	new y: exponent;
	let Y = exp(g,y) in
	let Ystar = enc(ck, Y, pw) in
	out(c4, (S, Ystar));
	in(c7, auth_s: hash1);
	let K_s = exp(X_s, y) in
	if auth_s = h1(hk1, U,S,X_s,Y,K_s) then
	let sk_s: hash0 = h0(hk0, U,S,X_s,Y,K_s).

(* Sessions that are subject only to a passive attack.
   We send a transcript of the session *)

let processPassive =
        in(cp, ());
        new xp: exponent;
	let Xp = exp(g, xp) in
	new yp: exponent;
	let Yp = exp(g, yp) in
	let Kp = exp(g, mult(xp,yp)) in
	let Ystarp = enc(ck, Yp, pw) in
	let authp = h1(hk1, U, S, Xp, Yp, Kp) in
	let sk_p: hash0 = h0(hk0, U, S, Xp, Yp, Kp) in
	out(cp, (U, Xp, S, Ystarp, authp)).

process 
	in(start, ());
	new hk0: hashkey;
	new hk1: hashkey;
	new ck: cipherkey;
	new pw: passwd;
	out(c8, ());
	((! NU processU) |
	 (! NS processS) | 
	 (! NP processPassive) | enc_dec_oracle | hashoracle0 | hashoracle1)


(* EXPECTED
RESULT Could not prove secrecy of sk_p, secrecy of sk_s, secrecy of sk_u.
2.900s (user 2.900s + system 0.000s), max rss 141904K
END *)
