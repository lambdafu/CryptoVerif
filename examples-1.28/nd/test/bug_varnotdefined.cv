proof{
insert 17 "let keyAB = hkdf1_init_key(hk1, gexp(g, mult(secA, secB))) in";
crypto rom(hkdf1_init_key);
crypto rom(hkdf1_zeroWhisperRatchet);
crypto rom(hkdf_sharedWhisperRatchet);
remove_assign binder "@10_x_493";
remove_assign binder g1_378;
remove_assign binder g2_379;
remove_assign binder g3_380;
remove_assign binder g1_399;
remove_assign binder g2_400;
remove_assign binder g3_401;
remove_assign binder shared_406;
remove_assign binder shared_385;
crypto gdh(gexp) "variables: secA -> @8_a, secB -> @8_b, ephSecAB -> @8_b, ephSecBA -> @8_a, ephSecBA' -> @8_a"
}

type mkey [fixed,large]. (* Mac key *)
type ekey [fixed,large]. (* Encryption key *)
type rkey [fixed,large]. 
type ckey [fixed,large].

type Z [bounded,large]. (* Exponents *)
type G [bounded,large]. (* Diffie-Hellman group *)

(* Type of principals *)
type prin [bounded].

(* Honest principals *)
const alice, bob: prin.

(* Gap Diffie-Hellman *)

proba pGDH.
expand GDH(G, Z, g, gexp, mult, pGDH).

(* Key derivation functions: Random oracles *)

(* Generate long-term MAC key *)

type hashkey1 [large,fixed].
expand ROM_hash(hashkey1, G, mkey, hkdf1_init_key).

param qH1 [noninteractive].
channel c1h1, c2h1.
let hashoracle1 = ! qH1 in(c1h1, x:G); out(c2h1, hkdf1_init_key(hk1,x)). 

(* Generate initial rkey *)

type hashkey2 [large,fixed].
expand ROM_hash_triple(hashkey2, G, G, G, rkey, hkdf1_zeroWhisperRatchet).

param qH2 [noninteractive].
channel c1h2, c2h2.
let hashoracle2 = ! qH2 in(c1h2, (x1:G, x2:G, x3:G)); out(c2h2, hkdf1_zeroWhisperRatchet(hk2,x1,x2,x3)). 

(* Generate message keys: encryption and MAC keys *)

type hashkey4 [large,fixed].
type emkey [large,fixed].
expand ROM_hash(hashkey4, ckey, emkey, hkdf_zeroWhisperMessageKeys).

param qH4 [noninteractive].
channel c1h4, c2h4.
let hashoracle4 = ! qH4 in(c1h4, (x:ckey)); out(c2h4, hkdf_zeroWhisperMessageKeys(hk4,x)). 

(* Extraction of encryption and MAC keys from the pair *)

fun get_ekey(emkey):ekey.
fun get_mkey(emkey):mkey.
param Nk.

equiv emkey
    !Nk new r:emkey; (O1():= get_ekey(r), O2():= get_mkey(r))
<=(0)=>
    !Nk (O1():= new k1: ekey; k1, O2():= new k2: mkey; k2).

(* Generate next rkey and ckey *)

type hashkey6 [large,fixed].
type rckey [large,fixed].
expand ROM_hash_pair(hashkey6, rkey, G, rckey, hkdf_sharedWhisperRatchet).

param qH6 [noninteractive].
channel c1h6, c2h6.
let hashoracle6 = ! qH6 in(c1h6, (x1:rkey, x2:G)); out(c2h6, hkdf_sharedWhisperRatchet(hk6,x1,x2)). 

(* Extraction of rkey and ckey from the pair *)

fun get_rkey(rckey):rkey.
fun get_ckey(rckey):ckey.

equiv rckey
    !Nk new r:rckey; (O1():= get_rkey(r), O2():= get_ckey(r))
<=(0)=>
    !Nk (O1():= new k1: rkey; k1, O2():= new k2: ckey; k2).

(* End of key derivation functions *)

(* MAC *)

define SUF_CMA_mac_nokgen(mkey, macinput, macres, mac, check, Pmac) {

param N, N2, N3.

const mark: bitstring.

fun mac(macinput, mkey):macres.
fun check(macinput, mkey, macres): bool.

fun mac2(macinput, mkey):macres.

forall m:macinput, k:mkey;
	check(m, k, mac(m, k)).

equiv suf_cma(mac)
      ! N3 new k: mkey;(
	 !N Omac(x: macinput) := mac(x, k),
	 !N2 Ocheck(m: macinput, ma: macres) := check(m, k, ma))
     <=(N3 * Pmac(time + (N3-1)*(N*time(mac,maxlength(x)) + N2*time(check,maxlength(m),maxlength(ma))), N, N2, max(maxlength(x), maxlength(m))))=> [computational]
      ! N3 new k: mkey [unchanged];(
	 !N Omac(x: macinput) := let ma2:macres = mac2(x, k) in ma2,
	 !N2 Ocheck(m: macinput, ma: macres) := 
	    find j <= N suchthat defined(x[j], ma2[j]) && (m = x[j]) && (ma = ma2[j]) then true else false).

}


type macres [fixed].
proba Pmac.
expand SUF_CMA_mac_nokgen(mkey, bitstring, macres, hmac, check, Pmac).

(* Encryption in counter mode *)

type t_ctr [fixed].

param N, N2.

fun enc(ekey, t_ctr, bitstring): bitstring.
fun dec(ekey, bitstring): bitstring.

forall k: ekey, ctr: t_ctr, msg: bitstring;
      dec(k, enc(k, ctr, msg)) = msg.

(* encryption is IND-CPA provided ctr is distinct
   for each encryption *)

proba Penc.
	(* Penc(t, N, l) is the probability of breaking the IND-CPA property of encryption
	   in time t, with N queries to the left-right encryption oracle, of length at most l
	   (for one encryption key). *)

(* Zero(x) is a bitstring of the same length as x, containing only zeroes *)
fun Zero(bitstring): bitstring.

fun enc'(ekey, t_ctr, bitstring): bitstring.

event repeated_ctr.

equiv 
      !N2 new k: ekey; !N Oenc(ctr: t_ctr, msg: bitstring) := enc(k, ctr, msg)
<=(N2 * Penc(time + (N2-1)*(N*time(enc, maxlength(msg)) + N*time(Zero, maxlength(msg))), N, maxlength(msg)))=>
      !N2 new k: ekey; !N Oenc(ctr: t_ctr, msg: bitstring) := 
      	      	 	         find i <= N suchthat defined(ctr[i],r[i]) && ctr = ctr[i] then
				     event_abort repeated_ctr
				 else
				     let r: bitstring = enc'(k, ctr, Zero(msg)) in
				     r.

(* Counter - not used for now *)

type int.
const czero: int.
fun incr(int):int.

(* test(b,x,y) returns x when b = true and y when b is false *)

fun test(bool, bitstring, bitstring): bitstring.
forall x:bitstring,y:bitstring; test(true,x,y) = x.
forall x:bitstring,y:bitstring; test(false,x,y) = y.
forall b:bool,x:bitstring; test(b,x,x) = x.
forall b:bool,x:bitstring,y:bitstring; Zero(test(b,x,y)) = test(b,Zero(x),Zero(y)).


fun concat3(prin,prin,G):bitstring [compos].
fun concat4(prin,prin,G,G): bitstring [compos].
fun concatmsg(prin,prin,G,bitstring):bitstring [compos].

forall x1:prin,x2:prin,x3:G,y1:prin,y2:prin,y3:G,y4:G;
  concat3(x1,x2,x3) <> concat4(y1,y2,y3,y4).

param Nsend, Nrecv.
channel start, ch0, recprin, outprin, chprin, ch1, ch2, ch3, ch3bis, ch4, ch5, ch6, ch7, ch8, ch9.

(* Security properties *)

event Send(prin, prin, bitstring).
event Recv(prin, prin, bitstring).

query a:prin,b:prin,m:bitstring;
      event Recv(a,b,m) ==> Send(a,b,m).

query secret secb. (* Actually can be secret only when SendMsg is 
      executed only for sessions between honest participants.
      This is true for all sessions in this file.  *)

(* I do not look at forward secrecy for now. 
   If I wanted to do it, I should give a query
   that leaks secA/secB. *)

(* Alice (a = alice) running the protocol as initiator, 
   with a participant b with public key pubB
   (b may be bob but also a dishonest participant). *)

let SendAKE_Alice_pubB =
   (* Key exchange *)
   in(ch1, (a: prin, b:prin));
   if a = alice then
   new ephSecAB: Z;
   let ephPubAB = gexp(g, ephSecAB) in
   let mackey = hkdf1_init_key(hk1, gexp(pubB,secA)) in
   let tag = hmac(concat3(a,b,ephPubAB), mackey) in
   out(ch2, (a,b,ephPubAB,tag));
   (* 2nd part of key exchange, using prekey ephPubAB *)
   in(ch3, (=b, =a, ephPubBA: G, tag2: macres));
   if check(concat4(b,a,ephPubBA,ephPubAB), mackey,tag2) then
   let g1 = gexp(pubB,ephSecAB) in
   let g2 = gexp(ephPubBA, secA) in
   let g3 = gexp(ephPubBA, ephSecAB) in
   let rkAB = hkdf1_zeroWhisperRatchet(hk2, g1, g2, g3) in
   out(ch3bis,());
   (* Message received *)
   in(ch8,(=b,=a,ephPubBA':G,msgenc:bitstring,tag:macres));
   let shared = gexp(ephPubBA',ephSecAB) in
   let rckBA' = hkdf_sharedWhisperRatchet(hk6,rkAB,shared) in
   let rkBA' = get_rkey(rckBA') in
   let ckBA' = get_ckey(rckBA') in
   let kENCMAC = hkdf_zeroWhisperMessageKeys(hk4, ckBA') in
   let kENC = get_ekey(kENCMAC) in
   let kMAC = get_mkey(kENCMAC) in
   if check(concatmsg(b,a,ephPubBA',msgenc),kMAC,tag) then
   let msg = dec(kENC,msgenc) in
   event Recv(b,a,msg).

(* Bob (b = bob) running the protocol as responder, 
   with a participant a with public key pubA
   (a may be alice but also a dishonest participant). *)

let RecvAKE_Bob_pubA =
   (* Key exchange *)
   in(ch4,(a:prin,b:prin,ephPubAB:G,tag:macres));
   if b = bob then
   let mackey = hkdf1_init_key(hk1, gexp(pubA,secB)) in
   if check(concat3(a,b,ephPubAB),mackey,tag) then
   new ephSecBA: Z;
   let ephPubBA = gexp(g, ephSecBA) in
   let g1 = gexp(ephPubAB, secB) in
   let g2 = gexp(pubA, ephSecBA) in
   let g3 = gexp(ephPubAB, ephSecBA) in
   let rkAB = hkdf1_zeroWhisperRatchet(hk2, g1, g2, g3) in
   let tag2 = hmac(concat4(b,a,ephPubBA,ephPubAB),mackey) in
   out(ch5,(b,a,ephPubBA,tag2));
   (* Send message m1 or m2 *)
   in(ch6, (m1: bitstring, m2:bitstring, ctr: t_ctr));
     (* Since the key is renewed at each message, it may not
        be necessary that the counters be distinct *)
     (* Check that m1 and m2 have the same length *)
   if Zero(m1) = Zero(m2) then
   (* Send either m1 or m2 depending on the value of b *)
   let msg = test(secb, m1, m2) in
   event Send(b,a,msg);
   new ephSecBA': Z;
   let ephPubBA' = gexp(g, ephSecBA') in
   let shared = gexp(ephPubAB,ephSecBA') in
   let rckBA' = hkdf_sharedWhisperRatchet(hk6,rkAB,shared) in
   let rkBA' = get_rkey(rckBA') in
   let ckBA' = get_ckey(rckBA') in
   let kENCMAC = hkdf_zeroWhisperMessageKeys(hk4, ckBA') in
   let kENC = get_ekey(kENCMAC) in
   let kMAC = get_mkey(kENCMAC) in
   let msgenc = enc(kENC,ctr,msg) in
   let tag:macres = hmac(concatmsg(a,b,ephPubBA', msgenc),kMAC) in
   out (ch7, (b,a,ephPubBA', msgenc, tag)).


process
    in(start, ());
    new secb: bool;
    new hk1: hashkey1;
    new hk2: hashkey2;
    new hk4: hashkey4;
    new hk6: hashkey6;
    new secA:Z;
    let pubA = gexp(g,secA) in
    new secB:Z;
    let pubB = gexp(g,secB) in
    out(outprin,(pubA,pubB));
    (
      (!Nsend SendAKE_Alice_pubB)
    | (!Nrecv RecvAKE_Bob_pubA)
    | hashoracle1 | hashoracle2 | hashoracle4 | hashoracle6)


(* EXPECTED
RESULT Could not prove secrecy of secb, event Recv(a, b, m) ==> Send(a, b, m).
1.652s (user 1.604s + system 0.048s), max rss 206256K
END *)
