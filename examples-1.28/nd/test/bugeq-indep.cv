param n, m, m', q.

type S [large,fixed].
type D [large,fixed].

fun f(S,S): D.
fun g(S,S): D.

equiv
    !n new a:S; new b:S;
      () -> f(a,b)
<=(0)=>
    !n new a:S; new b:S;
      () -> g(a,b).



query secret test.

channel dummy, start.

(* CryptoVerif assumes that all restrictions used in an equivalence
are defined at all expressions that occur in the equivalence. This is not
true when some expressions do not use all restrictions. For instance,
here f(b,x) in the equivalence does not use a. As a result, a need not be
defined at f(b,x). This is the case in processC above; a is defined only after
f(b,x). The problem is that, after the transformation, CryptoVerif replaces
new a:S with new c_8:S and removes new b:S, so c_8 is not defined at f(c_8,x):

Game 2 is
in(start, ());
new test: S;
out(dummy, test);
! !_7 <= q
in(dummy[!_7], x: D);
out(dummy[!_7], f(c_8, x));
in(dummy[!_7], y: D);
new c_8: S;                 <=== c_8 defined too late!
out(dummy[!_7], g'(c_8, y))

*)



process
  in(start, ());
  new test:S;
  new a:S;
  out(dummy, (test, f(a,a)))



(* EXPECTED
RESULT Could not prove secrecy of test.
0.020s (user 0.010s + system 0.010s), max rss 15488K
END *)
