(* Needham Schroeder public key protocol. *)

set backtrackOnCrypto = true.
(* set interactiveMode = true. *)

(* The proof should be

crypto sign rkS
crypto enc rkA
crypto enc rkB
auto


crypto sign rkS
crypto enc rkA
crypto enc rkB
crypto hash
success		[FIXED - but does not work with "auto" instead of "success"!!!
		 "auto" should check for immediate success -- now done]


SArename Rkey
crypto sign rkS
crypto enc rkA
crypto enc rkB
crypto hash
SArename Na_28
simplify
success
auto
quit

SArename Na_28 could be advised by the dependency analysis,
when a variable has several definitions, and some of its usages are not ok
for the dependency analysis. Would that create too many SArename pieces of
advice?


A fully automatic proof does not work, probably because it does "crypto hash" too early. Now it works with backtracking!

*)

param N.
param N2.
param N3.
param N4.

type nonce [large,fixed].
type host [bounded].
type pkey [bounded].
type skey [bounded].
type keyseed [large,fixed].
type seed [fixed].
type spkey [bounded].
type sskey [bounded].
type skeyseed [large,fixed].
type sseed [fixed].
type signature [bounded].
type blocksize [fixed].
type blocksizebot [bounded].
type sblocksize [fixed].
type shkey [fixed].

fun concat1(nonce, host):blocksize [compos].
fun concat2(nonce, nonce, host):blocksize [compos].
fun concat3(pkey, host):sblocksize [compos].
fun pad(nonce):blocksize [compos].

forall z:nonce,t:nonce,u:host,y2:nonce,z2:host;
	concat2(z,t,u) <> concat1(y2,z2).
forall y:nonce,y2:nonce,z2:host;
	pad(y) <> concat1(y2,z2).
forall z:nonce,t:nonce,u:host,y2:nonce;
	concat2(z,t,u) <> pad(y2).

(* Public-key encryption (CCA2) *)

proba Penc.
proba Penccoll.

fun enc(blocksize, pkey, seed): bitstring.
fun skgen(keyseed):skey.
fun pkgen(keyseed):pkey.
fun dec(bitstring, skey): blocksizebot.

fun enc2(blocksize, pkey, seed): bitstring.
fun skgen2(keyseed):skey.
fun pkgen2(keyseed):pkey.
fun dec2(bitstring, skey): blocksizebot.

fun injbot(blocksize):blocksizebot [compos].

const Z:blocksize.

forall m:blocksize, r:keyseed, r2:seed; 
	dec(enc(m, pkgen(r), r2), skgen(r)) = injbot(m).
forall m:blocksize, r:keyseed, r2:seed; 
	dec2(enc2(m, pkgen2(r), r2), skgen2(r)) = injbot(m).

equiv  !N3 new r: keyseed; (() [2] -> pkgen(r),
			    (m:bitstring) N2 -> dec(m, skgen(r)),
                            (x1:blocksize) N -> new r1:seed; enc(x1, pkgen(r),r1)),
       (x:blocksize, y:pkey) N4 [3] -> new r2:seed; enc(x,y,r2) [all]
     <=(N3 * N4 * Penc(time, N2))=> 
       !N3 new r: keyseed; (() -> pkgen2(r),
			    (m:bitstring) N2 -> 
                find j <= N suchthat defined(m1[j],x1[j]) && m = m1[j] then injbot(x1[j]) else
		find j <= N4 suchthat defined(m2[j],y[j],x[j]) &&
		y[j] = pkgen2(r) && m = m2[j] then injbot(x[j]) else dec2(m, skgen2(r)),
		            (x1:blocksize) N -> 
                        new r1:seed; 
			let m1:bitstring = enc2(Z, pkgen2(r), r1) in
			m1),
       (x:blocksize, y:pkey) N4 -> 
		find k <= N3 suchthat defined(r[k]) && y = pkgen2(r[k]) then
			(new r2:seed; 
			let m2:bitstring = enc2(Z, y, r2) in
			m2)
		else new r3:seed; enc(x,y,r3).

collision new r1:keyseed; new r2:keyseed; 
	pkgen(r1) = pkgen(r2) <=(Penccoll)=> r1 = r2.
collision new r1:keyseed; new r2:keyseed; 
	pkgen2(r1) = pkgen2(r2) <=(Penccoll)=> r1 = r2.
collision new r1:keyseed; new r2:keyseed; 
	skgen(r1) = skgen(r2) <=(Penccoll)=> r1 = r2.
collision new r1:keyseed; new r2:keyseed; 
	skgen2(r1) = skgen2(r2) <=(Penccoll)=> r1 = r2.

(* Signatures *)

proba Psign.
proba Psigncoll.

fun sign(sblocksize, sskey, sseed): signature.
fun sskgen(skeyseed):sskey.
fun spkgen(skeyseed):spkey.
fun check(sblocksize, spkey, signature): bool.

fun sign2(sblocksize, sskey, sseed): signature.
fun sskgen2(skeyseed):sskey.
fun spkgen2(skeyseed):spkey.
fun check2(sblocksize, spkey, signature): bool.

forall m:sblocksize, r:skeyseed, r2:sseed; 
	check(m, spkgen(r), sign(m, sskgen(r), r2)) = true.
forall m:sblocksize, r:skeyseed, r2:sseed; 
	check2(m, spkgen2(r), sign2(m, sskgen2(r), r2)) = true.

equiv  !N3 new r: skeyseed; (() [2] -> spkgen(r),
			    (x: sblocksize) N2 -> new r2: sseed; sign(x, sskgen(r), r2),
			    (m1: sblocksize, si1:signature) N -> check(m1, spkgen(r), si1)),
       (m: sblocksize, y: spkey, si: signature) N4 [3] -> check(m, y, si) [all]
     <=(N3 * Psign(time, N2))=>
       !N3 new r: skeyseed; (() -> spkgen2(r),
			    (x: sblocksize) N2 -> new r2: sseed; sign2(x, sskgen2(r), r2),
			    (m1: sblocksize, si1:signature) N -> 
                              find j <= N2 suchthat defined(x[j]) && m1 = x[j] && check2(m1, spkgen(r), si1) then true else false),
       (m: sblocksize, y: spkey, si: signature) N4 -> 
		find j <= N2, k <= N3 suchthat defined(x[j,k],r[k]) && y = spkgen2(r[k]) && m = x[j,k] && check2(m, y, si) then true else
		find k <= N3 suchthat defined(r[k]) && y = spkgen2(r[k]) then false else
		check(m,y,si).

collision new r1:skeyseed; new r2:skeyseed; 
	spkgen(r1) = spkgen(r2) <=(Psigncoll)=> r1 = r2.
collision new r1:skeyseed; new r2:skeyseed; 
	spkgen2(r1) = spkgen2(r2) <=(Psigncoll)=> r1 = r2.
collision new r1:skeyseed; new r2:skeyseed; 
	sskgen(r1) = sskgen(r2) <=(Psigncoll)=> r1 = r2.
collision new r1:skeyseed; new r2:skeyseed; 
	sskgen2(r1) = sskgen2(r2) <=(Psigncoll)=> r1 = r2.

(* Hash function, random oracle model *)

fun hash(bitstring):shkey.

equiv (x:bitstring) N -> hash(x) [all]
      <=(0)=>
      (x:bitstring) N -> find j <= N suchthat defined(x[j],r[j]) && otheruses(r[j]) && x= x[j] then r[j] else
			 new r:shkey; r.

(* Queries *)

query secret1 keyA.
query secret1 keyB.
query secret keyA.
query secret keyB.

channel c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, 
	c15, c16, c17, c18, c19, start, finish.
const A : host.
const B : host.

let processA =
	in(c1, hostX: host);
	out(c2, (A, hostX));
	in(c3, (pkX: pkey, =hostX, ms: signature));
	if check(concat3(pkX, hostX), pkS, ms) then
	(* Message 3 *)
        new Na: nonce;
	new r3: seed;
        out(c4, enc(concat1(Na, A), pkX, r3));
	(* Message 6 *)
        in(c5, m: bitstring);
	let injbot(concat2(=Na, Nb, =hostX)) = dec(m, skA) in
	(* Message 7 *)
	new r4: seed;
	out(c6, enc(pad(Nb), pkX, r4));
	(* OK *)
	in(finish, ());
	let k = hash((Na,Nb)) in
	if hostX = B then
	(
	let keyA:shkey = k
	)
	else out(c16, k).

let processB =
	(* Message 3 *)
	in(c7, m:bitstring);
	let injbot(concat1(Na, hostY)) = dec(m, skB) in
	out(c8, (B, hostY));
	in(c9, (pkY: pkey, =hostY, ms: signature));
	if check(concat3(pkY, hostY), pkS, ms) then
	(* Message 6 *)
	new Nb: nonce;
	new r5: seed;
	out(c10, enc(concat2(Na, Nb, B), pkY, r5));
	(* Message 7 *)
	in(c11, m3: bitstring);
	let injbot(pad(=Nb)) = dec(m3, skB) in
	(* OK *)
	let k = hash((Na,Nb)) in
	if hostY = A then
	(
	let keyB: shkey = k
	)
	else out(c17, k).

let processK =
	in(c12, (Khost: host, Kkey: pkey));
	let Rkey:pkey = 
		if Khost = A then pkA else
		if Khost = B then pkB else
		Kkey.

let processS = 
	in(c13, (h1: host, h2: host));
	find j2 <= N2 suchthat defined(Khost[j2],Rkey[j2]) && (Khost[j2] = h2) then
	new r3: sseed;
	out(c14, (Rkey[j2], h2, sign(concat3(Rkey[j2], h2), skS, r3))).

process 
	in(start, ());
	new rkA: keyseed;
	let pkA = pkgen(rkA) in
	let skA = skgen(rkA) in
	new rkB: keyseed;
	let pkB = pkgen(rkB) in
	let skB = skgen(rkB) in
	new rkS: skeyseed;
	let pkS = spkgen(rkS) in
	let skS = sskgen(rkS) in
	out(c15, (pkA, pkB, pkS));
	((! N processA) |
	 (! N processB) | 
	 (! N processS) |
	 (! N2 processK) |
	 (! N3 in(c18,x:bitstring);out(c19,hash(x))))


(* EXPECTED
All queries proved.
195.010s (user 194.760s + system 0.250s), max rss 883200K
END *)
