(*

Woo and Lam public-key auth protocol (1997)

A -> B: A
B -> A: N
A -> B: { A, B, N }_skA
B -> S: A
S -> B: A, { A, pkA }_skS

Correct


SArename Rkey
crypto sign rkS
crypto sign rkA
success

*)

(* set interactiveMode = true. *)

param N, N2, N3, N4, N5.

type nonce [large,fixed].
type host [bounded].
type pkey [bounded].
type skey [bounded].
type keyseed [large,fixed].
type seed [fixed].
type signature [bounded].
type blocksize [fixed].
type blocksizebot [bounded].

fun concat1(host, host, nonce):blocksize [compos].
fun concat2(host, pkey):blocksize [compos].

forall x:host, y:host, z:nonce, x2:host, y2:pkey;
	concat1(x,y,z) <> concat2(x2,y2).

(* Signatures *)

proba Psign.
proba Psigncoll.

fun sign(blocksize, skey, seed): signature.
fun sskgen(keyseed):skey.
fun spkgen(keyseed):pkey.
fun check(blocksize, pkey, signature): bool.

fun sign2(blocksize, skey, seed): signature.
fun sskgen2(keyseed):skey.
fun spkgen2(keyseed):pkey.
fun check2(blocksize, pkey, signature): bool.

forall m:blocksize, r:keyseed, r2:seed; 
	check(m, spkgen(r), sign(m, sskgen(r), r2)) = true.
forall m:blocksize, r:keyseed, r2:seed; 
	check2(m, spkgen2(r), sign2(m, sskgen2(r), r2)) = true.


(*
equiv  !N3 new r: keyseed; (() -> spkgen(r),
			    (x: blocksize) N2 -> new r2: seed; sign(x, sskgen(r), r2)),
       (m: blocksize, y: pkey, si: signature) N4 -> check(m, y, si) [all]
     <=(N3 * Psign(time, N2))=>
       !N3 new r: keyseed; (() -> spkgen2(r),
			    (x: blocksize) N2 -> new r2: seed; sign2(x, sskgen2(r), r2)),
       (m: blocksize, y: pkey, si: signature) N4 -> 
		find j <= N2, k <= N3 suchthat defined(x[j,k],r[k]) && y = spkgen2(r[k]) && m = x[j,k] && check2(m, y, si) then true else
		find k <= N3 suchthat defined(r[k]) && y = spkgen2(r[k]) then false else
		check(m,y,si).

 New definition to automate by using priorities. *)

equiv  !N3 new r: keyseed; (() [2] -> spkgen(r),
			    (x: blocksize) N2 -> new r2: seed; sign(x, sskgen(r), r2),
                            (m1: blocksize, si1:signature) N5 -> check(m1, spkgen(r), si1)),
       (m: blocksize, y: pkey, si: signature) N4 [3] -> check(m, y, si) [all]
     <=(N3 * Psign(time, N2))=>
       !N3 new r: keyseed; (() -> spkgen2(r),
			    (x: blocksize) N2 -> new r2: seed; sign2(x, sskgen2(r), r2),
                            (m1: blocksize, si1:signature) N5 -> 
                              find j <= N2 suchthat defined(x[j]) && m1 = x[j] && check2(m1, spkgen(r), si1) then true else false),
       (m: blocksize, y: pkey, si: signature) N4 -> 
		find j <= N2, k <= N3 suchthat defined(x[j,k],r[k]) && y = spkgen2(r[k]) && m = x[j,k] && check2(m, y, si) then true else
		find k <= N3 suchthat defined(r[k]) && y = spkgen2(r[k]) then false else
		check(m,y,si).


collision new r1:keyseed; new r2:keyseed; 
	spkgen(r1) = spkgen(r2) <=(Psigncoll)=> r1 = r2.
collision new r1:keyseed; new r2:keyseed; 
	spkgen2(r1) = spkgen2(r2) <=(Psigncoll)=> r1 = r2.
collision new r1:keyseed; new r2:keyseed; 
	sskgen(r1) = sskgen(r2) <=(Psigncoll)=> r1 = r2.
collision new r1:keyseed; new r2:keyseed; 
	sskgen2(r1) = sskgen2(r2) <=(Psigncoll)=> r1 = r2.

(* Queries *)

channel c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13,
	start, finish.

const A:host.
const B:host.

event beginA(host).
event beginAfull(host,host,nonce).
event endB(host, host, nonce).

query x:host, y:host, z:nonce;
	event endB(x,y,z) ==> beginAfull(x,y,z).
query x:host, y:host, z:nonce;
	event endB(x,y,z) ==> beginA(y).
query x:host, y:host, z:nonce;
	event inj:endB(x,y,z) ==> inj:beginAfull(x,y,z).
query x:host, y:host, z:nonce;
	event inj:endB(x,y,z) ==> inj:beginA(y).

let processA =
	in(c1, hostB0:host);
	event beginA(hostB0);
	out(c2, A);
	in(c3, n:nonce);
	event beginAfull(A, hostB0, n);
	new r1:seed;
	out(c4, sign(concat1(A, hostB0, n), skA, r1)).

let processB =
	in(c5, hostA0:host);
	new n:nonce;
	out(c6, n);
	in(c7, m:signature);
	out(c8, hostA0);
	in(c9, (=hostA0, pkA2:pkey, m4:signature));
	if check(concat2(hostA0, pkA2), pkS, m4) then
	if check(concat1(hostA0, B, n), pkA2, m) then
	(* OK *)
	if hostA0 = A then
	event endB(hostA0, B, n).


let processS =
	in(c10, hostA:host);
	find j2 <= N2 suchthat defined(Khost[j2],Rkey[j2]) && (Khost[j2] = hostA) then
	let pka = Rkey[j2] in
	new r2:seed;
	out(c11, (hostA, pka, sign(concat2(hostA, pka), skS, r2))).

let processK =
	in(c12, (Khost: host, Kkey: pkey));
	let Rkey:pkey = 
		if Khost = A then pkA else
		if Khost = B then pkB else
		Kkey.

process 
	in(start, ());
	new rkA: keyseed;
	let pkA = spkgen(rkA) in
	let skA = sskgen(rkA) in
	new rkB: keyseed;
	let pkB = spkgen(rkB) in
	let skB = sskgen(rkB) in
	new rkS: keyseed;
	let pkS = spkgen(rkS) in
	let skS = sskgen(rkS) in
	out(c13, (pkA, pkB, pkS));
	((! N processA) |
	 (! N processB) | 
	 (! N processS) |
	 (! N2 processK))


(* EXPECTED
All queries proved.
0.050s (user 0.050s + system 0.000s), max rss 24032K
END *)
