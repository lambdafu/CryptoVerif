(* FDH encryption scheme (CPA) *)

proof {
crypto hash;
remove_assign binder pk;
crypto f r;
show_game;
crypto xor r_78;
success
}


param N.
param N2.
param N3.
param N4.
param N5.
param N6.
param N7.

type pkey.
type skey.
type keyseed [large,fixed].
type hasht [large,fixed].
type seed [large,fixed]. 

(* One-way trapdoor permutation *)

proba POW.

const mark:bitstring.
fun pkgen(keyseed):pkey.
fun pkgen2(keyseed):pkey.
fun skgen(keyseed):skey.
fun f(pkey, seed):seed.
fun f2(pkey, seed):seed.
fun mf(skey, seed):seed.

forall r:keyseed, x:seed; mf(skgen(r), f(pkgen(r), x)) = x.

forall k:pkey, x:seed, x2:seed; (f(k,x) = f(k,x2)) = (x = x2).

(*
equiv !N new y:seed; (k:pkey) -> y
<=(0)=> 
      !N new y:seed; (k:pkey) -> f(k,y).

The equivalence above is ok, but for manual proofs only. (It can be applied
everywhere.) The one below can be used in automatic proofs.
*)

equiv !N new r: keyseed; (
	!N2 () -> pkgen(r),
	!N3 new y:seed; (() N4 -> mf(skgen(r),y), () N5 -> y))
<=(0)=>
      !N new r: keyseed; (
	!N2 () -> pkgen(r),
	!N3 new y:seed; (() N4 -> y, () N5 -> f(pkgen(r), y))).


equiv !N new r: keyseed; (
	!N2 () -> pkgen(r),
	!N3 new y: seed; (() N4 -> f(pkgen(r), y),
		           (x:seed) N5 -> x = y,
		           () N6 -> y))
<=(N * N3 * POW(time))=>
      !N new r: keyseed; (
	!N2 () -> pkgen2(r),
	!N3 new y: seed; (() N4 -> f2(pkgen2(r), y),
		           (x:seed) N5 -> find j <= N6 suchthat defined(k[j]) && true then x = y else false,
		           () N6 -> let k:bitstring = mark in y)).

(* Hash function, random oracle model *)

fun hash(seed):hasht.

equiv (x:seed) N -> hash(x) [all]
      <=(0)=>
      (x:seed) N -> find j <= N suchthat defined(x[j],r[j]) && x= x[j] then r[j] else
		    new r:hasht; r.

(* Xor *)

fun xor(hasht,hasht):hasht.
equation commut(xor).

equiv !N new a:hasht; (x:hasht) -> xor(a,x)
      <=(0)=>
      !N new a:hasht; (x:hasht) -> a.

(* Implementing a test as a function.
   Useful to avoid expanding if, which is necessary for this proof. *)

fun test(bool, hasht, hasht):hasht.
forall x:hasht,y:hasht; test(true,x,y) = x.
forall x:hasht,y:hasht; test(false,x,y) = y.

(* Queries *)

query secret b1.

channel c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15,
	start, finish.

let processH =
	! N
	in(c1, x:seed);
	out(c2, hash(x)).

let processE =
	! N2
	in(c3, m:hasht);
	new x:seed;
	let a = f(pk,x) in
	let b = xor(hash(x), m) in
	out(c4, (a,b)).

let processT = 
	in(c7, (m1:hasht, m2:hasht));
	new b1:bool;
	(* The next line is equivalent to an "if" that will not be
	expanded. This is necessary for the system to succeed in
	proving the protocol. *)
	let menc = test(b1, m1, m2) in
	new x:seed;
	let a = f(pk,x) in
	let b = xor(hash(x), menc) in
	out(c8, (a,b)).

process 
	in(start, =());
	new r:keyseed; 
	let sk = skgen(r) in
	let pk = pkgen(r) in
	out(c9, pk);
	(processH | processE | processT)


(* EXPECTED
All queries proved.
0.030s (user 0.030s + system 0.000s), max rss 19296K
END *)
