
(* Signed Diffie-Hellman protocol *)

proof {
crypto uf_cma(sign);
auto
}

param N, N2.

type host.
type keyseed [large,fixed].
type seed [fixed].
type pkey [bounded].
type skey [bounded].
type blocksize.
type signature.

type Z [large,fixed].
type G [large,fixed].
type K [large,fixed].
type D [fixed].

(* the CDH assumption *) 

proba pCDH.

expand CDH(G, Z, g, exp, mult, pCDH).

(* h in the random oracle model *)

type hashkey [fixed].

expand ROM_hash(hashkey, G, D, h).

param nH [noninteractive].
channel hc1, hc2.
let processH = ! nH in(hc1, x: G); out(hc2, h(hk,x)).

(* signatures *)

fun concatB(host, host, G, G):blocksize [compos].
    
proba Psign.
proba Psigncoll.

expand UF_CMA_signature(keyseed, pkey, skey, blocksize, signature, seed, skgen, pkgen, sign, check, Psign, Psigncoll).

const A,B:host.

(* query *)
query secret keyA.

channel start, cstart, cA1, cA2, cA3, cA4, cA5, cA6, cB1, cB2, cB3, cB4, cB5, cH, cHret, cK.

let processA = 
  in(cA1, (hostB: host));
  new a:Z;
  let ga = exp(g,a) in
  out(cA2, (A, hostB, ga));
  in(cA3, (=A, =hostB, gb:G, s:signature));
  find j2 <= N2 suchthat defined(Khost[j2],Rkey[j2]) && (Khost[j2] = hostB) then
  let pkhostB = Rkey[j2] in
  if check(concatB(A, hostB, ga, gb), pkhostB, s) then
  new r2: seed;
  let gab = exp(gb, a) in
  let kA = h(hk,gab) in 
  (* OK *)
  if hostB = B then 
  (let keyA:D = kA)
  else
   out(cA6, kA).

let processB =
  in(cB1, (hostA:host, =B, ga:G));
  new b:Z;
  let gb = exp(g,b) in
  new r1:seed;
  let gab = exp(ga, b) in
  let kB = h(hk,gab) in
  out(cB2, (hostA, B, gb, sign(concatB(hostA, B, ga, gb), skB, r1))).

let processK =
  !N2
  in(cK, (Khost: host, Kkey: pkey));
  let Rkey:pkey = 
		if Khost = B then pkB else
		Kkey.

process
	in(start, ());
	new hk: hashkey;
	new rkB : keyseed;
	let skB = skgen(rkB) in
	let pkB = pkgen(rkB) in
	out(cstart, pkB);
	((!N processA) | (!N processB) | processH | processK)


(* EXPECTED
All queries proved.
0.180s (user 0.180s + system 0.000s), max rss 32208K
END *)
