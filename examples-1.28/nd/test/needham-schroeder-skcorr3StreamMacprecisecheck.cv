(* Needham Schroeder shared key protocol.
   Corrected version.
   With messages of key confirmation, in order to prove correspondence
   properties.
 *)

param N.
param N2.
param N3.

type nonce [large,fixed].
type host [bounded].
type mkey [bounded].
type mkeyseed [fixed].
type key [fixed].
type keyseed [fixed].
type seed [fixed].
type macs [fixed].

fun concat1(nonce, host, mkey, key, macs, bitstring):bitstring [compos].
fun concat2(host, nonce):bitstring [compos].
fun concat3(mkey, key, host, nonce):bitstring [compos].

forall m:mkey,y:key,z:host,t:nonce,m2:mkey,y2:nonce,z2:host,t2:key,u2:macs,v2:bitstring;
	concat3(m,y,z,t) <> concat1(y2,z2,m2,t2,u2,v2).
forall z:host,t:nonce,y2:nonce,z2:host,m2:mkey,t2:key,u2:macs,v2:bitstring;
	concat2(z,t) <> concat1(y2,z2,m2,t2,u2,v2).
forall z:host,t:nonce,m2:mkey,y2:key,z2:host,t2:nonce;
	concat2(z,t) <> concat3(m2,y2,z2,t2).

fun minusone(nonce):nonce [compos].
forall x:nonce; minusone(x) <> x.

fun nonceToBitstring(nonce):bitstring [compos].

(* Shared-key encryption (CPA Stream cipher) *)

proba Penc.

fun enc(bitstring, key, seed): bitstring.
fun kgen(keyseed):key.
fun dec(bitstring, key): bitstringbot.

fun enc2(bitstring, key, seed): bitstring.
fun kgen2(keyseed):key.

fun injbot(bitstring):bitstringbot [compos].
(* The function Z returns for each bitstring, a bitstring
   of the same length, consisting only of zeroes. *)
fun Z(bitstring):bitstring.
fun Zconcat1(bitstring):bitstring.
const Zconcat2:bitstring.
const Zconcat3:bitstring.

forall m:bitstring, r:keyseed, r2:seed; 
	dec(enc(m, kgen(r), r2), kgen(r)) = injbot(m).
forall y:nonce,z:host,m:mkey,t:key,v:macs,u:bitstring;
	Z(concat1(y,z,m,t,v,u)) = Zconcat1(Z(u)).
forall y:host,z:nonce; 
	Z(concat2(y,z)) = Zconcat2.
forall m:mkey,y:key,z:host,t:nonce; 
	Z(concat3(m,y,z,t)) = Zconcat3.
forall m:bitstring, r:keyseed, r2:seed; 
	Z(enc(m, kgen(r), r2)) = Z(m).

equiv  !N2 new r: keyseed; ((x:bitstring) N -> new r2: seed; enc(x, kgen(r), r2)) 
     <=(N2 * Penc(time, N, maxlength(x)))=> 
       !N2 new r: keyseed; ((x:bitstring) N -> new r2: seed; enc2(Z(x), kgen2(r), r2)).

(* Mac *)

proba Pmac.

fun mac(bitstring, mkey):macs.
fun check(bitstring, mkey, macs): bool.
fun mkgen(mkeyseed):mkey.

fun mac2(bitstring, mkey):macs.
fun check2(bitstring, mkey, macs): bool.
fun mkgen2(mkeyseed):mkey.

forall m:bitstring, r:mkeyseed;
	check(m, mkgen(r), mac(m, mkgen(r))).
forall m:bitstring, r:mkeyseed;
	check2(m, mkgen2(r), mac2(m, mkgen2(r))).

forall m:bitstring, k:mkey, ma:macs;
	check2(m, k, ma) = (ma = mac2(m,k)).

equiv !N3 new r: mkeyseed;(
	 (x: bitstring) N -> mac(x, mkgen(r)),
	 (m: bitstring, ma: macs) N2 -> check(m, mkgen(r), ma))
     <=(N3 * Pmac(time, N, N2, max(maxlength(x), maxlength(m))))=>
      !N3 new r: mkeyseed;(
	 (x: bitstring) N -> mac2(x, mkgen2(r)),
	 (m: bitstring, ma: macs) N2 -> 
	    find j <= N suchthat defined(x[j]) && (m = x[j]) && check2(x[j], mkgen2(r), ma) then true else false).

(* Queries *)

channel c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, 
	c15, c16, c17, start, finish.
const A : host.
const B : host.
fun acceptA(host):bitstring.
fun acceptB(host):bitstring.

event partA(host, bitstring).
event fullA(host, bitstring).
event partB(host, bitstring).
event fullB(host, bitstring).

query x:bitstring;
	event inj:partA(B,x) ==> inj:partB(A,x).
query x:bitstring;
	event inj:fullB(A,x) ==> inj:fullA(B,x).

let processA =
	in(c1, (h: host, bm: bitstring, mac1: macs)); (* From B - just forwarded, no authentication *)
        new Na: nonce;
        out(c3, (A, h, Na, bm, mac1)); (* To server *)
        in(c4, (m2: bitstring, mac2: macs)); (* From server *)
	if check(m2, mKas, mac2) then
        let injbot(concat1(=Na, =h, mk, k, mac3, m)) = dec(m2, Kas) in
	out(c5, (m, mac3)); (* To B *)
	in(c15, (e4:bitstring, m4:macs)); (* From B *)
	if check(e4, mk, m4) then
	let injbot(nonceToBitstring(Nb)) = dec(e4, k) in
	new r4:seed;
	let e5 = enc(nonceToBitstring(minusone(Nb)), k, r4) in
	let m5 = mac(e5,mk) in
	event partA(h, (m,e4,m4));
	event fullA(h, (m,e4,m4,e5,m5));
	out(c16, (e5, m5, acceptA(h))).

let processB =
	in(c6, h: host);
	new J: nonce;
	new r2: seed;
	let e2 = enc(concat2(h,J), Kbs, r2) in
	out(c7, (e2, mac(e2, mKbs)));
	in(c8, (m4: bitstring, mac4: macs));
	if check(m4, mKbs, mac4) then
	let injbot(concat3(mk, k, =h, =J)) = dec(m4, Kbs) in
	new Nb:nonce;
	new r3:seed;
	let e3 = enc(nonceToBitstring(Nb), k, r3) in
	let m3 = mac(e3,mk) in
	event partB(h, (m4,e3,m3));
	out(c14, (e3, m3));
	in(c17, (e6:bitstring, m6:macs));
	if check(e6, mk, m6) then
	if injbot(nonceToBitstring(minusone(Nb))) = dec(e6, k) then
	event fullB(h, (m4,e3,m3,e6,m6));
	out(c13, acceptB(h)).

let processK =
	in(c9, (Khost: host, Kkey: key, Kmkey: mkey));
	let Rkey:key = 
		if Khost = A then Kas else
		if Khost = B then Kbs else
		Kkey
	in
	let Rmkey:mkey =
		if Khost = A then mKas else
		if Khost = B then mKbs else
		Kmkey.

let processS = 
	in(c10, (h1: host, h2: host, n: nonce, bm: bitstring, mac1: macs));
	find j1 <= N2 suchthat defined(Khost[j1],Rmkey[j1],Rkey[j1]) && (Khost[j1] = h1) then
	find j2 <= N2 suchthat defined(Khost[j2],Rmkey[j2],Rkey[j2]) && (Khost[j2] = h2) then
	if check(bm, Rmkey[j2], mac1) then
	let injbot(concat2(=h1, j)) = dec(bm, Rkey[j2]) in
	new kseed: keyseed;
	let k = kgen(kseed) in
	new mkseed: mkeyseed;
	let mk = mkgen(mkseed) in
	new r3: seed;
	let e3 = enc(concat3(mk, k, h1, j), Rkey[j2], r3) in
	let mac3 = mac(e3, Rmkey[j2]) in
	new r4: seed;
	let e4 = enc(concat1(n, h2, mk, k, mac3, e3), Rkey[j1], r4) in
	out(c11, (e4, mac(e4, Rmkey[j1]))).

process 
	in(start, ());
	new rKas: keyseed;
	let Kas = kgen(rKas) in
	new rmKas: mkeyseed;
	let mKas = mkgen(rmKas) in
	new rKbs: keyseed;
	let Kbs = kgen(rKbs) in
	new rmKbs: mkeyseed;
	let mKbs = mkgen(rmKbs) in
	out(start, ());
	((! N processA) |
	 (! N processB) | 
	 (! N processS) |
	 (! N2 processK))


(* EXPECTED
All queries proved.
7.550s (user 7.540s + system 0.010s), max rss 104720K
END *)
