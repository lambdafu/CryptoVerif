(* A->B: {nonce}_pkB, MAC(pwd)_nonce. *)

(* set interactiveMode = true. *)

param N.
param N2.
param N3.
param N4.

type nonce [large,fixed].
type host [bounded].
type pkey [bounded].
type skey [bounded].
type keyseed [large,fixed].
type seed [fixed].
type blocksize [fixed].
type blocksizebot [bounded].
type macs [bounded].


fun pad(nonce):blocksize [compos].

(* Public-key encryption (CCA2) *)

proba Penc.
proba Penccoll.

fun enc(blocksize, pkey, seed): bitstring.
fun skgen(keyseed):skey.
fun pkgen(keyseed):pkey.
fun dec(bitstring, skey): blocksizebot.

fun enc2(blocksize, pkey, seed): bitstring.
fun skgen2(keyseed):skey.
fun pkgen2(keyseed):pkey.
fun dec2(bitstring, skey): blocksizebot.

fun injbot(blocksize):blocksizebot [compos].

const Z:blocksize.

forall m:blocksize, r:keyseed, r2:seed; 
	dec(enc(m, pkgen(r), r2), skgen(r)) = injbot(m).
forall m:blocksize, r:keyseed, r2:seed; 
	dec2(enc2(m, pkgen2(r), r2), skgen2(r)) = injbot(m).

equiv  !N3 new r: keyseed; (() -> pkgen(r),
			    (m:bitstring) N2 -> dec(m, skgen(r))),
       (x:blocksize, y:pkey) N4 -> new r2:seed; enc(x,y,r2) [all]
     <=(N3 * N4 * Penc(time, N2))=> 
       !N3 new r: keyseed; (() -> pkgen2(r),
			    (m:bitstring) N2 -> 
		find j <= N4 suchthat defined(m2[j],y[j],x[j]) &&
		y[j] = pkgen2(r) && m = m2[j] then injbot(x[j]) else dec2(m, skgen2(r))),
       (x:blocksize, y:pkey) N4 -> 
		find k <= N3 suchthat defined(r[k]) && y = pkgen2(r[k]) then
			(new r2:seed; 
			let m2:bitstring = enc2(Z, y, r2) in
			m2)
		else new r3:seed; enc(x,y,r3).

collision new r1:keyseed; new r2:keyseed; 
	pkgen(r1) = pkgen(r2) <=(Penccoll)=> r1 = r2.
collision new r1:keyseed; new r2:keyseed; 
	pkgen2(r1) = pkgen2(r2) <=(Penccoll)=> r1 = r2.
collision new r1:keyseed; new r2:keyseed; 
	skgen(r1) = skgen(r2) <=(Penccoll)=> r1 = r2.
collision new r1:keyseed; new r2:keyseed; 
	skgen2(r1) = skgen2(r2) <=(Penccoll)=> r1 = r2.










type mkey [bounded].
type mkeyseed [fixed].
type key [fixed].

fun mkeyToBitstring(mkey):blocksize [compos].
fun keyToBitstring(key):bitstring [compos].

(* Mac *)

proba Pmac.

fun mac(bitstring, mkey):macs.
fun check(bitstring, mkey, macs): bool.
fun mkgen(nonce):mkey.

fun mac2(bitstring, mkey):macs.
fun check2(bitstring, mkey, macs): bool.
fun mkgen2(nonce):mkey.

forall m:bitstring, r:nonce;
	check(m, mkgen(r), mac(m, mkgen(r))).
forall m:bitstring, r:nonce;
	check2(m, mkgen2(r), mac2(m, mkgen2(r))).

equiv ! N3 new r: nonce;(
	 (x: bitstring) N -> mac(x, mkgen(r)),
	 (m: bitstring, ma: macs) N2 -> check(m, mkgen(r), ma))
     <=(N3 * Pmac(time, N, N2))=>
      ! N3 new r: nonce;(
	 (x: bitstring) N -> mac2(x, mkgen2(r)),
	 (m: bitstring, ma: macs) N2 -> 
	    find j <= N suchthat defined(x[j]) && (m = x[j]) && check2(x[j], mkgen2(r), ma) then true else false).












(* Queries *)

query secret1 NaA.

query secret NaA.


channel c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, 
	c15, c16, c17, start, finish.
const A : host.
const B : host.

let processA =
	in (start, ());
        new Na: nonce;
	new r3: seed;
	let mNa = mkgen(Na) in
	let ea1 = enc(pad(Na), pkB, r3) in 
        out(c4, (ea1,mac(keyToBitstring(pwd),mNa)));
        in(c5, ());
	let NaA:nonce = Na in 
	out(c13, ()).

let processB =
	in(c6, (m3:bitstring, ma:macs));
	let x = dec(m3, skB) in
	yield.

process 
	in(start, ());
	new rkB: keyseed;
	let pkB = pkgen(rkB) in
	let skB = skgen(rkB) in
	new pwd:key;
	out(c15, pkB);
	((! N processA) |
	 (! N processB))

(* EXPECTED
RESULT Could not prove secrecy of NaA, one-session secrecy of NaA.
0.030s (user 0.030s + system 0.000s), max rss 17408K
END *)
