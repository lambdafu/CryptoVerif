(* Version in which the participants only talk to A and B 
   Using two series of function symbols to prevent repeated applications
   of the same cryptographic rule.

*)

param N.
param N2.
param N3.

type nonce [large,fixed].
type host [bounded].
type mkey [bounded].
type mkeyseed [fixed].
type key [fixed].
type keyseed [fixed].
type seed [fixed].
type macs [fixed].
type maxenc [bounded].
type maxmac [bounded].

fun concat1(nonce, nonce, host, host):maxenc [compos].
fun concat2(nonce, key):maxenc [compos].

forall y:nonce,z:nonce,t:host,u:host, y2:nonce,z2:key; concat1(y,z,t,u) <> concat2(y2,z2).

(* Shared-key encryption (CPA Stream cipher) *)

proba Penc.

expand IND_CPA_sym_enc(keyseed, key, maxenc, maxmac, seed, kgen, enc, dec, injbot, Z, Penc).

(* The function Z returns for each bitstring, a bitstring
   of the same length, consisting only of zeroes. *)
const Zconcat1:maxenc.
const Zconcat2:maxenc.
forall y:nonce,z:nonce,t:host,u:host; 
	Z(concat1(y,z,t,u)) = Zconcat1.
forall y:nonce,z:key; 
	Z(concat2(y,z)) = Zconcat2.

(* Mac *)

proba Pmac.

expand UF_CMA_mac(mkeyseed, mkey, maxmac, macs, mkgen, mac, check, Pmac).

(* Queries *)

query secret1 keyA.
query secret keyA.

channel c1, c2, c3, c4, c5, c6, c7, c8, c9, start, finish.
const A : host.
const B : host.

event endA(host, host, nonce, key).
event endB(host, host, nonce, key).
event beginA(host, host, nonce).
event beginB(host, host, nonce).

let processA = 
	in(start, ());
	new M : nonce;
	new Na : nonce;
	new s1 : seed;
	let ea1:maxmac = enc(concat1(Na, M, A, B), Kas, s1) in
	event beginA(A, B, M);
	out(c1, (M, A, B, ea1, mac(ea1, mKas)));
	in(c2, (=M, ea2: maxmac, ma2: macs));
	if check(ea2, mKas, ma2) then
	let injbot(concat2(=Na, k)) = dec(ea2, Kas) in
	event endA(A, B, M, k);
	let keyA:key = k.

let processS =
	in(c7, (M: nonce));
	find i <= N, j <= N suchthat defined(ea1[j]) && let injbot(concat1(a,b,c,d)) = dec(ea1[j], Kas) in (i = j) && b = M else false then
	out(c8, M).
	
process 
	in(start, ());
	new rKas: keyseed;
	let Kas = kgen(rKas) in
	new rmKas: mkeyseed;
	let mKas = mkgen(rmKas) in
	new rKbs: keyseed;
	let Kbs = kgen(rKbs) in
	new rmKbs: mkeyseed;
	let mKbs = mkgen(rmKbs) in
	out(c9, ());
	((! N processA) |
	 (! N processS))

(* EXPECTED
All queries proved.
0.160s (user 0.160s + system 0.000s), max rss 32160K
END *)
