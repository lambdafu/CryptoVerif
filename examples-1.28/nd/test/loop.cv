(* THis example loops and it should not. Fixed 7/6/2010 *)

define DDH_loop(G, Z, g, exp, mult, pDDH) {

fun exp(G,Z): G.
fun exp'(G,Z): G.
const g:G.

fun mult(Z,Z): Z. 
equation commut(mult).

(* exponents multiply *)

forall a:G, x:Z, y:Z;
  exp(exp(a,x), y) = exp(a, mult(x,y)).

(* injectivity *)

forall x:Z, y:Z; (exp(g,x) = exp(g,y)) = (x = y).
forall x:Z, y:Z; (exp'(g,x) = exp'(g,y)) = (x = y).

(* collision between products *)

fun mult'(Z,Z): Z. 
equation commut(mult').
collision new x1:Z; new x2:Z; new x3:Z; new x4:Z; mult(x1,x2) = mult(x3,x4)
<=(1/|Z|)=> (x1 = x3 && x2 = x4) || (x1 = x4 && x2 = x3) || ((x1 = x2 || x3 = x4) && mult'(x1,x2) = mult'(x3,x4)). 

(* replace a random group element with an exponentiation, and conversely *)

param N, N'.

equiv !N new X:G; (OX() := X, !N' OXm(m:Z) [useful_change] := exp(X,m))
<=(0)=> 
      !N new x:Z; (OX() := exp(g,x), !N' OXm(m:Z) := exp(g,mult(x,m))).

(* This equivalence is very general, apply it only manually, because
   otherwise it might be applied too often.  The equivalence above is
   particular case applied only when X is inside exp, and good for
   automatic proofs. *)

equiv !N new X:G; OX() := X 
<=(0)=> [manual]    
      !N new x:Z; OX() := exp(g,x).


equiv !N new x:Z; OX() := exp(g,x)
<=(0)=>
      !N new X:G; OX() := X.

equiv !N new x:Z; OX() := exp'(g,x)
<=(0)=>
      !N new X:G; OX() := X.

(* the DDH assumption *) 

const mark: bitstring.

param na, naDH, nb, nbDH.

equiv
    !na new a:Z; (
      OA() := exp(g,a), 
      Oa() [3] := a,
      !naDH ODHa(j<=nb) [useful_change] := exp(g, mult(b[j], a))
    ),
    !nb new b:Z; (
      OB() := exp(g,b),
      Ob() [3] := b,
      !nbDH ODHb(j<=na) := exp(g, mult(a[j], b))
    )
<=((#ODHa + #ODHb) * max(1, 7.4*#Oa) * max(1, 7.4*#Ob) * pDDH(time + (na + nb + #ODHa + #ODHb) * time(exp)))=>
    !na new a:Z; (
      OA() := exp(g,a), 
      Oa() := a,
      !naDH ODHa(j<=nb) := exp(g, mult(b[j], a))
    ),
    !nb new b:Z; (
      OB() := exp(g,b),
      Ob() := b,
      !nbDH ODHb(j<=na) := exp(g, mult(a[j], b))
    ).

}

(* Signed Diffie-Hellman protocol *)

param N, N2.

type host.
type keyseed [large,fixed].
type seed [fixed].
type pkey [bounded].
type skey [bounded].
type blocksize.
type signature.

type Z [large,fixed].
type G [large,fixed].
type K [large,fixed].
type D [fixed].

(* the DDH assumption *) 

proba pDDH.

expand DDH_loop(G, Z, g, exp, mult, pDDH).

(* h entropy extractor *)

proba pH.
fun h(G):D.

equiv !N new x:G; OH() := h(x)
<=(N * pH(time + (N-1)*time(h)))=>
      !N new X:D; OH() := X.


(* signatures *)

fun concatA(host, host, G, G):blocksize [compos].
fun concatB(host, host, G, G):blocksize [compos].
forall x:host, y:host, z:G, t:G, x':host, y':host, z':G, t':G;
   concatA(x,y,z,t) <> concatB(x',y',z',t').
    
proba Psign.
proba Psigncoll.

expand UF_CMA_signature(keyseed, pkey, skey, blocksize, signature, seed, skgen, pkgen, sign, check, Psign, Psigncoll).

const A,B:host.

(* query *)
query secret keyA.
query secret keyB.

event endA(host, host, G, G).
event beginB(host, host, G, G).
event endB(host, host, G, G).

query x:G, y:G; event inj:endA(A, B, x, y) ==> inj:beginB(A, B, x, y).
query x:G, y:G; event inj:endB(A, B, x, y) ==> inj:endA(A, B, x, y).

channel start, cstart, cA1, cA2, cA3, cA4, cA5, cA6, cB1, cB2, cB3, cB4, cB5, cH, cHret, cK.

let processA = 
  in(cA1, (hostB: host));
  new a:Z;
  let ga = exp(g,a) in
  out(cA2, (A, hostB, ga));
  in(cA3, (=A, =hostB, gb:G, s:signature));
  find j2 <= N2 suchthat defined(Khost[j2],Rkey[j2]) && (Khost[j2] = hostB) then
  let pkhostB = Rkey[j2] in
  if check(concatB(A, hostB, ga, gb), pkhostB, s) then
  new r2: seed;
  let gab = exp(gb, a) in
  let kA = h(gab) in 
  event endA(A, hostB, ga, gb);
  out(cA4, sign(concatA(A, hostB, ga, gb), skA, r2));
  (* OK *)
  in(cA5, ());
  if hostB = B then 
  (let keyA:D = kA)
  else
   out(cA6, kA).

let processB =
  in(cB1, (hostA:host, =B, ga:G));
  new b:Z;
  let gb = exp(g,b) in
  new r1:seed;
  event beginB(hostA, B, ga, gb);
  out(cB2, (hostA, B, gb, sign(concatB(hostA, B, ga, gb), skB, r1)));
  in(cB3, s:signature);
  find j2 <= N2 suchthat defined(Khost[j2],Rkey[j2]) && (Khost[j2] = hostA) then
  let pkhostA = Rkey[j2] in
  if check(concatA(hostA, B, ga, gb), pkhostA, s) then
  let gab = exp(ga, b) in
  let kB = h(gab) in
  event endB(hostA, B, ga, gb);
  (* OK *)
  if hostA = A then
  (let keyB:D = kB)
  else
   out(cB4, kB).

let processK =
  !N2
  in(cK, (Khost: host, Kkey: pkey));
  let Rkey:pkey = 
		if Khost = B then pkB else
		if Khost = A then pkA else
		Kkey.

process
	in(start, ());
	new rkA : keyseed;
	let skA = skgen(rkA) in
	let pkA = pkgen(rkA) in
	new rkB : keyseed;
	let skB = skgen(rkB) in
	let pkB = pkgen(rkB) in
	out(cstart, (pkA, pkB));
	((!N processA) | (!N processB) | processK)


(* EXPECTED
RESULT Could not prove secrecy of keyB, secrecy of keyA.
0.120s (user 0.120s + system 0.000s), max rss 32160K
END *)
