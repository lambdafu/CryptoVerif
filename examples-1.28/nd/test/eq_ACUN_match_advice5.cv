type D.

(* set interactiveMode = true. *)

fun xor(D,D):D.
const neut:D.
equation ACUN(xor,neut).

fun h(D):bitstring.
fun g(D,D,D): bitstring.

const zero, one, two, three: D. 
const zero', one', two', three': D. 

channel c.
proba Peq.
param n.

equiv !n O(y:D,z:D) := h(xor(zero,xor(y,xor(two,z)))) [all]
<=(Peq)=>
      !n O(y:D,z:D) := g(zero,y,z).


process in(c, ()); out(c, h(xor(xor(one, zero), xor(two, zero'))));
	in(c, ()); out(c, h(xor(xor(zero, one), xor(two, xor(one',zero')))));
	in(c, ()); let z = xor(one,zero) in out(c, h(xor(z, xor(two, two'))));
        in(c, ()); let t = xor(two, zero') in out(c, h(xor(z, t)));
        in(c, ()); let z = xor(two, zero') in let t = xor(one, zero) in let x = xor(z,t) in out(c, h(x))


(* EXPECTED
All queries proved.
0.030s (user 0.030s + system 0.000s), max rss 19856K
END *)
