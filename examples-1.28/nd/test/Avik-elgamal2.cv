
(** ElGamal encryption scheme **)

(** An encryption scheme is shown to be SS
    under the DDH assumption.
    See Section 3, "Sequences of Games", Victor Shoup. **)

(* Removed the replication of the whole system present in Avik-elgamal.CV,
but absent from Shoup's paper. This is exactly the proof done in
Shoup's paper. *)

param n, q.

type Z [fixed].

type G [fixed].

proba pDDH.

fun exp(G,Z): G.
const gamma:G.

(* gamma is a uniform generator *)

equiv 
    () n -> new x:Z; exp(gamma,x) [all]
<=(0)=> (* BB: The difference of probability is 0 *)
    () n -> new y:G; y.

fun mult(Z,Z): Z.
equation commut(mult).

(* exponents multiply *)

forall a:G, x:Z, y:Z;
  exp(exp(a,x), y) = exp(a, mult(x,y)).

fun dot(G,G): G.

(* dot(.,y) is a uniform function *)

equiv 
    (y:G) n -> new x:G; dot(x,y) [all]
<=(0)=> (* BB: The difference of probability is 0 *)
    (y:G) n -> new x:G; x.

fun invdot(G,G): G.

(* invdot is the left-inverse of dot *)

forall a:G, b:G;
  invdot(a, dot(a,b)) = b.

(* the DDH assumption *) 

equiv
    !n new x:Z; new y:Z; (
      () -> exp(gamma,x), 
      () -> exp(gamma,y), 
      () -> exp(gamma, mult(x,y)) ) (* BB: removed [all] *)
<=(pDDH(time) * n)=>  (* BB: Was pDDH(time,n) *)
    !n new x:Z; new y:Z; new z:Z; (
      () -> exp(gamma,x), 
      () -> exp(gamma,y), 
      () -> exp(gamma, z) ).

fun choose(bool,G,G): G.

(* choose(b,M,N) = if b then M else N *)

forall x:bool, y:G, z:G;
  (x && choose(x,y,z) = y) || (not(x) && choose(x,y,z) = z).

(* query *)
query secret b.

channel cPK, cE, cEret, start.

let processE = 
    in(cE, (m0:G, m1:G));
    new b:bool;
    let m = choose(b,m1,m0) in
    new y:Z;
    let beta = exp(gamma,y) in
    let delta = exp(alpha,y) in
    let zeta = dot(delta, m) in
    out(cEret, (beta,zeta)).

process
  in(start, ());
  new x:Z;
  let alpha = exp(gamma,x) in
  out(cPK, alpha); 
  processE

(* EXPECTED
All queries proved.
0.020s (user 0.020s + system 0.000s), max rss 16464K
END *)
