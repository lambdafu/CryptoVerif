(* The "find j <= N suchthat defined(j) then" at some point lead to 
   a wrong simplification in which CryptoVerif considered that j must be defined
   before executing the find, instead of just after.

   Version in which the participants only talk to A and B 
   Using two series of function symbols to prevent repeated applications
   of the same cryptographic rule.

   The result obtained by CryptoVerif changed with the new semantics
   of find: 
      find j <= N suchthat defined(j) then
   is now interpreted as 
      find j = j' <= N suchthat defined(j) then 
   which always fails (j is not defined yet when defined(j) is tested).
*)

param N.
param N2.
param N3.

type tag [bounded].
type nonce [large,fixed].
type host [bounded].
type mkey [bounded].
type mkeyseed [fixed].
type key [fixed].
type keyseed [fixed].
type seed [fixed].
type macs [fixed].
type maxenc [bounded].
type maxmac [bounded].
type maxencnotag [bounded].

const tag1: tag.
const tag2: tag.
const tag3: tag.
const tag4: tag.

fun concat1(nonce, nonce, host, host):maxencnotag [compos].
fun concat2(nonce, key):maxencnotag [compos].
fun tagf(tag, maxencnotag):maxenc [compos].

(* Shared-key encryption (CPA Stream cipher) *)

proba Penc.

fun enc(maxenc, key, seed): maxmac.
fun kgen(keyseed):key.
fun dec(maxmac, key): bitstringbot.

fun enc2(maxenc, key, seed): maxmac.
fun kgen2(keyseed):key.

fun injbot(maxenc):bitstringbot [compos].
(* The function Z returns for each bitstring, a bitstring
   of the same length, consisting only of zeroes. *)
fun Z(maxenc):maxenc.
const Z1:maxenc.
const Z2:maxenc.

forall m:maxenc, r:keyseed, r2:seed; 
	dec(enc(m, kgen(r), r2), kgen(r)) = injbot(m).
forall u:tag, x:nonce, y:nonce, z:host, t:host; Z(tagf(u,concat1(x,y,z,t))) = Z1.
forall u:tag, x:nonce, y:key; Z(tagf(u,concat2(x,y))) = Z2.


equiv  ! N2 new r: keyseed; ((x:maxenc) N -> new r2: seed; enc(x, kgen(r), r2)) 
     <=(N2 * Penc(time, N))=> 
       ! N2 new r: keyseed; ((x:maxenc) N -> new r2: seed; enc2(Z(x), kgen2(r), r2)).

(* Mac *)

proba Pmac.

fun mac(maxmac, mkey):macs.
fun check(maxmac, mkey, macs): bool.
fun mkgen(mkeyseed):mkey.

fun mac2(maxmac, mkey):macs.
fun check2(maxmac, mkey, macs): bool.
fun mkgen2(mkeyseed):mkey.

forall m:maxmac, r:mkeyseed;
	check(m, mkgen(r), mac(m, mkgen(r))).
forall m:maxmac, r:mkeyseed;
	check2(m, mkgen2(r), mac2(m, mkgen2(r))).

equiv ! N3 new r: mkeyseed;(
	 (x: maxmac) N -> mac(x, mkgen(r)),
	 (m: maxmac, ma: macs) N2 -> check(m, mkgen(r), ma))
     <=(N3 * Pmac(time, N, N2))=>
      ! N3 new r: mkeyseed;(
	 (x: maxmac) N -> mac2(x, mkgen2(r)),
	 (m: maxmac, ma: macs) N2 -> 
	    find j <= N suchthat defined(x[j]) && (m = x[j]) && check2(x[j], mkgen2(r), ma) then true else false).


(* Queries *)

query secret1 keyA.
query secret1 keyB.

query secret keyA.
query secret keyB.

channel c1, c2, c3, c4, c5, c6, c7, c8, c9, start, finish.
const A : host.
const B : host.

event endA(host, host, nonce, key).
event endB(host, host, nonce, key).
event beginA(host, host, nonce).
event beginB(host, host, nonce).

query x:host, y:host, n:nonce, k:key; 
	event endA(x,y,n,k) ==> beginB(x,y,n).
query x:host, y:host, n:nonce, k:key; 
	event endB(x,y,n,k) ==> beginA(x,y,n).
query x:host, y:host, n:nonce, k:key; 
	event inj:endA(x,y,n,k) ==> inj:beginB(x,y,n).
query x:host, y:host, n:nonce, k:key; 
	event inj:endB(x,y,n,k) ==> inj:beginA(x,y,n).


let processA = 
	in(start, ());
	new M : nonce;
	new Na : nonce;
	new s1 : seed;
	let ea1 = enc(tagf(tag1, concat1(Na, M, A, B)), Kas, s1) in
	event beginA(A, B, M);
	out(c1, (M, A, B, ea1, mac(ea1, mKas)));
	in(c2, (=M, ea2: maxmac, ma2: macs));
	if check(ea2, mKas, ma2) then
	let injbot(tagf(=tag3, concat2(=Na, k))) = dec(ea2, Kas) in
	event endA(A, B, M, k);
	let keyA:key = k.

let processB =
	in(c3, (M: nonce, =A, =B, ea:maxmac, ma:macs));
	new Nb : nonce;
	new s2 : seed;
	let e2 = enc(tagf(tag2, concat1(Nb, M, A, B)), Kbs, s2) in
	event beginB(A, B, M);
	out(c4, (M, A, B, ea, ma, e2, mac(e2, mKbs)));
	in(c5, (=M, ea2: maxmac, ma2: macs, eb2: maxmac, mb2: macs));
	if check(eb2, mKbs, mb2) then
	let injbot(tagf(=tag4, concat2(=Nb, k))) = dec(eb2, Kbs) in
	out(c6, (M, ea2, ma2));
	in(finish, ());
	event endB(A, B, M, k);
	let keyB:key = k.

let processS =
	in(c7, (M: nonce, =A, =B, ea1: maxmac, ma1: macs, eb1: maxmac, mb1: macs));
	if check(ea1, mKas, ma1) then
	let injbot(tagf(=tag1, concat1(Na, =M, =A, =B))) = dec(ea1, Kas) in
	if check(eb1, mKbs, mb1) then
	let injbot(tagf(=tag2, concat1(Nb, =M, =A, =B))) = dec(eb1, Kbs) in
	new k: key;
	new s3: seed;
	new s4: seed;
	let e1 = enc(tagf(tag3, concat2(Na, k)), Kas, s3) in
	let e2 = enc(tagf(tag4, concat2(Nb, k)), Kbs, s4) in
	out(c8, (M, e1, mac(e1, mKas), e2, mac(e2, mKbs))).
	
process 
	in(start, ());
	new rKas: keyseed;
	let Kas = kgen(rKas) in
	new rmKas: mkeyseed;
	let mKas = mkgen(rmKas) in
	new rKbs: keyseed;
	let Kbs = kgen(rKbs) in
	new rmKbs: mkeyseed;
	let mKbs = mkgen(rmKbs) in
	find j <= N suchthat defined(j) then
	out(c9, ());
	((! N processA) |
	 (! N processB) | 
	 (! N processS))

(* EXPECTED
All queries proved.
0.140s (user 0.140s + system 0.000s), max rss 32160K
END *)
