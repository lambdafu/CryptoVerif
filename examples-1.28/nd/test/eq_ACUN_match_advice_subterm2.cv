type D [fixed].

(* set interactiveMode = true. *)

fun xor(D,D):D.
const neut:D.
equation ACUN(xor,neut).

fun h(D):bitstring.
fun g(D): D.

const zero, one, two, three: D. 

channel c.
proba Peq.
param n,n'.

equiv !n new r1: D; new r2: D; !n' O(y:D) := xor(r1,xor(y,r2))
<=(Peq)=>
      !n !n' O(y:D) := g(y).

fun xor2(D,D):D.
equation ACUN(xor2,neut).
equiv !n new r1: D; new r2: D; !n' O() := xor2(r1,xor2(one,r2))
<=(Peq)=>
      !n !n' O() := g(one).


process in(c, ()); new r1: D; new r2: D; out(c, h(xor(xor(r1, one), xor(two, r2))));
	in(c, ()); new r1: D; new r2: D; out(c, h(xor(xor(r1, one), xor(r2, two))));
	in(c, ()); new r1: D; new r2: D; out(c, h(xor(two, xor(xor(r1, one), xor(r2, two)))));
	in(c, ()); let z = xor(r1,one) in out(c, h(xor(z, xor(r2, zero))));
	in(c, ()); let t = xor(two, r2) in out(c, h(xor(z, t)));
	in(c, ()); let x = xor(z,t) in out(c, h(x));
	in(c, ()); new r1: D; new r2: D; new r1': D; new r2': D; out(c, h(xor(xor(r1, one), xor(r2, xor(two, xor(r1', xor(one, r2')))))));
	in(c, ()); new r1: D; new r2: D; out(c, h(xor(xor(r1, one), xor(r2, xor(two, xor(r1, xor(one, r2)))))));
	in(c, ()); new r1: D; new r2: D; out(c, h(xor2(xor2(r1, one), xor2(r2, xor2(two, xor2(r1, xor2(one, r2)))))));
	in(c, ()); new r1: D; new r2: D; new r1': D; new r2': D; out(c, h(xor2(xor2(r1', one), xor2(r2, xor2(two, xor2(r1, xor2(one, r2')))))));
	in(c, ()); new r1: D; new r2: D; let z = xor(r1,one) in out(c, h(xor(z, xor(two, zero))));
        in(c, ()); new r1: D; new r2: D; let z = xor(r1,one) in let t = xor(two, r2) in out(c, h(xor(z, t)));
        in(c, ()); let x = xor(z,t) in out(c, h(x));
	in(c, ()); new r1: D; new r2: D; out(c, xor(r1,one) = xor(two,r2));
	in(c, ()); let t = xor(zero,two) in out(c, xor(t,r1) = r2)


(* EXPECTED
All queries proved.
0.030s (user 0.030s + system 0.000s), max rss 19856K
END *)
