
(* Signed Diffie-Hellman protocol *)

(* set interactiveMode = true. *)

param n, n', q, nH, N, N2, nCDH, nCDH2, nCDH', nCDH'', nCDH'''.

type host.
type keyseed [large,fixed].
type seed [fixed].
type pkey [bounded].
type skey [bounded].
type blocksize.
type signature.

type Z [fixed,large].
type G [large].
type K [large,fixed].
type D [fixed].

fun exp(G,Z): G.
fun exp'(G,Z): G.
const g:G.

fun mult(Z,Z): Z.
equation commut(mult).


forall x:Z, y:Z;
  (exp'(g,x) = exp'(g,y)) = (x=y).


(* exponents multiply *)

forall a:G, x:Z, y:Z;
  exp(exp(a,x), y) = exp(a, mult(x,y)).

(* the CDH assumption *) 

proba pCDH.

const mark: bitstring.

(* This rule should be applied only when there is at least one occurrence of the nCDH branch *)

equiv
    !n new a:Z; (
      () -> exp(g,a), 
      (m:G) n' -> exp(m,a),
      (m:G, j<=n) nCDH [useful_change] -> m = exp(g, mult(a[j], a)),
      (j<=n, j'<=n, j''<=n) nCDH' -> exp(g, mult(a[j], a)) = exp(g, mult(a[j'],a[j'']))
    )
<=(pCDH(time,n,nCDH))=>
    !n new a:Z; (
      () -> exp'(g,a), 
      (m:G) n' -> let k:bitstring = mark in exp'(m, a),
      (m:G, j<=n) nCDH -> find v<=n', u<=n suchthat defined(k[v,u],a[u]) && (a = a[u] || a[j] = a[u]) then m = exp'(g, mult(a[j], a)) else false,
      (j<=n, j'<=n, j''<=n) nCDH' -> ((a[j] = a[j']) && (a = a[j''])) ||
      		   	   	      ((a[j] = a[j'']) && (a = a[j']))
    ).


(*

A temporary rule, not very useful.

equiv
    !n new a:Z; (
      () -> exp(g,a), 
      (m:G, j<=n) nCDH -> m = exp(g, mult(a[j], a)),
      (m:G, m':G) nCDH2 -> m = exp(m', a),
      (m:G, j<=n, j'<=n) nCDH' -> exp(m,a[j']) = exp(g, mult(a[j],a)),
      (m:G, m':G, j<=n) nCDH'' -> exp(m,a) = exp(m',a[j]),
      (j<=n, j'<=n, j''<=n) nCDH''' -> exp(g, mult(a[j], a)) = exp(g, mult(a[j'],a[j'']))
    )
<=(pCDH(time,n,nCDH))=>
    !n new a:Z; (
      () -> exp(g,a), 
      (m:G, j<=n) nCDH -> find v<=nCDH2, u<=n suchthat defined(k1[v,u],a[u]) && (a = a[u] || a[j] = a[u]) then m = exp(g, mult(a[j], a)) else false,
      (m:G, m':G) nCDH2 -> let k1:bitstring = mark in m = exp(m', a),
      (m:G, j<=n, j'<=n) nCDH' -> ((a[j'] = a) && (m = exp(g, a[j]))) || 
      	    	  	          ((a[j'] = a[j]) && (m = exp(g, a))),
      (m:G, m':G, j<=n) nCDH'' -> let k2:bitstring = mark in exp(m,a) = exp(m',a[j]),
      (j<=n, j'<=n, j''<=n) nCDH''' -> ((a[j] = a[j']) && (a = a[j''])) ||
      		   	   	      ((a[j] = a[j'']) && (a = a[j']))
    ).



This rule applies, but is unsound (problem 1) below)

equiv
    !n new a:Z; (
      () -> exp(g,a), 
      (m:G, j<=n) nCDH -> m = exp(g, mult(a[j], a)),
      (m:G, m':G) nCDH2 -> m = exp(m', a),
      (m:G, j<=n, j'<=n) nCDH' -> exp(m,a[j']) = exp(g, mult(a[j],a)),
      (m:G, m':G, j<=n) nCDH'' -> exp(m,a) = exp(m',a[j]),
      (j<=n, j'<=n, j''<=n) nCDH''' -> exp(g, mult(a[j], a)) = exp(g, mult(a[j'],a[j'']))
    )
<=(pCDH(time,n,nCDH))=>
    !n new a:Z; (
      () -> exp(g,a), 
      (m:G, j<=n) nCDH -> false,
      (m:G, m':G) nCDH2 -> m = exp(m', a),
      (m:G, j<=n, j'<=n) nCDH' -> ((a[j'] = a) && (m = exp(g, a[j]))) || 
      	    	  	          ((a[j'] = a[j]) && (m = exp(g, a))),
      (m:G, m':G, j<=n) nCDH'' -> exp(m,a) = exp(m',a[j]),
      (j<=n, j'<=n, j''<=n) nCDH''' -> ((a[j] = a[j']) && (a = a[j''])) ||
      		   	   	      ((a[j] = a[j'']) && (a = a[j']))
    ).


This rule is sound but not sufficient.
It solves problem 1) of the rule below by simply not allowing tests  
exp(m,a) = exp(m',a[j]) (which is not sufficient in practice).
It solve problem 2) by solution a).

equiv
    !n new a:Z; (
      () -> exp(g,a), 
      (m:G, j<=n) nCDH -> m = exp(g, mult(a[j], a)),
      (m:G, j<=n, j'<=n) nCDH' -> exp(m,a[j']) = exp(g, mult(a[j],a)),
      (j<=n, j'<=n, j''<=n) nCDH'' -> exp(g, mult(a[j], a)) = exp(g, mult(a[j'],a[j'']))
    )
<=(pCDH(time,n,nCDH))=>
    !n new a:Z; (
      () -> exp(g,a), 
      (m:G, j<=n) nCDH -> false,
      (m:G, j<=n, j'<=n) nCDH' -> ((a[j'] = a) && (m = exp(g, a[j]))) || 
      	    	  	          ((a[j'] = a[j]) && (m = exp(g, a))),
      (j<=n, j'<=n, j''<=n) nCDH'' -> ((a[j] = a[j']) && (a = a[j''])) ||
      		   	   	      ((a[j] = a[j'']) && (a = a[j']))
    ).


There are two problems with the next rule:
1) It is probably unsound, because it allows the adversary to know 
the result of any test exp(m,a) = exp(m',a[j]), which is not
expected in CDH.
2) It introduces "find" to replace equality tests, but these "find"
are then going to occur inside conditions of "find" (generated by the
ROM hash function), so they cannot be expanded and the transformation
fails.

The second problem can be solved by either
a) assuming that when m = exp(g,a), it is explicitly of this form already,
so the finds are useless (this is true when a signature is checked
before computing g^{ab})
b) introducing a case distinction transformation first, that will
make sure that point a) is true.
Here is a possible case distinction transformation:

equiv
    !n new a:Z; (
      () -> exp(g,a), 
      (m:G) n' -> exp(m,a)
    )
<=(0)=>
    !n new a:Z; (
      () -> exp(g,a), 
      (m:G) n' -> find j <= n suchthat defined(a[j]) && m = exp(g,a[j]) then exp(g, mult(a,a[j])) else exp(m,a)
    ).


Solving the first problem could a priori be done like for one-wayness:
define a variable k when the test exp(m,a) = exp(m',a[j]) is done,
and prevent the transformations when k is defined. But that might again
introduce unexpandable "find"s---looking more closely, some of them
are expandable, some not.

equiv
    !n new a:Z; (
      () -> exp(g,a), 
      (z:G, m:G) nCDH -> z = exp(m, a),
      (m:G, m':G, j<=n) nCDH' -> exp(m,a) = exp(m',a[j])
    )
<=(pCDH(time,n,nCDH))=>
    !n new a:Z; (
      () -> exp(g,a), 
      (z:G, m:G) nCDH -> find j <= n suchthat defined(a[j]) && m = exp(g, a[j]) then false else z = exp(m,a), 
      (m:G, m':G, j<=n) nCDH' -> if m = exp(g, a[j]) && m' = exp(g,a) then true else exp(m,a) = exp(m',a[j])
    ).


The next rule is the most basic CDH rule, not sufficient to deal with 
protocols.

equiv
    !n new x:Z; new y:Z; (
      () -> exp(g,x), 
      () -> exp(g,y), 
      (z:G) nCDH -> z = exp(g, mult(x,y))
 )
<=(pCDH(time,n,nCDH))=>
    !n new x:Z; new y:Z; (
      () -> exp(g,x), 
      () -> exp(g,y), 
      (z:G) nCDH -> false ).
*)

(* h in the random oracle model *)

fun h(K,G): D.

equiv !n new k:K; (x:G) nH -> h(k,x)
      <=(0)=>
      !n new k:K; (x:G) nH -> find j <= nH suchthat defined(x[j],r[j]) && otheruses(r[j]) && x= x[j] then r[j] else
			 new r:D; r.

(* signatures *)

fun concatA(host, host, G, G):blocksize [compos].
fun concatB(host, host, G, G):blocksize [compos].
forall x:host, y:host, z:G, t:G, x':host, y':host, z':G, t':G;
   concatA(x,y,z,t) <> concatB(x',y',z',t').
    
proba Psign.
proba Psigncoll.

expand UF_CMA_signature(keyseed, pkey, skey, blocksize, signature, seed, skgen, pkgen, sign, check, Psign, Psigncoll).

const A,B:host.

(* query *)
query secret keyA.
query secret keyB.

channel start, cstart, cA1, cA2, cA3, cA4, cA5, cA6, cB1, cB2, cB3, cB4, cB5, cH, cHret, cK.

let processA = 
  in(cA1, (hostB: host));
  new a:Z;
  let ga = exp(g,a) in
  out(cA2, (A, hostB, ga));
  in(cA3, (=A, =hostB, gb:G, s:signature));
  if hostB = B then
  (
  if check(concatB(A, hostB, ga, gb), pkB, s) then
  new r2: seed;
  let gab = exp(gb, a) in
  let kA = h(k, gab) in 
  out(cA4, sign(concatA(A, hostB, ga, gb), skA, r2));
  (* OK *)
  in(cA5, ());
  let keyA:D = kA
  )
  else
  (
  new r2: seed;
  let gab = exp(gb, a) in
  let kA = h(k, gab) in 
  out(cA4, sign(concatA(A, hostB, ga, gb), skA, r2));
  (* OK *)
  in(cA5, ());
  out(cA6, kA)
  ).

let processB =
  in(cB1, (hostA:host, =B, ga:G));
  new b:Z;
  let gb = exp(g,b) in
  new r1:seed;
  out(cB2, (hostA, B, gb, sign(concatB(hostA, B, ga, gb), skB, r1)));
  in(cB3, s:signature);
  if hostA = A then
  (
  if check(concatA(hostA, B, ga, gb), pkA, s) then
  let gab = exp(ga, b) in
  let kB = h(k, gab) in
  (* OK *)
  let keyB:D = kB
  )
  else
  (
  let gab = exp(ga, b) in
  let kB = h(k, gab) in
  (* OK *)
  out(cB4, kB)
  ).

let processH =
  !nH
  in(cH, xH:G);
  out(cHret, h(k,xH)).

process
	in(start, ());
	new k:K;
	new rkA : keyseed;
	let skA = skgen(rkA) in
	let pkA = pkgen(rkA) in
	new rkB : keyseed;
	let skB = skgen(rkB) in
	let pkB = pkgen(rkB) in
	out(cstart, (pkA, pkB));
	((!N processA) | (!N processB) | processH)


(* EXPECTED
All queries proved.
2.760s (user 2.750s + system 0.010s), max rss 96704K
END *)
