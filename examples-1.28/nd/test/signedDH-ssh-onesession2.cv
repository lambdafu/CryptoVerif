(* set interactiveMode = true. *)

(* Signed Diffie-Hellman protocol, very freely inspired by SSH
(there is an asymmetry, since only the server is authenticated to
the client by a signature, but not the converse) *)

param n, n1, n2, n3, q, nH, N, N2, nCDH, nCDH'.

type host.
type keyseed [large,fixed].
type seed [fixed].
type pkey [bounded].
type skey [bounded].
type blocksize.
type signature.

type Z [fixed].
type G.
type K [large,fixed].
type D [fixed].

fun exp(G,Z): G.
fun exp1(G,Z): G.
fun exp2(G,Z): G.
const g:G.

fun mult(Z,Z): Z.
equation commut(mult).

(* exponents multiply *)

forall a:G, x:Z, y:Z;
  exp(exp(a,x), y) = exp(a, mult(x,y)).

(* the CDH assumption *) 

proba pCDH.
(*
equiv
    !n new x:Z; new y:Z; (
      () -> exp(g,x), 
      () -> exp(g,y), 
      (z:G) nCDH -> z = exp(g, mult(x,y))
 )
<=(pCDH(time,n,nCDH))=>
    !n new x:Z; new y:Z; (
      () -> exp(g,x), 
      () -> exp(g,y), 
      (z:G) nCDH -> false ).

This does not work because the form z = exp1(exp2(g, y), x) does not appear.
We need some equation exp1(exp2(...)) so that simplification makes it appear.
*)
equiv
    !n new x:Z; new y:Z; (
      () -> exp1(g,x), 
      () -> exp2(g,y), 
      (z:G) nCDH -> z = exp1(exp2(g, y), x),
      (z:G) nCDH' -> z = exp2(exp1(g, x), y),
      (z:G, m:G) n1 [2] -> z = exp1(m,x),
      (z:G, m:G) n2 [2] -> z = exp2(m,y),
      (m:G, m':G) n3 -> exp1(m,x) = exp2(m',y)
 )
<=(pCDH(time,n,nCDH+nCDH'))=>
    !n new x:Z; new y:Z; (
      () -> exp(g,x), 
      () -> exp(g,y), 
      (z:G) nCDH -> false,
      (z:G) nCDH' -> false,
      (z:G, m:G) n1 -> z = exp(m,x),
      (z:G, m:G) n2 -> z = exp(m,y),
      (m:G, m':G) n3 -> exp(m,x) = exp(m',y)
 ).

(* h in the random oracle model *)

fun h(K,G): D.

equiv !n new k:K; (x:G) nH -> h(k,x)
      <=(0)=>
      !n new k:K; (x:G) nH -> find j <= nH suchthat defined(x[j],r[j]) && otheruses(r[j]) && x= x[j] then r[j] else
			 new r:D; r.

(* signatures *)

fun concatA(host, host, G, G):blocksize [compos].
fun concatB(host, host, G, G):blocksize [compos].
forall x:host, y:host, z:G, t:G, x':host, y':host, z':G, t':G;
   concatA(x,y,z,t) <> concatB(x',y',z',t').
    
proba Psign.
proba Psigncoll.

expand UF_CMA_signature(keyseed, pkey, skey, blocksize, signature, seed, skgen, pkgen, sign, check, Psign, Psigncoll).

const A,B:host.

(* query *)
query secret keyA.

channel start, cstart, cA1, cA2, cA3, cA4, cA5, cA6, cB1, cB2, cB3, cB4, cB5, cH, cHret, cK.

let processA = 
  in(cA1, (hostB: host));
  new a:Z;
  let ga = exp1(g,a) in
  out(cA2, (A, hostB, ga));
  in(cA3, (=A, =hostB, gb:G, s:signature));
  find j2 <= N2 suchthat defined(Khost[j2],Rkey[j2]) && (Khost[j2] = hostB) then
  let pkhostB = Rkey[j2] in
  if check(concatB(A, hostB, ga, gb), pkhostB, s) then
  new r2: seed;
  let gab = exp1(gb, a) in
  let kA = h(k, gab) in 
  (* OK *)
  if hostB = B then 
  (let keyA:D = kA)
  else
   out(cA6, kA).

let processB =
  in(cB1, (hostA:host, =B, ga:G));
  new b:Z;
  let gb = exp2(g,b) in
  new r1:seed;
  let gab = exp2(ga, b) in
  let kB = h(k, gab) in
  out(cB2, (hostA, B, gb, sign(concatB(hostA, B, ga, gb), skB, r1))).

let processH =
  !nH
  in(cH, xH:G);
  out(cHret, h(k,xH)).

let processK =
  !N2
  in(cK, (Khost: host, Kkey: pkey));
  let Rkey:pkey = 
		if Khost = B then pkB else
		if Khost = A then pkA else
		Kkey.

process
	in(start, ());
	new k:K;
	new rkA : keyseed;
	let skA = skgen(rkA) in
	let pkA = pkgen(rkA) in
	new rkB : keyseed;
	let skB = skgen(rkB) in
	let pkB = pkgen(rkB) in
	out(cstart, (pkA, pkB));
	(processA | processB | processH | processK)


(* EXPECTED
All queries proved.
0.070s (user 0.060s + system 0.010s), max rss 28128K
END *)
