
type keyseed [fixed].
type key [bounded].


param N.
const dummy:bitstring.




fun QueryRequestTag(bitstring):bitstring[compos].
fun QueryRequest(bitstring):bitstring[compos].
const SCambridge:bitstring.
const Scoldbutsunny:bitstring.
const SOrsay:bitstring.
fun QueryResponse(bitstring,bitstring):bitstring[compos].
fun QueryResponseTag(bitstring,bitstring):bitstring[compos].
const Ssunnybutcold:bitstring.
channel c.


(* MAC *)
proba Pmac.
expand UF_CMA_mac(keyseed, key, bitstring, 
                  bitstring, kgen, hmacsha1, 
                  hmacsha1Verify, Pmac).

(* other assumptions *)
forall x:bitstring,y:bitstring,z:bitstring;
  QueryRequestTag(x)<>QueryResponseTag(y,z).

forall x:bitstring,y:bitstring,z:bitstring;
  QueryRequest(x)<>QueryResponse(y,z).



(* Events and queries *)
event AuxSent(bitstring).
event AuxReceived(bitstring).

query m:bitstring;
  event AuxReceived(m) ==> AuxSent(m).

query m:bitstring;
  event AuxReceived(QueryRequest(m)) ==> AuxSent(QueryRequest(m)).

query m:bitstring,m':bitstring;
  event AuxReceived(QueryResponse(m,m')) ==> AuxSent(QueryResponse(m,m')).



process
  in(c,());
  let NethttpChan = dummy in
    let Auxtr = dummy in
      new kseed:keyseed;
      let F11 = kgen(kseed) in
        let Queryk = F11 in
          out(c,dummy);
          (!N in(c,(request:bitstring));
              event AuxSent(QueryRequest(request));
              let h = hmacsha1(QueryRequestTag(request),Queryk) in
                out(c,(request,h));
                in(c,msg2:bitstring);
                let (s2:bitstring,h5:bitstring) = msg2 in
                  let F14 = hmacsha1Verify(QueryResponseTag(request,s2),Queryk,h5) in
                    if F14 = true then 
                      let W3 = QueryResponseTag(request,s2) in
                        event AuxReceived(QueryResponse(request,s2));
                        out(c,s2);
                        0
                     else  
                      out(c,dummy);
                      0)
           | 
          ((!N in(c,(()));
               out(c,dummy);
               in(c,msg1:bitstring);
               let (u:bitstring,h:bitstring) = msg1 in
                 let F16 = hmacsha1Verify(QueryRequestTag(u),Queryk,h) in
                   if F16 = true then 
                     let W4 = QueryRequestTag(u) in
                       event AuxReceived(QueryRequest(u));
                       let (=SCambridge) = u in
                         ( event AuxSent(QueryResponse(u,Scoldbutsunny));
                         let h = hmacsha1(QueryResponseTag(u,Scoldbutsunny),Queryk) in
                           out(c,(Scoldbutsunny,h));
                           0) 
                        else  
                         let (=SOrsay) = u in
                           event AuxSent(QueryResponse(u,Ssunnybutcold));
                           let h = hmacsha1(QueryResponseTag(u,Ssunnybutcold),Queryk) in
                             out(c,(Ssunnybutcold,h));
                             0
                    else  
                     out(c,dummy);
                     0)
            | 
           (in(c,());
            out(c,());
            0))

(* EXPECTED
All queries proved.
0.040s (user 0.040s + system 0.000s), max rss 21424K
END *)
