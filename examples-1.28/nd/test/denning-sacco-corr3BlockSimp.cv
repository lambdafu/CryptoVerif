(* Denning-Sacco key distribution protocol. *)

(* To prove this protocol, it is important to apply the security of the 
   encryption for pkB before applying the security of the signature for pkA.
   Otherwise, we need either to reapply the security of the signature
   for pkA (which is not possible in our prover), or perhaps to use 
   non-malleability of encryption, which is problematic as well.

   For now, this order of application is enforced by putting the
   definition of signature before the definition of encryption.
   Obviously, in the future, we should find some other way (backtracking?)
*)

(* Proof found by the system:
- apply security of encryption (rkB)
- apply security of signature (rkS)
- apply security of signature (rkA)
*)

param N.
param N2.
param N3.
param N4.

type nonce [large,fixed].
type host.
type key.
type keyseed [large,fixed].
type seed [fixed].
type signature.
type blocksize [fixed].
type blocksizebot.
type skey [fixed]. (* distributed key *)

fun concat1(skey, host, host, signature):blocksize [compos].
fun concat2(skey, host, host):blocksize [compos].
fun concat3(host, key):blocksize [compos].

forall y:host,z:key,y2:skey,z2:host,t2:host;	
	concat3(y,z) <> concat2(y2,z2,t2).

(* Signatures *)

proba Psign.
proba Psigncoll.

fun sign(blocksize, key, seed): signature.
fun sskgen(keyseed):key.
fun spkgen(keyseed):key.
fun check(blocksize, key, signature): bool.

fun sign2(blocksize, key, seed): signature.
fun sskgen2(keyseed):key.
fun spkgen2(keyseed):key.
fun check2(blocksize, key, signature): bool.

forall m:blocksize, r:keyseed, r2:seed; 
	check(m, spkgen(r), sign(m, sskgen(r), r2)) = true.
forall m:blocksize, r:keyseed, r2:seed; 
	check2(m, spkgen2(r), sign2(m, sskgen2(r), r2)) = true.

equiv  !N3 new r: keyseed; (() N -> spkgen(r),
			    (x: blocksize) N2 -> new r2: seed; sign(x, sskgen(r), r2)),
       (m: blocksize, y: key, si: signature) N4 -> check(m, y, si) [all]
     <=(N3 * Psign(time, N2))=>
       !N3 new r: keyseed; (() N -> spkgen2(r),
			    (x: blocksize) N2 -> new r2: seed; sign2(x, sskgen2(r), r2)),
       (m: blocksize, y: key, si: signature) N4 -> 
		find j <= N2, k <= N3 suchthat defined(x[j,k],r[k]) && y = spkgen2(r[k]) && m = x[j,k] && check2(m, y, si) then true else
		find k <= N3 suchthat defined(r[k]) && y = spkgen2(r[k]) then false else
		check(m,y,si).

collision new r1:keyseed; new r2:keyseed; 
	spkgen(r1) = spkgen(r2) <=(Psigncoll)=> r1 = r2.
collision new r1:keyseed; new r2:keyseed; 
	spkgen2(r1) = spkgen2(r2) <=(Psigncoll)=> r1 = r2.
collision new r1:keyseed; new r2:keyseed; 
	sskgen(r1) = sskgen(r2) <=(Psigncoll)=> r1 = r2.
collision new r1:keyseed; new r2:keyseed; 
	sskgen2(r1) = sskgen2(r2) <=(Psigncoll)=> r1 = r2.

(* Public-key encryption (CCA2) *)

proba Penc.
proba Penccoll.

fun enc(blocksize, key, seed): bitstring.
fun skgen(keyseed):key.
fun pkgen(keyseed):key.
fun dec(bitstring, key): blocksizebot.

fun enc2(blocksize, key, seed): bitstring.
fun skgen2(keyseed):key.
fun pkgen2(keyseed):key.
fun dec2(bitstring, key): blocksizebot.

fun injbot(blocksize):blocksizebot [compos].

const Z:blocksize.

forall m:blocksize, r:keyseed, r2:seed; 
	dec(enc(m, pkgen(r), r2), skgen(r)) = injbot(m).
forall m:blocksize, r:keyseed, r2:seed; 
	dec2(enc2(m, pkgen2(r), r2), skgen2(r)) = injbot(m).

equiv  !N3 new r: keyseed; (() N -> pkgen(r),
			    (m:bitstring) N2 -> dec(m, skgen(r))),
       (x:blocksize, y:key) N4 -> new r2:seed; enc(x,y,r2) [all]
     <=(N3 * Penc(time, N2))=> 
       !N3 new r: keyseed; (() N -> pkgen2(r),
			    (m:bitstring) N2 -> 
		find j <= N4 suchthat defined(m2[j],y[j],x2[j]) &&
		y[j] = pkgen2(r) && m = m2[j] then injbot(x2[j]) else dec2(m, skgen2(r))),
       (x:blocksize, y:key) N4 -> new r2:seed; new r3:seed;
		find k <= N3 suchthat defined(r[k]) && y = pkgen2(r[k]) then
			(let x2:blocksize = x in
			let m2:bitstring = enc2(Z, y, r2) in
			m2)
		else enc(x,y,r3).

collision new r1:keyseed; new r2:keyseed; 
	pkgen(r1) = pkgen(r2) <=(Penccoll)=> r1 = r2.
collision new r1:keyseed; new r2:keyseed; 
	pkgen2(r1) = pkgen2(r2) <=(Penccoll)=> r1 = r2.
collision new r1:keyseed; new r2:keyseed; 
	skgen(r1) = skgen(r2) <=(Penccoll)=> r1 = r2.
collision new r1:keyseed; new r2:keyseed; 
	skgen2(r1) = skgen2(r2) <=(Penccoll)=> r1 = r2.

(* Queries *)

query secret keyA.
query secret keyB.
query secret1 keyA.
query secret1 keyB.

channel c1, c2, c3, c4, c5, c6, c7, c8, c9, start, finish.

const A : host.
const B : host.

event beginA(host, host, skey).
event endB(host, host, skey).

query x:host, y:host, k:skey;
	event endB(x,y,k) ==> beginA(x,y,k).

let processA =
	in(c1, (=A, =pkA, cert1:signature, hostX: host, pkX:key, cert2:signature));
	if check(concat3(A, pkA), pkS, cert1) then
	if check(concat3(hostX, pkX), pkS, cert2) then 
	new k:skey;
	new r1:seed;
	new r2:seed;
	event beginA(A, hostX, k);
        out(c2, (A, pkA, cert1, hostX, pkX, cert2, enc(concat1(k, A, hostX, sign(concat2(k, A, hostX), skA, r1)), pkX, r2)));
	(* OK *)
	in(finish, =());
        if hostX = B then
	(
	let keyA:skey = k 
	)
	else out(c8, k).

let processB =
	in(c3, (hostY:host, pkY:key, cert1:signature, =B, =pkB, cert2:signature, m:bitstring));
	if check(concat3(hostY, pkY), pkS, cert1) then
	if check(concat3(B, pkB), pkS, cert2) then 
        let injbot(concat1(k, =hostY, =B, s)) = dec(m,skB) in
	if check(concat2(k, hostY, B), pkY, s) then
	(* OK *)
        if hostY = A then
	(
	event endB(hostY, B, k);
        let keyB:skey = k 
	)
	else out(c9, k).

let processK =
	in(c4, (Khost: host, Kkey: key)).

let processS = 
	in(c5, (h1: host, h2: host));
	if h2 = A then
		new r3: seed;
		out(c6, (h2, pkA, sign(concat3(h2, pkA), skS, r3)))
	else if h2 = B then
		new r3: seed;
		out(c6, (h2, pkB, sign(concat3(h2, pkB), skS, r3)))
	else
		find j2 <= N2 suchthat defined(Khost[j2],Kkey[j2]) && (Khost[j2] = h2) then
		new r3: seed;
		out(c6, (h2, Kkey[j2], sign(concat3(h2, Kkey[j2]), skS, r3))).

process 
	in(start, =());
	new rkA: keyseed;
	let pkA = spkgen(rkA) in
	let skA = sskgen(rkA) in
	new rkB: keyseed;
	let pkB = pkgen(rkB) in
	let skB = skgen(rkB) in
	new rkS: keyseed;
	let pkS = spkgen(rkS) in
	let skS = sskgen(rkS) in
	out(c7, (pkA, pkB, pkS));
	((! N processA) |
	 (! N processB) | 
	 (! N processS) |
	 (! N2 processK))


(* EXPECTED
RESULT Could not prove secrecy of keyB.
0.260s (user 0.260s + system 0.000s), max rss 48352K
END *)
