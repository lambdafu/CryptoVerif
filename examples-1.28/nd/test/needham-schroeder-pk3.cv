(* Needham Schroeder public key protocol. *)

param N.
param N2.
param N3.
param N4.

type nonce [large,fixed].
type host.
type key.
type keyseed [large,fixed].
type seed [fixed].
type signature.

fun nonceToBitstring(nonce):bitstring [compos].
fun concat1(nonce, host):bitstring [compos].
fun concat2(nonce, nonce):bitstring [compos].
fun concat3(key, host):bitstring [compos].

forall y:key,z:host,y2:nonce,z2:host;
	concat3(y,z) <> concat1(y2,z2).
forall z:nonce,t:nonce,y2:nonce,z2:host;
	concat2(z,t) <> concat1(y2,z2).
forall z:nonce,t:nonce,y2:key,z2:host;
	concat2(z,t) <> concat3(y2,z2).

(* Here I ignore the fact that public-key encryption works on a block and
   may fail. *)
(* Public-key encryption (CCA2) *)

proba Penc.
proba Penccoll.

fun enc(bitstring, key, seed): bitstring.
fun skgen(keyseed):key.
fun pkgen(keyseed):key.
fun dec(bitstring, key): bitstring.

fun enc2(bitstring, key, seed): bitstring.
fun skgen2(keyseed):key.
fun pkgen2(keyseed):key.
fun dec2(bitstring, key): bitstring.
(* The function Z returns for each bitstring, a bitstring
   of the same length, consisting only of zeroes. *)
fun Z(bitstring):bitstring.
const Znonce:nonce.
const Zhost:host.
const Zkey:key.

forall m:bitstring, r:keyseed, r2:seed; 
	dec(enc(m, pkgen(r), r2), skgen(r)) = m.
forall m:bitstring, r:keyseed, r2:seed; 
	dec2(enc2(m, pkgen2(r), r2), skgen2(r)) = m.

forall y:nonce,z:host;
	Z(concat1(y,z)) = concat1(Znonce,Zhost).
forall y:nonce,z:nonce;
	Z(concat2(y,z)) = concat2(Znonce,Znonce).
forall y:key,z:host; 
	Z(concat3(y,z)) = concat3(Zkey,Zhost).

equiv  !N3 new r: keyseed; (() N -> pkgen(r),
			    (m:bitstring) N2 -> dec(m, skgen(r))),
       (x:bitstring, y:key) N4 -> new r2:seed; enc(x,y,r2) [all]
     <=(N4 * Penc)=> 
       !N3 new r: keyseed; (() N -> pkgen2(r),
			    (m:bitstring) N2 -> 
		find j <= N4 suchthat defined(m2[j],y[j],x[j]) &&
		y[j] = pkgen2(r) && m = m2[j] then x[j] else dec2(m, skgen2(r))),
       (x:bitstring, y:key) N4 -> new r2:seed; new r3:seed;
		find k <= N3 suchthat defined(r[k]) && y = pkgen2(r[k]) then
			(let m2:bitstring = enc2(Z(x), y, r2) in
			m2)
		else enc(x,y,r3).

collision new r1:keyseed; new r2:keyseed; 
	pkgen(r1) = pkgen(r2) <=(Penccoll)=> r1 = r2.
collision new r1:keyseed; new r2:keyseed; 
	pkgen2(r1) = pkgen2(r2) <=(Penccoll)=> r1 = r2.
collision new r1:keyseed; new r2:keyseed; 
	skgen(r1) = skgen(r2) <=(Penccoll)=> r1 = r2.
collision new r1:keyseed; new r2:keyseed; 
	skgen2(r1) = skgen2(r2) <=(Penccoll)=> r1 = r2.

(* Signatures *)

proba Psign.
proba Psigncoll.

fun sign(bitstring, key, seed): signature.
fun sskgen(keyseed):key.
fun spkgen(keyseed):key.
fun check(bitstring, key, signature): bool.

fun sign2(bitstring, key, seed): signature.
fun sskgen2(keyseed):key.
fun spkgen2(keyseed):key.
fun check2(bitstring, key, signature): bool.

forall m:bitstring, r:keyseed, r2:seed; 
	check(m, spkgen(r), sign(m, sskgen(r), r2)) = true.
forall m:bitstring, r:keyseed, r2:seed; 
	check2(m, spkgen2(r), sign2(m, sskgen2(r), r2)) = true.

equiv  !N3 new r: keyseed; (() N -> spkgen(r),
			    (x: bitstring) N2 -> new r2: seed; sign(x, sskgen(r), r2)),
       (m: bitstring, y: key, si: signature) N4 -> check(m, y, si) [all]
     <=(Psign)=>
       !N3 new r: keyseed; (() N -> spkgen2(r),
			    (x: bitstring) N2 -> new r2: seed; sign2(x, sskgen2(r), r2)),
       (m: bitstring, y: key, si: signature) N4 -> 
		find j <= N2, k <= N3 suchthat defined(x[j,k],r[k]) && y = spkgen2(r[k]) && m = x[j,k] && check2(m, y, si) then true else
		find k <= N3 suchthat defined(r[k]) && y = spkgen2(r[k]) then false else
		check(m,y,si).

collision new r1:keyseed; new r2:keyseed; 
	spkgen(r1) = spkgen(r2) <=(Psigncoll)=> r1 = r2.
collision new r1:keyseed; new r2:keyseed; 
	spkgen2(r1) = spkgen2(r2) <=(Psigncoll)=> r1 = r2.
collision new r1:keyseed; new r2:keyseed; 
	sskgen(r1) = sskgen(r2) <=(Psigncoll)=> r1 = r2.
collision new r1:keyseed; new r2:keyseed; 
	sskgen2(r1) = sskgen2(r2) <=(Psigncoll)=> r1 = r2.

(* Queries *)

query secret NaA.
query secret NaB.
query secret NbA.
query secret NbB.

channel c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15, start, finish.
const A : host.
const B : host.

let processA =
	in(c1, hostX: host);
	out(c2, (A, hostX));
	in(c3, (pkX: key, =hostX, ms: signature));
	if check(concat3(pkX, hostX), pkS, ms) then
	(* Message 3 *)
        new Na: nonce;
	new r3: seed;
        out(c4, enc(concat1(Na, A), pkX, r3));
	(* Message 6 *)
        in(c5, m: bitstring);
	let concat2(=Na, Nb) = dec(m, skA) in
	(* Message 7 *)
	new r4: seed;
	out(c6, enc(nonceToBitstring(Nb), pkX, r4));
	(* OK *)
	in(finish, =());
	if hostX = B then
	let NaA:nonce = Na in 
	let NbA:nonce = Nb.

let processB =
	(* Message 3 *)
	in(c7, m:bitstring);
	let concat1(Na, hostY) = dec(m, skB) in
	out(c8, (B, hostY));
	in(c9, (pkY: key, =hostY, ms: signature));
	if check(concat3(pkY, hostY), pkS, ms) then
	(* Message 6 *)
	new Nb: nonce;
	new r5: seed;
	out(c10, enc(concat2(Na, Nb), pkY, r5));
	(* Message 7 *)
	in(c11, m3: bitstring);
	if nonceToBitstring(Nb) = dec(m3, skB) then
	(* OK *)
	if hostY = A then
	let NaB: nonce = Na in
	let NbB: nonce = Nb.

let processK =
	in(c12, (Khost: host, Kkey: key));
	let Rkey:key = 
		if Khost = A then pkA else
		if Khost = B then pkB else
		Kkey.

let processS = 
	in(c13, (h1: host, h2: host));
	find j2 <= N2 suchthat defined(Khost[j2],Rkey[j2]) && (Khost[j2] = h2) then
	new r3: seed;
	out(c14, (Rkey[j2], h2, sign(concat3(Rkey[j2], h2), skS, r3))).

process 
	in(start, =());
	new rkA: keyseed;
	let pkA = pkgen(rkA) in
	let skA = skgen(rkA) in
	new rkB: keyseed;
	let pkB = pkgen(rkB) in
	let skB = skgen(rkB) in
	new rkS: keyseed;
	let pkS = spkgen(rkS) in
	let skS = sskgen(rkS) in
	out(c15, (pkA, pkB, pkS));
	((! N processA) |
	 (! N processB) | 
	 (! N processS) |
	 (! N2 processK))


(* EXPECTED
RESULT Could not prove secrecy of NbB, secrecy of NbA, secrecy of NaB, secrecy of NaA.
2.030s (user 2.020s + system 0.010s), max rss 64320K
END *)
