(* 1 round of Public-key Kerberos protocol. fixed. *)

(*
The desired query
query w:bitstring, x:maxmac, y:maxmac, z:maxmac, N:nonce;
       event fullCK(K,T,N,w,x,y) ==> fullKC(C,T,N,w,z,y).		 
is not proved.

In CryptoVerif 1.09, it is proved.
In CryptoVerif 1.10, one can prove it by adding

     ;
SArename z_270;
success

at the end of the proof.

In CryptoVerif 1.20, it is proved again.

Two points:

1) in the game

Game 46 is
in(start, ());
new rkC: keyseed;
let pkC: pkey = pkgen2(rkC) in
new rkCs: skeyseed;
let spkC: spkey = spkgen2(rkCs) in
new rkKs: skeyseed;
let spkK: spkey = spkgen2(rkKs) in
new rkCA: skeyseed;
let pkCA: spkey = spkgen2(rkCA) in
new rKt: symkeyseed;
let Kt: key = kgen(rKt) in
let x_53: sblocksize = concat1(C, pkC, spkC) in
new q1: sseed;
let certC: signature = sign2(x_53, sskgen2(rkCA), q1) in
out(c25, (pkC, spkC, spkK, pkCA));
(
  (
    (
      ! !_31 <= N
      in(c1[!_31], hostT: tgs);
      new n2: nonce;
      new tc0: timest;
      let x_76: sblocksize = padno(tc0, n2) in
      new r1: sseed;
      new n1: nonce;
      out(c2[!_31], (C, pkC, spkC, certC, tc0, n2, sign2(x_76, sskgen2(rkCs), r1), C, hostT, n1));
      in(c3[!_31], (m21: bitstring, =C, TGT_38: maxmac, m24: maxmac));
      find @i_133 <= N suchthat defined(tk_96[@i_133], AK_35[@i_133], z_230[@i_133], n5[@i_133], hostW[@i_133], ms4[@i_133], tc1[@i_133], ms3[@i_133], m2_118[@i_133]) && (m21 = m2_118[@i_133]) then
        let hostZ: kas = K in
        let x_74: sblocksize = padno(tc0, n2) in
        find  suchthat defined(tk_96[@i_133], AK_35[@i_133], z_230[@i_133], n5[@i_133], hostW[@i_133], ms4[@i_133], tc1[@i_133], ms3[@i_133]) && ((certC = ms3[@i_133]) && ((tc0 = tc1[@i_133]) && ((!_31 = @i_78[@i_133]) && ((sign2(x_74, sskgen2(rkCs), r1) = ms4[@i_133]) && ((hostT = hostW[@i_133]) && (n1 = n5[@i_133])))))) then
          if defined(tk_96[@i_133], AK_35[@i_133], z_230[@i_133]) && (z_230[@i_133] = m24) then
          event fullCK(hostZ, hostT, n1, m21, TGT_38, m24);
          out(c18[!_31], acceptC1(hostZ, hostT))
	[[ 
	CryptoVerif might realize that the next branch of find is impossible:
	it requires defining z_201[@i_133] and we already know that m2_118[@i_133] is defined,
	but these two variables are defined in different branches of find below, so
	they cannot be defined simultaneously. CryptoVerif tests that (check_compatible_main in src/simplify.ml)
	but only for variables with the current replication indices.
	]]
        orfind  suchthat defined(z_201[@i_133], n5[@i_133], hostW[@i_133], ms4[@i_133], tc1[@i_133], ms3[@i_133]) && ((certC = ms3[@i_133]) && ((tc0 = tc1[@i_133]) && ((!_31 = @i_78[@i_133]) && ((sign2(x_74, sskgen2(rkCs), r1) = ms4[@i_133]) && ((hostT = hostW[@i_133]) && (n1 = n5[@i_133])))))) then
          if defined(z_201[@i_133]) && (z_201[@i_133] = m24) then
          event fullCK(hostZ, hostT, n1, m21, TGT_38, m24);
          out(c18[!_31], acceptC1(hostZ, hostT))
      orfind @i_132 <= N suchthat defined(z_201[@i_132], AK_35[@i_132], n5[@i_132], hostW[@i_132], ms4[@i_132], tc1[@i_132], ms3[@i_132], m2_123[@i_132]) && (m21 = m2_123[@i_132]) then
        let hostZ: kas = K in
        let x_74: sblocksize = padno(tc0, n2) in
        find  suchthat defined(tk_96[@i_132], AK_35[@i_132], z_230[@i_132], n5[@i_132], hostW[@i_132], ms4[@i_132], tc1[@i_132], ms3[@i_132]) && ((certC = ms3[@i_132]) && ((tc0 = tc1[@i_132]) && ((!_31 = @i_78[@i_132]) && ((sign2(x_74, sskgen2(rkCs), r1) = ms4[@i_132]) && ((hostT = hostW[@i_132]) && (n1 = n5[@i_132])))))) then
          if defined(tk_96[@i_132], AK_35[@i_132], z_230[@i_132]) && (z_230[@i_132] = m24) then
          event fullCK(hostZ, hostT, n1, m21, TGT_38, m24);
          out(c18[!_31], acceptC1(hostZ, hostT))
        orfind  suchthat defined(z_201[@i_132], n5[@i_132], hostW[@i_132], ms4[@i_132], tc1[@i_132], ms3[@i_132]) && ((certC = ms3[@i_132]) && ((tc0 = tc1[@i_132]) && ((!_31 = @i_78[@i_132]) && ((sign2(x_74, sskgen2(rkCs), r1) = ms4[@i_132]) && ((hostT = hostW[@i_132]) && (n1 = n5[@i_132])))))) then
          if defined(z_201[@i_132]) && (z_201[@i_132] = m24) then
          event fullCK(hostZ, hostT, n1, m21, TGT_38, m24);
          out(c18[!_31], acceptC1(hostZ, hostT))
    |
      ! !_32 <= N
      in(c22[!_32], (hostY: client, pkY: pkey, spkY: spkey, ms3: signature, tc1: timest, n4: nonce, ms4: signature, hostV: client, hostW: tgs, n5: nonce));
      if (hostV = hostY) then
      if (((hostY = C) && ((pkY = pkC) && (spkY = spkC))) && check2(concat1(hostY, pkY, spkY), pkCA, ms3)) then
      find @i_78 <= N suchthat defined(n2[@i_78], tc0[@i_78], x_74[@i_78]) && (((tc1 = tc0[@i_78]) && (n4 = n2[@i_78])) && check2(padno(tc1, n4), spkY, ms4)) then
        find j1 <= N2 suchthat defined(Qkey[j1], Lhost[j1]) && (Lhost[j1] = hostW) then
        new s3_92: symkeyseed;
        let AK_35: key = kgen(s3_92) in
        new tk_96: timest;
        new r4_95: symseed;
        let TGT_37: maxmac = encsym(concat5(AK_35, tk_96, hostY), Qkey[j1], r4_95) in
        let x_231: maxenc = concat4(AK_35, n5, tk_96, hostW) in
        new r5_97: symseed;
        new s1_93: symkeyseed;
        let z_230: maxmac = encsym(x_231, kgen2(s1_93), r5_97) in
        new r7_99: seed;
        let m2_118: bitstring = enc2(Z, pkY, r7_99) in
        let m5: bitstring = (m2_118, hostY, TGT_37, z_230) in
        event fullKC(hostY, hostW, n5, m2_118, TGT_37, z_230);
        out(c23[!_32], m5)
      orfind @i_78 <= N suchthat defined(n2[@i_78], tc0[@i_78], x_76[@i_78]) && (((tc1 = tc0[@i_78]) && (n4 = n2[@i_78])) && check2(padno(tc1, n4), spkY, ms4)) then
        find j1 <= N2 suchthat defined(Qkey[j1], Lhost[j1]) && (Lhost[j1] = hostW) then
        new s3_100: symkeyseed;
        let AK_35: key = kgen(s3_100) in
        new r4_103: symseed;
        new tk_104: timest;
        let TGT_37: maxmac = encsym(concat5(AK_35, tk_104, hostY), Qkey[j1], r4_103) in
        let x_202: maxenc = concat4(AK_35, n5, tk_104, hostW) in
        new s1_101: symkeyseed;
        new r5_105: symseed;
        let z_201: maxmac = encsym(x_202, kgen2(s1_101), r5_105) in
        new r7_107: seed;
        let m2_123: bitstring = enc2(Z, pkY, r7_107) in
        let m5: bitstring = (m2_123, hostY, TGT_37, z_201) in
        event fullKC(hostY, hostW, n5, m2_123, TGT_37, z_201);
        out(c23[!_32], m5)
    )
  |
    ! !_33 <= N2
    in(c21[!_33], (Lhost: tgs, Lkey: key));
    if (Lhost = T) then
      let Qkey: key = Kt
    else
      let Qkey: key = Lkey
  )
|
  ! !_34 <= N2
  in(c16[!_34], (Mhost1: tgs, Mhost2: server, Mkey: key))
)


2) The equation
m2_118[@i_133[!_253]] = m2_123[@i_133[!_253]]
obtained when trying to prove the query 
query w:bitstring, x:maxmac, y:maxmac, z:maxmac, N:nonce;
       event fullCK(K,T,N,w,x,y) ==> fullKC(C,T,N,w,z,y).		 
should be oriented. Then I think the query would be proved.

The reason why it is not oriented is that we have
(m2_118[@i_133[!_253]] >>= enc2(Z, pkY[@i_133[!_253]], r7_99[@i_133[!_253]]))
(m2_123[@i_133[!_253]] >>= enc2(Z, pkY[@i_133[!_253]], r7_107[@i_133[!_253]]))
so after applying these substitutions, we obtain an equality between two
enc2(...) which we do not know how to orient.

Similarly, the equation
(z_230[@i_133[!_253]] = z_201[@i_133[!_253]])
is not oriented.

3) We obtain the facts
fullKC(hostY[@i_133[!_253]], hostW[@i_133[!_253]], n5[@i_133[!_253]], m2_118[@i_133[!_253]], TGT_37[@i_133[!_253]], z_230[@i_133[!_253]])
and
fullKC(hostY[@i_133[!_253]], hostW[@i_133[!_253]], n5[@i_133[!_253]], m2_123[@i_133[!_253]], TGT_37[@i_133[!_253]], z_201[@i_133[!_253]])
while we would need
fullKC(hostY[@i_133[!_253]], hostW[@i_133[!_253]], n5[@i_133[!_253]], m2_118[@i_133[!_253]], TGT_37[@i_133[!_253]], z_201[@i_133[!_253]])
									^^^^					     ^^^^
and cannot proved the equality between them because the equations are not oriented.


*)


(* The proof for PKINIT was *)
proof {
crypto sign rkCA;
crypto sign rkCs;
crypto enc rkC;
crypto sign rkKs;
success;
auto
}

param N.
param N2.
param N3.
param N4.

type nonce [fixed,large].
type client [bounded].
type kas [bounded].
type tgs [bounded].
type server [bounded].

(* types for public-key crypto: *)
type pkey [bounded].
type skey [bounded].
type keyseed [large,fixed].
type seed [fixed].
type spkey [bounded].
type sskey [bounded].
type skeyseed [large,fixed].
type sseed [fixed].  
type signature [bounded].
type blocksize [fixed].
type blocksizebot [bounded].
type sblocksize [bounded].

(* types for symmetric enc: *)
type symkeyseed [fixed].
type key [fixed].
type protkey [fixed].
type usenum1 [fixed].
type usenum2 [fixed].
type macs [fixed].
type mkeyseed [fixed].
type mkey [fixed].
type symseed [fixed].
type maxmac [bounded].
type maxenc [bounded].
type timest [fixed].

(* type for checksum: *)
type checksum [fixed].


(* concatenation functions, needed to be able to apply, e.g., encryption to a list: *)
(*public-key:*)
fun concat1(client, pkey, spkey):sblocksize [compos].							(* for client  certificates *)
fun concat3(key, mkey, (*checksum*) macs):sblocksize [compos]. 	     	       	  	    		(* for signature over {k1, k2, ck}*)
fun concat7(kas, pkey, spkey):sblocksize [compos].    							(* for kas certificate *)
fun padno(timest, nonce):sblocksize [compos]. 	    	   	      	      	   	   	     	(* to sign tc0, n2*)
fun concat2(kas, pkey, spkey, signature, key, mkey, macs, signature):blocksize [compos]. 			(* for encryption {certK, {k,ck}_skK } *)
fun concat4(key, nonce, timest, tgs):maxenc [compos]. 						   	(* for authenticator {AK, n1, t_K, T}_k *)
fun concat5(key, timest, client):maxenc [compos]. 							(* for TGT and ST *)
fun concat8(key, nonce, timest, server):maxenc [compos]. 		       				(* for {SK, n2, t_T, S}_AK in TG_reply *)
fun pad(client, timest):maxenc [compos].								(* for {C,t}_SK *)
fun padts(timest):maxenc [compos].									(* for {t}_SK *)
fun concat6(client, pkey, spkey, signature, timest, nonce, signature, client, tgs, nonce):maxmac [compos].  	(* for checksum of first message *)


(* inequalities of outputs of two different concat functions when they output the same types : *) 

forall y:key, x:timest, z:client, t2:key, y2:nonce, x2:timest, z2:tgs;        	  concat5(y,x,z) <> concat4(t2,y2,x2,z2).
forall t:key, y: nonce, x:timest, z:server, t2:key, y2:nonce, x2:timest, z2:tgs;  concat8(t,y,x,z) <> concat4(t2,y2,x2,z2).
forall z:client, t:timest, t2:key, y2:nonce, x2:timest, z2:tgs;  	 	  pad(z,t) <> concat4(t2,y2,x2,z2).
forall t: timest, t2:key, y2:nonce, x2:timest, z2:tgs;  			  padts(t) <> concat4(t2,y2,x2,z2).
forall y:key, x:timest, z:client, t2: key, y2:nonce, x2:timest, z2:server;   	  concat5(y,x,z) <> concat8(t2,y2,x2,z2).
forall y:key, x:timest, z:client, t2: timest, z2:client;    			  concat5(y,x,z) <> pad(z2,t2). 
forall y:key, x:timest, z:client, t2: timest;    				  concat5(y,x,z) <> padts(t2). 
forall t:key, y:nonce, x:timest, z:server, t2:timest, z2:client;  		  concat8(t,y,x,z) <> pad(z2,t2).
forall t:key, y:nonce, x:timest, z:server, t2:timest;  				  concat8(t,y,x,z) <> padts(t2).
forall t: timest, z: client, t2: timest;   					  pad(z,t)<> padts(t2).

forall k1:key, k2:mkey, y:(*checksum*) macs, z2:client, y2:pkey, x2:spkey; 		  concat3(k1,k2,y) <> concat1(z2,y2,x2).
forall k1:key, k2:mkey, y:(*checksum*) macs, t2:timest, z2: nonce; 			  concat3(k1,k2,y) <> padno(t2,z2).
forall t:timest, y:nonce, z2:client, y2:pkey, x2:spkey;				  padno(t,y) <> concat1(z2,y2,x2).
forall k1:key, k2:mkey, y:(*checksum*)macs, z2:kas, y2:pkey, x2:spkey;		  concat3(k1,k2,y) <> concat7(z2,y2,x2).
forall t:timest, y:nonce, z2:kas, y2:pkey, x2:spkey; 	     			  padno(t,y) <> concat7(z2,y2,x2).
forall z2:client, y2:pkey, x2:spkey, z:kas, y:pkey, x:spkey;		  	  concat1(z2,y2,x2) <> concat7(z,y,x).


(* Public-key encryption (CCA2): *)

proba Penc.
proba Penccoll.

fun enc(blocksize, pkey, seed):bitstring.
fun skgen(keyseed):skey.
fun pkgen(keyseed):pkey.
fun dec(bitstring, skey):blocksizebot.

fun enc2(blocksize, pkey, seed):bitstring.
fun skgen2(keyseed):skey.
fun pkgen2(keyseed):pkey.
fun dec2(bitstring, skey):blocksizebot.

fun injbot1(blocksize):blocksizebot [compos].

const Z:blocksize.

forall m:blocksize, r:keyseed, r2:seed; 
	dec(enc(m, pkgen(r), r2), skgen(r)) = injbot1(m).
forall m:blocksize, r:keyseed, r2:seed; 
	dec2(enc2(m, pkgen2(r), r2), skgen2(r)) = injbot1(m).

equiv  !N3 new r:keyseed; (() -> pkgen(r),
			    (m:bitstring) N2 -> dec(m, skgen(r))),
       (x:blocksize, y:pkey) N4 -> new r2:seed; enc(x,y,r2) [all]
     <=(N3 * N4 * Penc(time, N2))=> 
       !N3 new r:keyseed; (() -> pkgen2(r),
			    (m:bitstring) N2 -> 
		find j <= N4 suchthat defined(m2[j],y[j],x[j]) &&
		y[j] = pkgen2(r) && m = m2[j] then injbot1(x[j]) else dec2(m, skgen2(r))),
       (x:blocksize, y:pkey) N4 -> 
		find k <= N3 suchthat defined(r[k]) && y = pkgen2(r[k]) then
			(new r2:seed;
			let m2:bitstring = enc2(Z, y, r2) in
			m2)
		else new r3:seed; enc(x,y,r3).

collision new r1:keyseed; new r2:keyseed; 
	pkgen(r1) = pkgen(r2) <=(Penccoll)=> r1 = r2.
collision new r1:keyseed; new r2:keyseed; 
	pkgen2(r1) = pkgen2(r2) <=(Penccoll)=> r1 = r2.
collision new r1:keyseed; new r2:keyseed; 
	skgen(r1) = skgen(r2) <=(Penccoll)=> r1 = r2.
collision new r1:keyseed; new r2:keyseed; 
	skgen2(r1) = skgen2(r2) <=(Penccoll)=> r1 = r2.


(* Signatures: *)

proba Psign.
proba Psigncoll.

fun sign(sblocksize, sskey, sseed):signature.
fun sskgen(skeyseed):sskey.
fun spkgen(skeyseed):spkey.
fun check(sblocksize, spkey, signature):bool.

fun sign2(sblocksize, sskey, sseed):signature.
fun sskgen2(skeyseed):sskey.
fun spkgen2(skeyseed):spkey.
fun check2(sblocksize, spkey, signature):bool.

forall m:sblocksize, r:skeyseed, r2:sseed; 
	check(m, spkgen(r), sign(m, sskgen(r), r2)) = true.
forall m:sblocksize, r:skeyseed, r2:sseed; 
	check2(m, spkgen2(r), sign2(m, sskgen2(r), r2)) = true.

equiv  !N3 new r:skeyseed; (() -> spkgen(r),
			    (x:sblocksize) N2 -> new r2:sseed; sign(x, sskgen(r), r2)),
       (m: sblocksize, y:spkey, si:signature) N4 -> check(m, y, si) [all]
     <=(N3 * Psign(time, N2))=>
       !N3 new r:skeyseed; (() -> spkgen2(r),
			    (x:sblocksize) N2 -> new r2:sseed; sign2(x, sskgen2(r), r2)),
       (m: sblocksize, y: spkey, si: signature) N4 -> 
		find j <= N2, k <= N3 suchthat defined(x[j,k],r[k]) && y = spkgen2(r[k]) && m = x[j,k] && check2(m, y, si) then true else
		find k <= N3 suchthat defined(r[k]) && y = spkgen2(r[k]) then false else
		check(m,y,si).

collision new r1:skeyseed; new r2:skeyseed; 
	spkgen(r1) = spkgen(r2) <=(Psigncoll)=> r1 = r2.
collision new r1:skeyseed; new r2:skeyseed; 
	spkgen2(r1) = spkgen2(r2) <=(Psigncoll)=> r1 = r2.
collision new r1:skeyseed; new r2:skeyseed; 
	sskgen(r1) = sskgen(r2) <=(Psigncoll)=> r1 = r2.
collision new r1:skeyseed; new r2:skeyseed; 
	sskgen2(r1) = sskgen2(r2) <=(Psigncoll)=> r1 = r2. 


(* Shared-key encryption (CPA Stream cipher + INT-CTXT): *)

proba Pencsym.
proba Pencctxt.

fun encsym(maxenc,key,symseed):maxmac.
fun kgen(symkeyseed):key.
fun decsym(maxmac,key):bitstringbot.

fun encsym2(maxenc,key,symseed):maxmac.
fun kgen2(symkeyseed):key.

fun injbot2(maxenc):bitstringbot [compos].
forall x:maxenc; injbot2(x) <> bottom.

(* The function Z2 returns for each bitstring, a bitstring of the same length, consisting only of zeroes. *)
fun Z2(maxenc):maxenc.

const Zconcat4:maxenc.
const Zconcat5:maxenc.
const Zconcat8:maxenc.
const  	  Zpad:maxenc.
const   Zpadts:maxenc. 

forall m:maxenc, r:symkeyseed, r2:symseed; 
	decsym(encsym(m, kgen(r), r2), kgen(r)) = injbot2(m).

forall m:key, y:nonce, x:timest, z:tgs; 
	Z2(concat4(m,y,x,z)) = Zconcat4.
forall y:key, x:timest, z:client; 
	Z2(concat5(y,x,z)) = Zconcat5.
forall t:key, y:nonce, x:timest, z:server;
	Z2(concat8(t, y, x, z)) = Zconcat8.
forall z:client, t:timest;
        Z2(pad(z,t)) = Zpad.
forall t: timest;
        Z2(padts(t)) = Zpadts.

equiv  !N2 new r:symkeyseed; ((x:maxenc) N -> new r2:symseed; encsym(x, kgen2(r), r2)) 
     <=(N2 * Penc(time, N))=> 
       !N2 new r:symkeyseed; ((x:maxenc) N -> new r2:symseed; encsym2(Z2(x), kgen2(r), r2)).

equiv ! N2 new r:symkeyseed; ((x:maxenc) N -> new r2:symseed; encsym(x, kgen(r), r2),
			    (y:maxmac) N3 -> decsym(y,kgen(r))) 
     <=(N2 * Pencctxt(time, N, N3))=> 
      ! N2 new r:symkeyseed; ((x:maxenc) N -> new r2:symseed; let z:maxmac = encsym(x, kgen2(r), r2) in z,
			    (y:maxmac) N3 -> find j <= N suchthat defined(x[j],r2[j],z[j]) && z[j] = y then injbot2(x[j]) else bottom).


(* Unforgeable Mac: *)

proba Pmac.

fun mac(maxmac, mkey):macs.
fun checkmac(maxmac, mkey, macs): bool.
fun mkgen(mkeyseed):mkey.

fun mac2(maxmac, mkey):macs.
fun checkmac2(maxmac, mkey, macs): bool.
fun mkgen2(mkeyseed):mkey.


forall m:maxmac, r: mkeyseed;
	checkmac(m, mkgen(r), mac(m, mkgen(r))).
forall m:maxmac, r:mkeyseed;
	checkmac2(m, mkgen2(r), mac2(m, mkgen2(r))).


equiv !N3 new r: mkeyseed;(
	 (x: maxmac) N -> mac(x, mkgen(r)),
	 (m: maxmac, ma: macs) N2 -> checkmac(m, mkgen(r), ma))
     <=(N3 * Pmac(time, N, N2))=>
      !N3 new r: mkeyseed;(
	 (x: maxmac) N -> mac2(x, mkgen2(r)),
	 (m: maxmac, ma: macs) N2 -> 
	    find j <= N suchthat defined(x[j]) && (m = x[j]) && (ma = mac2(x[j], mkgen2(r)))
(* checkmac2(x[j], mkgen2(r), ma) *) then true else false).


(* Queries *)

channel c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15, c16, c17, c18, c19, c20, c21, c22, c23, c24, c25,
	 start, finish, cC, cK.

const C :client.
const K :kas.
const T :tgs.
const S :server.

fun acceptC1(kas, tgs):bitstring.
fun acceptC2(tgs, server):bitstring.
fun acceptC3(server):bitstring.
fun acceptK(client):bitstring.
fun acceptT(client, server):bitstring.
fun acceptS(client): bitstring.


event fullKC(client, tgs, nonce, bitstring, maxmac, maxmac).
event fullCK(kas, tgs, nonce, bitstring, maxmac, maxmac).		
event partCT(tgs, maxmac, maxmac).			
event fullCT(tgs, server, nonce, maxmac, maxmac, maxmac).  
event partTC(client, maxmac, maxmac).   		
event fullTC(client, server, nonce, maxmac, maxmac, maxmac, maxmac).

event partCS(server, tgs, maxmac, maxmac).
event fullCS(server, tgs, maxmac, maxmac, maxmac).
event partSC(client, maxmac, maxmac).
event fullSC(client, maxmac, maxmac, maxmac).      		



(* authentication queries : *)
(*
query w:bitstring, x:maxmac, y:maxmac, z:maxmac, N:nonce;
       event inj:fullCK(K,T,N,w,x,y) ==> inj:fullKC(C,T,N,w,z,y).
*)
query w:bitstring, x:maxmac, y:maxmac, z:maxmac, N:nonce;
       event fullCK(K,T,N,w,x,y) ==> fullKC(C,T,N,w,z,y).		 
query w:bitstring, w':bitstring, x:maxmac, y:maxmac, z:maxmac, N:nonce;
       event fullCK(K,T,N,w,x,y) ==> fullKC(C,T,N,w',z,y).		 
query w:bitstring, w':bitstring, x:maxmac, y:maxmac, y':maxmac, z:maxmac, N:nonce;
       event fullCK(K,T,N,w,x,y) ==> fullKC(C,T,N,w,z,y').		 

(*
query  w: bitstring,  x:maxmac, x':maxmac, y:maxmac, y': maxmac, N:nonce;				   
        event partTC(C,x,y) ==> partCT(T,x',y) && fullKC(C,T,N,w,x,y').
						  	
query z:maxmac, z':maxmac, y:maxmac, x:maxmac, x':maxmac, v:maxmac, N:nonce;
      	event inj:fullCT(T,S,N,x,z,y) ==> inj: fullTC(C,S,N,x',z',v,y).

query z:maxmac, y:maxmac, x:maxmac, w:maxmac, v:maxmac, v':maxmac, N:nonce ;
	event partSC(C, z, y) ==> partCS(S, T, x, y) && fullTC(C, S, N, v, v', z, w).

query z:maxmac, x:maxmac, y: maxmac, y':maxmac, w:maxmac;
       event fullCS(S,T,z,y,w) ==> fullSC(C,x,y',w).	 
*)

(* channels c1, c2, c3, c4, c5, c6, c9, c10, c18, c17, c19 *)
let processC =
	in(c1, hostT:tgs);							(* choose  hostT= T *)
	new n1: nonce;
	new n2: nonce;
    	new r1: sseed;
	new tc0: timest;
	out(c2, (C, pkC, spkC, certC, tc0, n2, sign(padno(tc0,n2), sskC, r1), C, hostT, n1));
	in(c3, (m21: bitstring, =C, TGT:maxmac, m24:maxmac));
	let injbot1(concat2(hostZ:kas, pkZ:pkey, spkZ:spkey, ms1:signature, k3:key, k4:mkey, ck1:macs, ms2:signature))=dec(m21, skC) in   (* m21 = {{certK, [k,ck]_skK}}_{pkC} *)
	if check(concat7(hostZ, pkZ, spkZ), pkCA, ms1) then  (* checking the signature of certK using the public key of the CA : *)
	if check(concat3(k3, k4, ck1), spkK, ms2) then     	     (* checking the signature over k, ck using the public key pkK of K :*)
	let y':maxmac = concat6(C, pkC, spkC, certC, tc0, n2, sign(padno(tc0,n2), sskC, r1), C, hostT, n1) in
	if checkmac(y', k4, ck1) then
	let injbot2(concat4(AK, =n1, tk, =hostT)) = decsym(m24, k3) in		(* m24 = {AK, n1, t_K, T}_{k} *)
	event fullCK(hostZ, hostT, n1, m21, TGT, m24);
	out(c18, acceptC1(hostZ,hostT)).


(*channels c21, c16,*)
let processTKEY =
	in(c21, (Lhost:tgs, Lkey:key)); 
	let Qkey:key =
	    	  if Lhost = T then Kt else
		  Lkey.

let processSKEY = 
	in(c16,(Mhost1:tgs, Mhost2:server, Mkey:key) );
	let Pkey: key = 
	    	 if Mhost1 = T && Mhost2 = S then Ks else
		 Mkey.


(*channels c22, c23 *)
let processK = 
    	in(c22, (hostY:client, pkY:pkey, spkY:spkey, ms3:signature, tc1:timest, n4:nonce, ms4:signature, hostV:client, hostW:tgs, n5:nonce)); (* hostY = C, hostW = T *)
	if hostV = hostY then
     	if check(concat1(hostY, pkY, spkY), pkCA, ms3) then
	if check(padno(tc1,n4), spkY, ms4) then
	find j1 <= N2 suchthat defined(Lhost[j1],Qkey[j1]) && (Lhost[j1] = hostW) then
	new s3:symkeyseed;
	let AK = kgen(s3) in
	new s1:symkeyseed;
	let k1 = kgen(s1) in
	new s2:mkeyseed;
	let k2 = mkgen(s2) in 
	new tk:timest;
	new r4:symseed;
	let TGT = encsym(concat5(AK, tk, hostY), Qkey[j1], r4) in
	new r5:symseed;
	let e24 = encsym(concat4(AK, n5, tk, hostW), k1, r5) in
	new r6:sseed;
	let y:maxmac = concat6(hostY, pkY, spkY, ms3, tc1, n4, ms4, hostY, hostW, n5) in
	let ck = mac(y, k2) in
	let ms21 =  sign(concat3(k1, k2, ck), sskK, r6) in 
	new r7:seed;
	let e21 = enc(concat2(K, pkK, spkK, certK, k1, k2, ck, ms21), pkY, r7) in
	let m5 = (e21, hostY, TGT, e24) in
	event fullKC(hostY, hostW, n5, e21, TGT, e24);
	out(c23, m5).


process 
	in(start, ());
	new rkC: keyseed;
	let pkC = pkgen(rkC) in
	let skC = skgen(rkC) in
	new rkCs: skeyseed;
	let spkC = spkgen(rkCs) in
	let sskC = sskgen(rkCs) in
	new rkK: keyseed;
	let pkK = pkgen(rkK) in
	let skK = skgen(rkK) in
	new rkKs: skeyseed;
	let spkK = spkgen(rkKs) in
	let sskK = sskgen(rkKs) in
	new rkCA: skeyseed;
	let pkCA = spkgen(rkCA) in
	let skCA = sskgen(rkCA) in
	new rKt: symkeyseed;
	let Kt = kgen(rKt) in
	new rKs: symkeyseed;
	let Ks = kgen(rKs) in
	new q1: sseed;
	new q2: sseed;
	let certC = sign(concat1(C, pkC, spkC), skCA, q1) in
	let certK = sign(concat7(K, pkK, spkK), skCA, q2) in  (* Note: certK actually only needs to bind K's name to a public key for signing,  not for encryption. We just want certK and certC to have the same structure  *)
	out(c25,(pkC, spkC, spkK, pkCA));
	((! N processC) |
	 (! N processK) |
	 (! N2 processTKEY)  |
	 (! N2 processSKEY))


(* EXPECTED
All queries proved.
2.120s (user 2.108s + system 0.012s), max rss 0K
END *)
