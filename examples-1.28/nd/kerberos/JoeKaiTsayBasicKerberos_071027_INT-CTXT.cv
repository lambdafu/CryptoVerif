(* 3 rounds  of Basic Kerberos, consider authentication only, vhost *)

(* set interactiveMode = true.*)

param N.
param N2.
param N3.
param N4.

type nonce [large,fixed].
type kas [bounded].
type client [bounded].
type tgs [bounded].
type server [bounded].
type mkey [bounded].
type mkeyseed [fixed].
type key [fixed].
type keyseed [fixed].
type seed [fixed].
type macs [fixed].
type maxenc [bounded].
type timest [fixed].								(* needed in particular for CS_reply *)

(* following functions are needed to set the type of a list of elements to `bitstring', so that the list can be encrypted: *)
fun concat1(key, nonce, tgs):maxenc [compos]. 					(* needed for {AK, mAK, n1, T}_Kc in AS_reply *)
fun concat2(key, client):maxenc [compos].  					(* needed for TGT and ST *)
fun concat3(key, nonce, server):maxenc [compos]. 		       			(*for {SK, mSK, n2, S}_AK in TG_reply *)
fun pad(client, timest):maxenc [compos].
fun padts(timest): maxenc [compos].

forall y:key, z:client, t2:key, y2:nonce, z2:tgs;  concat2(y,z) <> concat1(t2,y2,z2).
forall t:key, y: nonce, z: server, t2:key, y2:nonce, z2:tgs;  concat3(t,y,z) <> concat1(t2,y2,z2).
forall z:client,t: timest, t2:key, y2:nonce, z2:tgs;  pad(z,t) <> concat1(t2,y2,z2).
forall t: timest, t2:key, y2:nonce, z2:tgs;  padts(t) <> concat1(t2,y2,z2).
forall y:key, z:client, t2: key, y2: nonce, z2: server;    concat2(y,z) <> concat3(t2,y2,z2).
forall y:key, z:client, t2: timest,  z2:client;    concat2(y,z) <> pad(z2,t2). 
forall y:key, z:client, t2: timest;    concat2(y,z) <> padts(t2). 
forall t:key, y: nonce, z: server, t2:timest, z2:client;  concat3(t,y,z) <> pad(z2, t2).
forall t:key, y: nonce, z: server, t2:timest;  concat3(t,y,z) <> padts( t2).
forall t: timest, z: client, t2: timest;  pad(z,t)<> padts(t2).

(* Shared-key encryption (CPA Stream cipher) *)

proba Penc.
proba Pencctxt.

fun enc(maxenc, key, seed): bitstring.
fun kgen(keyseed):key.
fun dec(bitstring, key): bitstringbot.

fun enc2(maxenc, key, seed): bitstring.
fun kgen2(keyseed):key.

fun injbot(maxenc):bitstringbot [compos].
forall x:maxenc; injbot(x) <> bottom.

(* The function Z returns for each bitstring, a bitstring of the same length, consisting only of zeroes. *)
fun    Z(maxenc):maxenc.
const  Zconcat1:maxenc.
const  Zconcat2:maxenc.
const  Zconcat3: maxenc.
const  Zpad:maxenc.
const  Zpadts: maxenc.

forall m:maxenc, r:keyseed, r2:seed; 
	dec(enc(m, kgen(r), r2), kgen(r)) = injbot(m).
forall y:nonce, z:tgs, t:key;
	Z(concat1(t, y, z)) = Zconcat1.
forall y:key, z:client; 
	Z(concat2(y, z)) = Zconcat2.
forall  y:nonce, z:server, t:key;
	Z(concat3(t, y, z)) = Zconcat3.
forall z:client, t:timest;
        Z(pad(z,t)) = Zpad.
forall t: timest;
        Z(padts(t)) = Zpadts.
					    

equiv  !N2 new r: keyseed; ((x:maxenc) N -> new r2: seed; enc(x, kgen2(r), r2)) 
     <=(N2 * Penc(time, N))=> 
       !N2 new r: keyseed; ((x:maxenc) N -> new r2: seed; enc2(Z(x), kgen2(r), r2)).


equiv ! N2 new r: keyseed; ((x:maxenc) N -> new r2: seed; enc(x, kgen(r), r2),
			    (y:bitstring) N3 -> dec(y,kgen(r))) 
     <=(N2 * Pencctxt(time, N, N3))=> 
      ! N2 new r: keyseed; ((x:maxenc) N -> new r2: seed; let z:bitstring = enc(x, kgen2(r), r2) in z,
			    (y:bitstring) N3 -> find j <= N suchthat defined(x[j],r2[j],z[j]) && z[j] = y then injbot(x[j]) else bottom).



(* Queries *)

channel c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15, c16, c17, c18, c19,c20, c21, c22, c23, c24, c25, start, finish, cC, cT.
const C : client.
const K : kas.
const T : tgs.
const S : server.						

fun acceptC1(kas):bitstring.
fun acceptC2(tgs, server):bitstring.
fun acceptC3(server):bitstring.
fun acceptT(client, server):bitstring.
fun acceptS(client): bitstring.

event fullKC(client, tgs, nonce, bitstring, bitstring).
event fullCK(tgs, nonce,bitstring, bitstring).		
event partCT(tgs,  bitstring, bitstring).
event fullCT(tgs, server,  nonce, bitstring, bitstring, bitstring). 			
event partTC(client, bitstring, bitstring).    		
event fullTC(client,server, nonce, bitstring, bitstring, bitstring, bitstring).
			

event partCS(server,tgs, bitstring, bitstring).
event fullCS(server,tgs,  bitstring, bitstring, bitstring).
event partSC(client, bitstring, bitstring).
event fullSC(client, bitstring, bitstring, bitstring).      		


(* authentication queries : *)

query x:bitstring, y:bitstring, z:bitstring, N:nonce;
       event inj:fullCK(T,N,x, y) ==> inj:fullKC(C,T,N, z, y).
		 
query  x:bitstring, x':bitstring, y:bitstring, y': bitstring, N:nonce;					   
        event partTC(C,x,y) ==> partCT(T,x',y) && fullKC(C,T,N,x, y').
						  	
(* query x: bitstring, x':bitstring,z: bitstring, z':bitstring, y:bitstring, w:bitstring, N:nonce, N': nonce;
      	event fullCT(T,S, N,x,z,y) ==> fullTC(C,S, N,x',z',y) && fullKC(C,T,N',x',w). *)
query z:bitstring,z':bitstring, y:bitstring, x:bitstring, x':bitstring, v:bitstring, N:nonce;
      	event inj:fullCT(T, S, N, x, z, y) ==> inj: fullTC(C, S, N, x', z', v, y).

query 	z:bitstring, y:bitstring, x:bitstring, w: bitstring, v:bitstring, v':bitstring, N:nonce ;
	event partSC(C, z, y) ==> partCS(S, T, x, y) &&  fullTC(C, S, N, v, v', z, w).
query z: bitstring, x:bitstring, y: bitstring,y':bitstring, w:bitstring;
       event fullCS(S,T, z, y, w) ==> fullSC(C, x, y', w).	 

(*channels c1, c2, c3, c4, c6, c9, c10, c17, c18, c19, c20 *)
let processC = 
	in(c1, h: tgs);								(* h = T  *) 
	new Nc: nonce;
	out(c2, (C, h, Nc));
	in(c3, (=C, m: bitstring, m2: bitstring));				(* m = Ticket Granting Ticket *)
        let injbot(concat1(AK, =Nc, =h)) = dec(m2, Kc) in 
	event fullCK(h, Nc, m, m2);
	out(c18, acceptC1(K));
	(! N3 processC2 ).

let processC2 =
    	in(c17, (hT: tgs, h2: server));						(* h2 = S *)
	if hT = h then
	new Nt: nonce;
	new ts: timest;
	new r1: seed;
	let e5 = enc(pad(C, ts), AK, r1) in					(* e5 = {C, t}_AK *)
	event partCT(h, m,e5);	
	out(c4, (m, e5, h2, Nt));
	in(c5, (=C, m6:bitstring, m7:bitstring));
	let injbot(concat3(SK, =Nt, =h2))= dec(m7, AK) in			(* m7 = {SK, n2, S}_AK   *)
	event fullCT(h, h2, Nt, m, e5, m7);
	out(c19, acceptC2(h, h2));
	(! N4 processC3).

let processC3 =					
    	in(c20, h3:server);
	if h3 = h2 then      
	new ts2: timest;
	new r2: seed;
	let e12 = enc(pad(C, ts2), SK, r2 ) in
	event partCS(h2,h, m7,e12);								(* m7 = {SK, n2, S}_AK, e12 = {C, t}_SK *)
	out(c6, (m6, e12));
	in(c9, (m13: bitstring));
	if injbot(padts(ts2))= dec(m13, SK) then
	event fullCS(h2,h, m7,e12,m13);								(* m13 = {t}_SK *)
	out(c10, acceptC3(h2)).
		
(*channels c13, c16, c21 *)
let processCKEY =
	in(c13, (Khost: client, Kkey: key));
	let Rkey:key = 
		if Khost = C then Kc else
		Kkey.

let processTKEY =
	in(c21, (Lhost: tgs, Lkey: key)); 
	let Qkey:key =
	    	  if Lhost = T then Kt else
		  Lkey.
	

let processSKEY = 
	in(c16,( Mhost1: tgs, Mhost2: server, Mkey: key) );
	let Pkey: key = 
	    	 if Mhost1 = T && Mhost2 = S then Ks else
		 Mkey.

	
					
(*channels c14, c15*)
let processK = 
	in(c14, (hc: client, ht: tgs, n: nonce));
	find j1 <= N2 suchthat defined(Khost[j1],Rkey[j1]) && (Khost[j1] = hc) then        (* shared key KC *)
	find j2 <= N2 suchthat defined(Lhost[j2],Qkey[j2]) && (Lhost[j2] = ht) then        (* shared key KT *)
	new rAK : keyseed;
	let AK = kgen(rAK) in
	new r3: seed;
	let e3 = enc(concat2(AK, hc), Qkey[j2], r3) in					     (* TGT *)
	new r4: seed;
	let e4 = enc(concat1(AK, n, ht), Rkey[j1], r4) in
	event fullKC(hc, ht, n, e3, e4);
	out(c15, (hc, e3, e4)).

(*channels c7, c8 *)
let processT =
    	in(c7, (m8:bitstring, m9:bitstring, h3:server, n2: nonce));		(* h3 = S *)
	let injbot(concat2(AK, h4 )) = dec(m8, Kt) in					(* h4 = C *)
	let injbot(pad(= h4, ts)) = dec(m9, AK) in
	event partTC(h4, m8, m9);								(* m8 = TGT={AK, C}_Kt and m9 = {C,t}_AK  *)
	find j3 <= N2 suchthat defined(Mhost1[j3],Mhost2[j3],Pkey[j3]) && (Mhost1[j3]=T && Mhost2[j3] = h3) then        (* shared key Ks *)	
	new rSK: keyseed;
	let SK= kgen(rSK)in
	new r10: seed;
	let e10 = enc(concat2(SK, h4), Pkey[j3], r10 ) in   
	new r11: seed;
	let e11 = enc(concat3(SK, n2, h3), AK, r11) in
	event fullTC(h4, h3, n2, m8, m9, e10, e11);						(* e10 = ST = {SK, C}_Ks, e11 = {SK, n2, S}_AK *)				
	out(c8, (h4, e10, e11, acceptT(h4,h3))).	

(*channels c11, c12*)	
let processS=
	in(c11, (m14: bitstring, m15:bitstring));
	let injbot(concat2(SK, h5))=dec(m14, Ks) in						(*h5 = C *)
	let injbot(pad(=h5, ts3))= dec(m15, SK) in
	new r16: seed;
	let e16 = enc(padts(ts3), SK, r16 ) in
	event partSC(h5, m14, m15);									(*m14 = {SK,C}_Ks, m15 = {C, t}_SK *)
	event fullSC(h5, m14, m15, e16);
	out(c12, (e16, acceptS(h5))).


process
	in(start, ());
	new rKc: keyseed;
	let Kc = kgen(rKc) in									(* enc key between client C and KAS K *)

	new rKt: keyseed;
	let Kt = kgen(rKt) in									(* enc key between TGS T and KAS K *)

	new rKs: keyseed;
	let Ks = kgen(rKs) in
	out(c25, ());
	((! N processC) | 
	 (! N processK) |
	 (! N processT) |
	 (! N processS)	|
	 (! N2 processCKEY)|
	 (! N2 processTKEY)|
	 (! N2 processSKEY))


(* EXPECTED
All queries proved.
2.150s (user 2.130s + system 0.020s), max rss 100752K
END *)
