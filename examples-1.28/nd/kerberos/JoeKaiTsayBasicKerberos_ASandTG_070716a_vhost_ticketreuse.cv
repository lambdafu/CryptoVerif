(* First round and a half of Basic Kerberos *)



param N.
param N2.
param N3.

type nonce [large,fixed].
			(* type host [bounded].*)
type client [bounded].
type kas [bounded].
type tgs [bounded].
type server [bounded].
type mkey [fixed].
type mkeyseed [fixed].
type key [fixed].
type keyseed [fixed].
type seed [fixed].
type macs [fixed].
type maxenc [bounded].
type maxmac [bounded].
type timest [fixed].									(* needed in particular for CS_reply *)

(* following functions are needed to set the type of a list of elements to `bitstring', so that the list can be encrypted: *)
fun concat1(key, mkey, nonce, tgs):maxenc [compos]. 					(* needed for {AK, mAK, n1, T}_Kc in AS_reply  *)
fun concat2(key, mkey, client):maxenc [compos].  						(* needed for TGT and ST *)
fun concat3(key, mkey, nonce, server):maxenc [compos]. 		       		(*for {SK, mSK, n2, S}_AK in TG_reply *)
fun pad(client, timest):maxenc [compos].

forall y:key, w:mkey, z:client, t2:key, w2:mkey, y2:nonce, z2:tgs;  concat2(y,w,z) <> concat1(t2,w2,y2,z2).
forall t:key, w: mkey, y: nonce, z: server, t2:key, w2:mkey, y2:nonce, z2:tgs;  concat3(t,w,y,z) <> concat1(t2,w2,y2,z2).
forall y:key, w:mkey, z:client, t2: key, w2: mkey, y2: nonce, z2: server;    concat2(y,w,z) <> concat3(t2,w2,y2,z2).

forall z:client,t: timest, t2:key, w2:mkey, y2:nonce, z2:tgs;  pad(z, t) <> concat1(t2,w2,y2,z2).
forall t:key, w: mkey, y: nonce, z: server, t2:timest, z2:client;  concat3(t,w,y,z) <> pad(z2, t2).
forall y:key, w:mkey, z:client, t2: timest,  z2: client;    concat2(y,w,z) <> pad(z2,t2).

(* Shared-key encryption (CPA Stream cipher) *)

proba Penc.

fun enc(maxenc, key, seed): maxmac.
fun kgen(keyseed):key.
fun dec(maxmac, key): bitstringbot.

fun enc2(maxenc, key, seed): maxmac.
fun kgen2(keyseed):key.

fun injbot(maxenc):bitstringbot [compos].
(* The function Z returns for each bitstring, a bitstring of the same length, consisting only of zeroes. *)
fun    Z(maxenc):maxenc.
const  Zconcat1:maxenc.
const  Zconcat2:maxenc.
const  Zconcat3: maxenc.
const  Zpad:maxenc.

forall m:maxenc, r:keyseed, r2:seed; 
	dec(enc(m, kgen(r), r2), kgen(r)) = injbot(m).
forall y:nonce, z:tgs, t:key, u:mkey;
	Z(concat1(t, u, y, z)) = Zconcat1.
forall y:key, w:mkey, z:client; 
	Z(concat2(y, w, z)) = Zconcat2.
forall  y:nonce, z:server, t:key, u:mkey;
	Z(concat3(t, u, y, z)) = Zconcat3.
forall z:client, t:timest;
        Z(pad(z,t)) = Zpad. 
					    

equiv  !N2 new r: keyseed; ((x:maxenc) N -> new r2: seed; enc(x, kgen(r), r2)) 
     <=(N2 * Penc(time, N))=> 
       !N2 new r: keyseed; ((x:maxenc) N -> new r2: seed; enc2(Z(x), kgen2(r), r2)).

(* Weakly Unforgeable MAC *)

proba Pmac.

fun mac(maxmac, mkey):macs.
fun check(maxmac, mkey, macs): bool.
fun mkgen(mkeyseed):mkey.

fun mac2(maxmac, mkey):macs.
fun check2(maxmac, mkey, macs): bool.
fun mkgen2(mkeyseed):mkey.

forall m:maxmac, r:mkeyseed;
	check(m, mkgen(r), mac(m, mkgen(r))).
forall m:maxmac, r:mkeyseed;
	check2(m, mkgen2(r), mac2(m, mkgen2(r))).

						   
equiv !N3 new r: mkeyseed;(
	 (x: maxmac) N -> mac(x, mkgen(r)),
	 (m: maxmac, ma: macs) N2 -> check(m, mkgen(r), ma))
     <=(N3 * Pmac(time, N, N2))=>
      !N3 new r: mkeyseed;(
	 (x: maxmac) N -> mac2(x, mkgen2(r)),
	 (m: maxmac, ma: macs) N2 -> 
	    find j <= N suchthat defined(x[j]) && (m = x[j]) &&  (* (ma = mac2(x[j], mkgen2(r)))*) check2(x[j], mkgen2(r), ma) then true else false).



(* Queries *)

channel c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15, c16, c17, c18, c19, c20, start, finish, cC, cT.
const C : client.
const T : tgs.
const K : kas.
const S : server.						

fun acceptC1(kas) : bitstring.
fun acceptC2(tgs,server):bitstring.
fun aceptC(kas): bitstring.
fun acceptT(client, server):bitstring.
      		
event fullKC(client, tgs,nonce, maxmac, maxmac).
event fullCK(tgs, nonce,maxmac, maxmac).		
event partCT(tgs,  maxmac, maxmac).
event fullCT(tgs, server, key,  nonce, maxmac, maxmac, maxmac). 			
event partTC(client, maxmac, maxmac).    		
event fullTC(client,server, key, nonce, maxmac, maxmac, maxmac).


(* authentication queries : *)

 query x:maxmac, y:maxmac, z:maxmac, N:nonce;
       event inj:fullCK(T,N, x, y) ==> inj:fullKC(C,T,N, z, y).
		 
query  x:maxmac, x':maxmac, y:maxmac, y': maxmac, N:nonce;					   
        event partTC(C,x,y) ==> partCT(T,x',y) && fullKC(C,T,N,x, y').	


(* OLD: Too strong					  	
query x: maxmac, x':maxmac,z: maxmac,y:maxmac, w:maxmac,k: key, N:nonce, N': nonce;
      	event fullCT(T,S,k, N,x,z,y) ==> fullTC(C,S,k, N,x',z,y) && fullKC(C,T,N',x',w).
query z:maxmac, y:maxmac, x:maxmac, x':maxmac,k:key, N:nonce;
      	event inj:fullCT(T,S,k, N,x, z,y) ==> inj: fullTC(C, S,k, N,x', z,y).
*)


query x: maxmac, x':maxmac,z: maxmac,z':maxmac,y:maxmac, w:maxmac,k: key, N:nonce, N': nonce;
      	event fullCT(T,S,k, N,x,z,y) ==> fullTC(C,S,k, N,x',z',y) && fullKC(C,T,N',x',w).
query z:maxmac, z':maxmac, y:maxmac, x:maxmac, x':maxmac,k:key, N:nonce;
      	event inj:fullCT(T,S,k, N,x, z,y) ==> inj: fullTC(C, S,k, N,x', z',y).

query x: maxmac, y:maxmac, z:maxmac, k: key, k':key, N: nonce;
      	 event fullTC(C, S,k, N, x,z,y) && fullCT(T, S, k',N, x,z,y) ==> k=k'.		 
	      	 
query x: maxmac, x':maxmac, y:maxmac, z:maxmac, z':maxmac, k: key, k':key, N: nonce;
      	 event fullTC(C, S,k, N, x,z,y) && fullTC(C, S, k',N, x',z',y) ==> k=k'.		 
		 

(* Secrecy of the key SK *) 
query secret keySK. 					
query secret keyTSK.



let processC = 
	in(c1, h: tgs);		(* h = T , h2 = S *) 
	new Nc: nonce;
	out(c2, (C, h, Nc));
	in(c3, (=C, m: maxmac, mac1: macs, m2: maxmac, mac2: macs));				(* m = Ticket Granting Ticket *)
	if check(m2, mKc, mac2) then
        let injbot(concat1(AK, mAK, =Nc, =h)) = dec(m2, Kc) in 
	event fullCK(h, Nc, m, m2);
	out(c18, acceptC1(K));
	(! N3 processC2 ).

let processC2 =
    	in(c17, (hT: tgs, h2: server));
	if hT = h then
	new Nt: nonce;
	new ts: timest;
	new r1: seed;
	let e5 = enc(pad(C, ts), AK, r1) in
	let mac5 = mac(e5, mAK) in
	event partCT(h, m,e5);	
	out(c4, (m, mac1, e5, mac5, h2,Nt));
	in(c5, (=C, m6:maxmac, mac6: macs, m7:maxmac, mac7:macs));
	if check(m7, mAK, mac7) then
	let injbot(concat3(SK, mSK, =Nt, =h2))= dec(m7, AK) in
	event fullCT(h, h2,SK, Nt,m, e5,m7);
	out(c6, acceptC2(h,h2) );
	(* OK *)
	in(finish, ());
	if h = T && h2 = S then
	(
	let keySK:key = SK	
	)
	else out(cC, SK). 


(*channels c13, c16, c17 *)
let processCKEY =
	in(c13, (Khost: client, Kkey: key, Kmkey: mkey));
	let Rkey:key = 
		if Khost = C then Kc else
		Kkey
	in
	let Rmkey:mkey =
		if Khost = C then mKc else
		Kmkey.

let processTKEY =
	in(c17, (Lhost: tgs, Lkey: key, Lmkey: mkey)); 
	let Qkey:key =
	    	  if Lhost = T then Kt else
		  Lkey
	in
	let Qmkey:mkey = 
	    	 if Lhost = T then mKt else
		 Lmkey.

let processSKEY = 
	in(c16,( Mhost1: tgs, Mhost2: server, Mkey: key, Mmkey: mkey) );
	let Pkey: key = 
	    	 if Mhost1 = T && Mhost2 = S then Ks else
		 Mkey
	in
	let Pmkey: mkey =
	    	 if Mhost1=T && Mhost2 = S then mKs else
		 Mmkey.
	


let processK = 
	in(c14, (hc: client, ht: tgs, n: nonce));
	find j1 <= N2 suchthat defined(Khost[j1],Rkey[j1],Rmkey[j1]) && (Khost[j1] = hc) then        (* shared key KC *)
	find j2 <= N2 suchthat defined(Lhost[j2],Qkey[j2],Qmkey[j2]) && (Lhost[j2] = ht) then        (* shared key KT *)
	new rAK : keyseed;
	let AK = kgen(rAK) in
	new rmAK : mkeyseed;
	let mAK = mkgen(rmAK) in 
	new r3: seed;
	let e3 = enc(concat2(AK, mAK, hc), Qkey[j2], r3) in  (* TGT *)
	let mac3 = mac(e3, Qmkey[j2]) in
	new r4: seed;
	let e4 = enc(concat1(AK, mAK, n, ht), Rkey[j1], r4) in
	let mac4 = mac(e4, Rmkey[j1]) in
	event fullKC(hc, ht, n, e3, e4);
	out(c15, (hc, e3, mac3, e4, mac4)).

(*channels c7, c8 *)
let processT =
    	in(c7, (m8:maxmac, mac8:macs, m9:maxmac, mac9: macs, h3:server, n2: nonce));		(* h3 = S *)
	if check(m8, mKt, mac8) then
	let injbot(concat2(AK, mAK, h4 )) = dec(m8, Kt) in					(* h4 = C *)
	if check(m9, mAK, mac9) then
	let injbot(pad(= h4, ts)) = dec(m9, AK) in
	event partTC(h4, m8, m9);							(* m8 = TGT={AK, mAK, C}_Kt and m9 = {C,t}_AK  *)
	(* new rSK: keyseed;
	let SK= kgen(rSK)in
	new rmSK: mkeyseed;
	let mSK = mkgen(rmSK) in *)
	new SK :key;
	new mSK : mkey;
	find j3 <= N2 suchthat defined(Mhost1[j3],Mhost2[j3],Pmkey[j3],Pkey[j3]) && (Mhost1[j3]=T && Mhost2[j3] = h3) then     (* shared key Ks *)	
	new r10: seed;
	let e10 = enc(concat2(SK, mSK, h4), Pkey[j3], r10 ) in
	let mac10 = mac(e10, Pmkey[j3]) in   
	new r11: seed;
	let e11 = enc(concat3(SK, mSK, n2, h3), AK, r11) in
	let mac11 = mac(e11, mAK) in
	event fullTC(h4, h3,SK, n2, m8,m9,e11);
	out(c8, (h4, e10,mac10, e11, mac11, acceptT(h4,h3)));
	(* OK *)
	in(c9, ());
	if h4 = C && h3 = S then
	(
	let keyTSK:key = SK
	 )
	else
       (
	out(cT, SK)
	).

process
	in(start, ());
	new rKc: keyseed;
	let Kc = kgen(rKc) in									(* enc key between client C and KAS K *)
	new rmKc: mkeyseed;
	let mKc = mkgen(rmKc) in								(* mac key -"-  *)
	new rKt: keyseed;
	let Kt = kgen(rKt) in									(* enc key between TGS T and KAS K *)
	new rmKt: mkeyseed;
	let mKt = mkgen(rmKt) in								(* mac key  -"- *)
	new rKs: keyseed;
	let Ks = kgen(rKs) in
	new rmKs: mkeyseed;
	let mKs = mkgen(rmKs) in 
	out(c20, ());
	((! N processC) |  
	 (! N processK) |
	 (! N processT) |
	 (! N2 processCKEY)|
	 (! N2 processTKEY)|
	 (! N2 processSKEY))

(* EXPECTED
RESULT Could not prove event fullTC(C, S, k, N, x, z, y) && fullTC(C, S, k', N, x', z', y) ==> (k = k'), event fullTC(C, S, k, N, x, z, y) && fullCT(T, S, k', N, x, z, y) ==> (k = k').
3.540s (user 3.520s + system 0.020s), max rss 132624K
END *)
