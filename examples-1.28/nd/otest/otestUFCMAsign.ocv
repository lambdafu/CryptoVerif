(*

Woo and Lam public-key auth protocol (1997)

A -> B: A
B -> A: N
A -> B: { A, B, N }_skA
B -> S: A
S -> B: A, { A, pkA }_skS

Correct


SArename Rkey
crypto sign rkS
crypto sign rkA
success

Session identifier: (A, N)
Authentication in one direction only.
The adversary can forge a signature for a message that has already
been signed, so the signature {A,B,N}_skA is not authenticated.

*)

param N.
param N2.
param N3.
param N4.

type nonce [large,fixed].
type host [bounded].
type pkey [bounded].
type skey [bounded].
type keyseed [large,fixed].
type seed [fixed].
type signature [bounded].
type blocksize [fixed].
type blocksizebot [bounded].

fun concat1(host, host, nonce):blocksize [compos].
fun concat2(host, pkey):blocksize [compos].

forall x:host, y:host, z:nonce, x2:host, y2:pkey;
	concat1(x,y,z) <> concat2(x2,y2).

(* Signatures *)

proba Psign.
proba Psigncoll.

expand UF_CMA_signature(keyseed, pkey, skey, blocksize, signature, seed, sskgen, spkgen, sign, check, Psign, Psigncoll).

(* Queries *)

const A:host.
const B:host.
fun acceptA(host):bitstring.
fun acceptB(host):bitstring.

event fullA(host,bitstring).
event fullB(host,bitstring).

query y:bitstring;
	event inj:fullB(A, y) ==> inj:fullA(B,y).

let processA =
	OA1(hostB0:host) :=
	return(A);
	OA2(n:nonce) :=
	r1 <-R seed;
	let m3 = sign(concat1(A, hostB0, n), skA, r1) in
	event fullA(hostB0, (A, n));
	return(m3, acceptA(hostB0)).

let processB =
	OB1(hostA0:host) :=
	n <-R nonce;
	return(n);
	OB2(m:signature) :=
	return(hostA0);
	OB3(=hostA0, pkA2:pkey, m4:signature) :=
	if check(concat2(hostA0, pkA2), pkS, m4) then
	if check(concat1(hostA0, B, n), pkA2, m) then
	(* OK *)
	event fullB(hostA0, (hostA0, n));
	return(acceptB(hostA0)).


let processS =
	OS(hostA:host) :=
	find j2 <= N2 suchthat defined(Khost[j2],Rkey[j2]) && (Khost[j2] = hostA) then
	let pka = Rkey[j2] in
	r2 <-R seed;
	return(hostA, pka, sign(concat2(hostA, pka), skS, r2)).

let processK =
	OK(Khost: host, Kkey: pkey) :=
	let Rkey:pkey = 
		if Khost = A then pkA else
		if Khost = B then pkB else
		Kkey.

process 
	Ostart() :=
	rkA <-R keyseed;
	let pkA = spkgen(rkA) in
	let skA = sskgen(rkA) in
	rkB <-R keyseed;
	let pkB = spkgen(rkB) in
	let skB = sskgen(rkB) in
	rkS <-R keyseed;
	let pkS = spkgen(rkS) in
	let skS = sskgen(rkS) in
	return(pkA, pkB, pkS);
	((foreach iA <= N do processA) |
	 (foreach iB <= N do processB) | 
	 (foreach iS <= N do processS) |
	 (foreach iK <= N2 do processK))


(* EXPECTED
All queries proved.
0.060s (user 0.060s + system 0.000s), max rss 24912K
END *)
