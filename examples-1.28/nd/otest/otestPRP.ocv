(* Trivial running example for conference paper. *)

param N.
param N2.
param N3.

type mkey [bounded].
type mkeyseed [fixed].
type key [fixed,large].
type keyseed [fixed].
type seed [fixed].
type macs [bounded].

fun keyToBitstring(key):bitstring [compos].

(* Shared-key encryption (PRP) *)

proba Penc.

expand PRP_cipher(keyseed, key, key, kgen, enc, dec, Penc).


(* Mac *)

proba Pmac.

expand SUF_CMA_mac(mkeyseed, mkey, key, macs, mkgen, mac, check, Pmac).

(* Queries *)

query secret1 k2.
query secret1 k3.

query secret k2.
query secret k3.

event endB(key, macs).
event beginA(key, macs).

query x:key, y:macs, y':macs; event endB(x,y) ==> beginA(x,y).

let processA = 
	OA() :=
	k2 <-R key;
	let ea1 = enc(k2, Kab) in
	let t1 = mac(ea1, mKab) in
	event beginA(ea1, t1);
	return(ea1, t1).

let processB =
	OB(ea:key, ma:macs) :=
	if check(ea, mKab, ma) then
	let k3:key = dec(ea, Kab) in
	event endB(ea, ma);
	return().

process 
	Ostart() :=
	rKab <-R keyseed;
	let Kab = kgen(rKab) in
	rmKab <-R mkeyseed;
	let mKab = mkgen(rmKab) in
	return();
	((foreach iA <= N do processA) |
	 (foreach iB <= N do processB))

(* EXPECTED
RESULT Could not prove secrecy of k3.
0.030s (user 0.030s + system 0.000s), max rss 18176K
END *)
