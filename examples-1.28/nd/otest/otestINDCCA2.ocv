(* Denning-Sacco key distribution protocol. (corrected version) *)

(* In order to determine the proof, use interactive mode: 
   set interactiveMode = true.
The proof is as follows: *)

proof {
  crypto ind_cca2(enc) rkB;
  crypto uf_cma(sign) rkS;
  crypto uf_cma(sign) rkA;
  success;
  auto
}

(*

For the proof to succeed, it is important that "crypto enc rkB" is 
applied before "crypto sign rkA". This is because, when
A talks to B and we apply "crypto enc rkB", we replace the plaintext
with Z, and reuse the plaintext directly at the decryption site in
B, then by simplify check(..., pkA, sign(..., skA, r)) cancels out, and 
the computation of the signature under skA in this case disappears.
There is then one case less to consider when applying "crypto sign rkA".

*)

param N.
param N2.
param N3.
param N4.

type host [bounded].
type pkey [bounded].
type skey [bounded].
type keyseed [large,fixed].
type seed [fixed].
type spkey [bounded].
type sskey [bounded].
type skeyseed [large,fixed].
type sseed [fixed].
type signature [bounded].
type blocksize [fixed].
type blocksizebot [bounded].
type sblocksize [bounded].
type shkey [fixed]. (* distributed key *)

fun concat1(shkey, host, host, signature):blocksize [compos].
fun concat2(shkey, host, host):sblocksize [compos].
fun concat3(host, pkey):sblocksize [compos].
fun concat4(host, spkey):sblocksize [compos].

forall y:host,z:pkey,y2:shkey,z2:host,t2:host;
        concat3(y,z) <> concat2(y2,z2,t2).
forall y:host,z:pkey,y2:host,z2:spkey;	
	concat3(y,z) <> concat4(y2,z2).
forall y:host,z:spkey,y2:shkey,z2:host,t2:host;
        concat4(y,z) <> concat2(y2,z2,t2).

(* Public-key encryption (CCA2) *)

proba Penc.
proba Penccoll.

expand IND_CCA2_public_key_enc(keyseed, pkey, skey, blocksize, bitstring, seed, skgen, pkgen, enc, dec, injbot, Z, Penc, Penccoll).

(* Signatures *)

proba Psign.
proba Psigncoll.

expand UF_CMA_signature(skeyseed, spkey, sskey, sblocksize, signature, sseed, sskgen, spkgen, sign, check, Psign, Psigncoll).

(* Queries *)

query secret1 keyA.
query secret1 keyB.
query secret keyA.
query secret keyB.

const A : host.
const B : host.

event beginA(host, host, shkey).
event endB(host, host, shkey).

query x:host, y:host, k:shkey;
	event endB(x,y,k) ==> beginA(x,y,k).
query x:host, y:host, k:shkey;
	event inj:endB(x,y,k) ==> inj:beginA(x,y,k).

let processA =
	OA1(=A, =pkA, cert1:signature, hostX: host, pkX:pkey, cert2:signature) :=
	if check(concat4(A, pkA), pkS, cert1) then
	if check(concat3(hostX, pkX), pkS, cert2) then 
	k <-R shkey;
	r1 <-R sseed;
	r2 <-R seed;
	event beginA(A, hostX, k);
        return(A, pkA, cert1, hostX, pkX, cert2, enc(concat1(k, A, hostX, sign(concat2(k, A, hostX), skA, r1)), pkX, r2));
	(* OK *)
	OAfinish() :=
        if hostX = B then
	(
	let keyA:shkey = k
	)
	else return(k).

let processB =
	OB1(hostY:host, pkY:spkey, cert1:signature, =B, =pkB, cert2:signature, m:bitstring) :=
	if check(concat4(hostY, pkY), pkS, cert1) then
	if check(concat3(B, pkB), pkS, cert2) then 
        let injbot(concat1(k, =hostY, =B, s)) = dec(m,skB) in
	if check(concat2(k, hostY, B), pkY, s) then
	(* OK *)
        if hostY = A then
	(
	event endB(hostY, B, k);
        let keyB:shkey = k
	)
	else return(k).

let processK =
	OK(Khost: host, Kkey: pkey) :=
	let Rkey:pkey = 
		if Khost = B then pkB else
		Kkey.

let processS = 
	OS(h1: host, h2: host) :=
	find j2 <= N2 suchthat defined(Khost[j2],Rkey[j2]) && (Khost[j2] = h2) then
	r3 <-R sseed;
	return(h2, Rkey[j2], sign(concat3(h2, Rkey[j2]), skS, r3)).

let processSK =
	OSK(SKhost: host, SKkey: spkey) :=
	let SRkey:spkey = 
		if SKhost = A then pkA else
		SKkey.

let processSS = 
	OSS(h1: host, h2: host) :=
	find j2 <= N2 suchthat defined(SKhost[j2],SRkey[j2]) && (SKhost[j2] = h2) then
	r3 <-R sseed;
	return(h2, SRkey[j2], sign(concat4(h2, SRkey[j2]), skS, r3)).

process 
	Ostart() :=
	rkA <-R skeyseed;
	let pkA = spkgen(rkA) in
	let skA = sskgen(rkA) in
	rkB <-R keyseed;
	let pkB = pkgen(rkB) in
	let skB = skgen(rkB) in
	rkS <-R skeyseed;
	let pkS = spkgen(rkS) in
	let skS = sskgen(rkS) in
	return(pkA, pkB, pkS);
	((foreach iA <= N do processA) |
	 (foreach iB <= N do processB) | 
	 (foreach iS <= N do processS) |
	 (foreach iSS <= N do processSS) |
	 (foreach iK <= N2 do processK) |
	 (foreach iSK <= N2 do processSK))


(* EXPECTED
RESULT Could not prove event inj:endB(x, y, k) ==> inj:beginA(x, y, k), secrecy of keyB.
0.350s (user 0.350s + system 0.000s), max rss 48384K
END *)
