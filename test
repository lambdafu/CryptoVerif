#!/bin/bash

if [ -x ./xtime ]
then
    PROG=./xtime
else
    PROG=
fi

if [ -d /local/bblanche/tmp ]
then
    TMP=/local/bblanche/tmp/tmp
else
    TMP=tmp
fi

# The arguments of analyze are
# $1 = protocol name
# $2 = CryptoVerif options
# $3 = input filename (wrt the CryptoVerif directory)
# $4 = output filename (wrt the CryptoVerif directory)

function analyze()
{
	echo -n PROTOCOL $1 " "
	$PROG ./cryptoverif $2 $3 > $TMP.out 2>&1 
	echo PROTOCOL $1 >> $4
	cat $TMP.out >> $4
	egrep \(PROTOCOL\|'RESULT Could not prove'\|'All queries proved'\|xtime\|Error\|user\) $TMP.out > $TMP.res 
	awk '/EXPECTED/, /END/ { print $0; }' $3 | grep -v EXPECTED | grep -v END > $TMP.expected
	grep -v user $TMP.expected > $TMP.expectedres
	grep -v user $TMP.res > $TMP.actualres
	if diff -q -b $TMP.expectedres $TMP.actualres >/dev/null
	then 
	    echo OK
	else
	    echo
	    echo RESULTS DIFFER! Expected:
	    cat  $TMP.expectedres
	    echo Actual:
	    cat $TMP.actualres
	fi
	(echo -n "EXPECTED: "; grep user $TMP.expected ; echo -n "ACTUAL: "; grep user $TMP.res) | awk '/^EXPECTED:/ { expectedtime = substr($2, 0, length($2)-1); } /^ACTUAL:/ { actualtime = substr($2, 0, length($2)-1); } END { if (actualtime != "") { if (actualtime + 0 > expectedtime * 1.2 + 0.2) { print "Slower: old=" expectedtime " new=" actualtime}; if (actualtime + 0 < expectedtime * 0.8 - 0.2) { print "Faster: old=" expectedtime " new=" actualtime; } } }'
}

mkdir -p tests

for k in key_AK key_SK
do
    for loc in loc1 loc2 loc3
    do
	m4 -D$k -D$loc examples/kerberos/BasicKerberos_keyuse_Updated.m4.cv > examples/kerberos/BasicKerberos_keyuse.$k.$loc.cv
	m4 -D$k -D$loc examples/kerberos/PublicKeyKerberos_keyuse_Updated.m4.cv > examples/kerberos/PublicKeyKerberos_keyuse.$k.$loc.cv
    done
done

for key in IVCC IVSC EKCC EKSC MKCC MKSC
do
    m4 -DONEKEY=$key implementation/ssh/ssh-secrecy-key.m4.ocv > implementation/ssh/ssh-secrecy-key-$key.ocv
done
m4 implementation/ssh/ssh-secrecy-key.m4.ocv > implementation/ssh/ssh-secrecy-key.ocv


echo
echo TEST
echo
output=test`date '+%Y.%m.%d-%H_%M_%S'`
(
for i in examples/basic/*.pcv examples/basic/*.cv examples/obasic/*.ocv examples/kerberos/*.pcv examples/kerberos/*.cv
do
    if [ -f $i ]
    then
	case $i in
	    *.m4.cv) ;;
	    *)       analyze $i "" $i tests/$output;;
	esac
    fi
done
) | tee tests/res-$output
egrep \(PROTOCOL\|'RESULT Could not prove'\|'All queries proved'\|xtime\|Error\|user\) tests/$output > tests/sum-$output


if [ -d examplesnd ]
then
echo
echo NDTEST
echo
output=ndtest`date '+%Y.%m.%d-%H_%M_%S'`
rm examplesnd/*/*~ 
(
echo
echo CHANNELS FRONTEND
echo

for i in examplesnd/test/* implementation/wlsk/woolamskcorr_tbl.cv
do
    if [ -f $i ]
    then
	analyze $i "" $i tests/$output
    fi
done

echo
echo ORACLES FRONTEND
echo

for i in examplesnd/otest/* implementation/nspk/nspk3tbl.ocv implementation/ssh/ssh.ocv implementation/ssh/ssh-secrecy-key-*.ocv
do
    if [ -f $i ]
    then
	analyze $i "-in oracles" $i tests/$output
    fi
done
) | tee tests/res-$output
egrep \(PROTOCOL\|'RESULT Could not prove'\|'All queries proved'\|xtime\|Error\|user\) tests/$output > tests/sum-$output
fi

rm $TMP.*
