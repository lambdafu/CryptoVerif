(* Encrypted Key Exchange, version of 
http://www.di.ens.fr/~pointche/pub.php?reference=BrChPo03

Contributions to mention in the paper:
- allow array indices as arguments of functions in equivalences,
  to formalize CDH
- allow nested find in find conditions
- formalization of the ideal cipher model.
- manually guided elimination of collisions for passwords
- abort events, and their manual insertion; computation of probabilities
that avoids counting several times the difference between the
same games, even with events
- manual insertion of case distinctions and other instructions
- manual replacement of a term with an equal term (may not be used
for EKE)
- possibility to designate the number of different calls to an oracle
in probability formulas, for expressing more precise bounds.
- optimization of counting for computation of probabilities, both
for crypto transformations and for elimination of collisions.
- [unique] option of find
- extended the "otheruses" condition to be able to replace new y:T; 
x = enc(y,k) with new x: T; y = dec(x,k) for SPRP/ICM encryption
and then remove the computation of y when it is not used (and conversely)

Current evaluation of CDH proba: 
(qH1 * NS + NP * qH0 + 3 * NS * qH0 + NP * qH1 + 10 * NU * qH0 + 
6 * NU * qH1) pCDH(time...)
9/1/2010 (by Simplify.filter_indices):
improved to (23 * qH0 + 11 * qH1) pCDH(time...)
??/1/2010 (by Simplify.is_compatible_indices):
improved to (6 * qH0 + 3 * qH1) pCDH(time...)
18/1/2010 (by Simplify.same_oracle_call):
improved to 2 * (qH0 + qH1) pCDH(time...)
Goal: (qH0 + qH1) pCDH(time...)
+ the time should use qD rather than qH0 + qH1

25/1/2010 results proved with probability:
(qE + qD)/|passwd| + 
2 (qH0 + qH1) pCDH((NS + 2 NP + 2 NU + 2 qH0 + 2 qH1 + qD) * time(exp) + time) +
collision terms: 2. * NU * NU / |exponent| + 0.5 * qD * qD / |exponent| + 3. * NU * NP / |exponent| + 2. * NU * qD / |exponent| + 3. * NP * qD / |exponent| + 3. * NS * qD / |exponent| + 4. * NS * NU / |exponent| + 23. * 1. / |exponent| * NS + 0.5 * qD * qD / |G| + NU * qD / |G| + NU * qH1 / |hash1| + qD * NP / |G| + qD * NS / |G| + NU / |hash1| + NU * qH0 / |G| + 2. * NU * NP / |G| + 3. * NU * NS / |G| + 8.5 * NU * NU / |G| + 2. * NP * qH0 / |exponent| + 10. * NP * NS / |exponent| + 22. * NP * NU / |exponent| + 28. * 1. / |exponent| * NU + 2. * 1. / |exponent| * NP + NS * qE / |G| + NS * NP / |G| + 0.5 * NS * NS / |G| + NU * qH1 / |G| + 1.5 * NS * NS / |exponent| + NS * qE / |exponent| + 3. * NS * NP / |exponent| + NP * qE / |exponent| + (NP * NP + 2. * qE * NP + 2. * NU * NP + 4. * NS * NP + 2. * qD * NP + qE * qE + 2. * NU * qE + 4. * NS * qE + 2. * qD * qE + NU * NU + 4. * NS * NU + 2. * qD * NU + 4. * NS * NS + 4. * qD * NS + qD * qD + -1. * NP + -1. * qE + -1. * NU + -2. * NS + -1. * qD) / |G| + 2. * NP * NP / |exponent| + 2. * NS / |hash1| + 2. * NP * qH1 / |exponent|

29/3/2010: results proved with probability:
(NU + NS)/|passwd| +
2 (qH0 + qH1) pCDH((NS + 2 NP + qD + 2 NU + 2 qH0 + 2 qH1) * time(exp) + time) +
collision terms: 0.5 * qE * qE / |G| + 0.5 * qH1 * qH1 / |hash1| + qD * qD / |G| + 0.5 * NU * NU / |exponent| + 0.5 * qD * qD / |exponent| + 12. * NU * NP / |exponent| + NU * qD / |exponent| + NP * qD / |exponent| + NS * qD / |exponent| + NS * NU / |exponent| + 19. * 1. / |exponent| * NS + qD * NU / |G| + NU * qH1 / |hash1| + 2. * qD * NP / |exponent| + NP * qD / |G| + NS * NU / |hash1| + NS * qD / |G| + qH0 * NU / |G| + 2. * NP * NU / |G| + 3. * NS * NU / |G| + 8.5 * NU * NU / |G| + 2. * qD * NS / |exponent| + 2. * NU * NS / |exponent| + qH0 * NP / |exponent| + 4. * NS * NP / |exponent| + 28. * 1. / |exponent| * NU + 1. / |exponent| * NP + NS * qE / |G| + NS * NP / |G| + 0.5 * NS * NS / |G| + qH1 * NU / |G| + NS * NS / |exponent| + qE * NS / |exponent| + NP * NS / |exponent| + qE * NP / |exponent| + (NP * NP + 2. * qE * NP + 2. * NU * NP + 4. * NS * NP + 2. * qD * NP + qE * qE + 2. * NU * qE + 4. * NS * qE + 2. * qD * qE + NU * NU + 4. * NS * NU + 2. * qD * NU + 4. * NS * NS + 4. * qD * NS + qD * qD + -1. * NP + -1. * qE + -1. * NU + -2. * NS + -1. * qD) / |G|

Desired proba:
(NU + NS)/|passwd| + 
(qH0 + qH1) pCDH((2 NS + 2 NP + 2 NU + qD) * time(exp) + time) +
                 ^^^^^^^^^^^^^^^^^^^^^^^^ not completely sure for this
collision terms

*)

(* To run with otheruses deactivated, but the library with otheruses still present
   for the occurrence numbers below to be correct.

set maxIterSimplif = 3
crypto h1
show_game occ
insert 479 find j <= NU suchthat defined(X[j]) && X[j] = X_s then
show_game occ
insert 479 find nj <= qH1 suchthat defined(x11[nj], x12[nj], x13[nj], x14[nj], r1_70[nj]) && (U = x11[nj]) && (S = x12[nj]) && (X_s = x13[nj]) && (Y = x14[nj]) && (auth_s = r1_70[nj]) then
show_game occ
insert_event Auth 642
simplify
crypto enc
show_game occ
insert_event Encrypt 1301
auto

Last game:

in(start, ());
new pw: passwd;
out(c8, ());
(
  ! !_45 <= NU
  in(c1[!_45], ());
  new @1_X_4035: G;
  let X: G = cst_G in
  out(c2[!_45], (U, @1_X_4035));
  in(c5[!_45], (=S, Ystar_u: G));
  find [unique] @i_228 <= qD suchthat defined(@2_m[@i_228], @2_kd[@i_228], @1_X_3668[@i_228], @2_r4_164[@i_228]) && otheruses(@2_m[@i_228] -> @1_X_3668[@i_228]) && ((Ystar_u = @2_m[@i_228]) && (pw = @2_kd[@i_228])) then
  (
    new r_356: hash0;
    let sk_u: hash0 = r_356 in
    new r1_82: hash1;
    out(c6[!_45], r1_82)
  )
  orfind @i_224 <= NU suchthat defined(@1_X_3968[@i_224], Ystar_u[@i_224], @1_x_862[@i_224], @2_r4_176[@i_224]) && otheruses(Ystar_u[@i_224] -> @1_X_3968[@i_224]) && (Ystar_u = Ystar_u[@i_224]) then
  (
    new r_368: hash0;
    let sk_u: hash0 = r_368 in
    new r1_82: hash1;
    out(c6[!_45], r1_82)
  )
  orfind @i_222 <= qE suchthat defined(@2_r2_167[@i_222], @2_ke[@i_222], @2_x[@i_222]) && otheruses(@2_x[@i_222] -> @2_r2_167[@i_222]) && ((Ystar_u = @2_r2_167[@i_222]) && (pw = @2_ke[@i_222])) then
    event Encrypt
  orfind @i_221 <= NP suchthat defined(@1_X_3776[@i_221], Yp[@i_221], @2_r2_170[@i_221]) && otheruses(@1_X_3776[@i_221] -> @2_r2_170[@i_221]) && (Ystar_u = @2_r2_170[@i_221]) then
  (
    new r_380: hash0;
    let sk_u: hash0 = r_380 in
    new r1_82: hash1;
    out(c6[!_45], r1_82)
  )
  orfind @i_220 <= NS suchthat defined(@1_X_3906[@i_220], Y[@i_220], @2_r2_173[@i_220]) && otheruses(@1_X_3906[@i_220] -> @2_r2_173[@i_220]) && (Ystar_u = @2_r2_173[@i_220]) then
  (
    new r_392: hash0;
    let sk_u: hash0 = r_392 in
    new r1_82: hash1;
    out(c6[!_45], r1_82)
  )
  else
    new @1_X_3968: G;
    let @1_x_862: exponent = cst_exponent in
    let @2_r4_176: G = cst_G in
    new r1_82: hash1;
    new r_350: hash0;
    let sk_u: hash0 = r_350 in
    out(c6[!_45], r1_82)
) | (
  ! !_46 <= NS
  in(c3[!_46], (=U, X_s: G));
  new @1_X_3906: G;
  let Y: G = cst_G in
  new @2_r2_173: G;
  out(c4[!_46], (S, @2_r2_173));
  in(c7[!_46], auth_s: hash1);
  find j <= NU suchthat defined(@1_X_4035[j], X[j]) && (@1_X_4035[j] = X_s) then
  (
    if defined(@i_220[j], r1_82[j], r_392[j]) && ((!_46 = @i_220[j]) && (auth_s = r1_82[j])) then
    let sk_s: hash0 = r_392[j]
  )
  else
    find nj <= qH1 suchthat defined(x11[nj], x12[nj], x13[nj], x14[nj], r1_70[nj]) && ((U = x11[nj]) && ((S = x12[nj]) && ((X_s = x13[nj]) && ((@1_X_3906 = x14[nj]) && (auth_s = r1_70[nj]))))) then
    event Auth
) | (
  ! !_47 <= NP
  in(cp[!_47], ());
  new @1_X_3842: G;
  new @1_X_3776: G;
  let Yp: G = cst_G in
  new @2_r2_170: G;
  new r1_76: hash1;
  new r_332: hash0;
  let sk_p: hash0 = r_332 in
  out(cp[!_47], (U, @1_X_3842, S, @2_r2_170, r1_76))
) | (
  ! !_48 <= qE
  in(@2_c1[!_48], (@2_x: G, @2_ke: passwd));
  find [unique] @i_198 <= qD suchthat defined(@1_X_3668[@i_198], @2_kd[@i_198], @2_m[@i_198], @2_r4_164[@i_198]) && otheruses(@2_m[@i_198] -> @1_X_3668[@i_198]) && ((@2_x = @1_X_3668[@i_198]) && (@2_ke = @2_kd[@i_198])) then
    out(@2_c2[!_48], @2_m[@i_198])
  orfind @i_194 <= NU suchthat defined(@1_X_3968[@i_194], @1_x_862[@i_194], Ystar_u[@i_194], @2_r4_176[@i_194]) && otheruses(Ystar_u[@i_194] -> @1_X_3968[@i_194]) && ((@2_x = @1_X_3968[@i_194]) && (@2_ke = pw)) then
    out(@2_c2[!_48], Ystar_u[@i_194])
  orfind @i_192 <= qE suchthat defined(@2_x[@i_192], @2_ke[@i_192], @2_r2_167[@i_192]) && otheruses(@2_x[@i_192] -> @2_r2_167[@i_192]) && ((@2_x = @2_x[@i_192]) && (@2_ke = @2_ke[@i_192])) then
    out(@2_c2[!_48], @2_r2_167[@i_192])
  orfind @i_191 <= NP suchthat defined(@1_X_3776[@i_191], Yp[@i_191], @2_r2_170[@i_191]) && otheruses(@1_X_3776[@i_191] -> @2_r2_170[@i_191]) && ((@2_x = @1_X_3776[@i_191]) && (@2_ke = pw)) then
    out(@2_c2[!_48], @2_r2_170[@i_191])
  orfind @i_190 <= NS suchthat defined(@1_X_3906[@i_190], Y[@i_190], @2_r2_173[@i_190]) && otheruses(@1_X_3906[@i_190] -> @2_r2_173[@i_190]) && ((@2_x = @1_X_3906[@i_190]) && (@2_ke = pw)) then
    out(@2_c2[!_48], @2_r2_173[@i_190])
  else
    new @2_r2_167: G;
    out(@2_c2[!_48], @2_r2_167)
) | (
  ! !_49 <= qD
  in(@2_c3[!_49], (@2_m: G, @2_kd: passwd));
  find [unique] @i_188 <= qD suchthat defined(@2_m[@i_188], @2_kd[@i_188], @1_X_3668[@i_188], @2_r4_164[@i_188]) && otheruses(@2_m[@i_188] -> @1_X_3668[@i_188]) && ((@2_m = @2_m[@i_188]) && (@2_kd = @2_kd[@i_188])) then
    out(@2_c4[!_49], @1_X_3668[@i_188])
  orfind @i_184 <= NU suchthat defined(@1_X_3968[@i_184], Ystar_u[@i_184], @1_x_862[@i_184], @2_r4_176[@i_184]) && otheruses(Ystar_u[@i_184] -> @1_X_3968[@i_184]) && ((@2_m = Ystar_u[@i_184]) && (@2_kd = pw)) then
    out(@2_c4[!_49], @1_X_3968[@i_184])
  orfind @i_182 <= qE suchthat defined(@2_r2_167[@i_182], @2_ke[@i_182], @2_x[@i_182]) && otheruses(@2_x[@i_182] -> @2_r2_167[@i_182]) && ((@2_m = @2_r2_167[@i_182]) && (@2_kd = @2_ke[@i_182])) then
    out(@2_c4[!_49], @2_x[@i_182])
  orfind @i_181 <= NP suchthat defined(@1_X_3776[@i_181], Yp[@i_181], @2_r2_170[@i_181]) && otheruses(@1_X_3776[@i_181] -> @2_r2_170[@i_181]) && ((@2_m = @2_r2_170[@i_181]) && (@2_kd = pw)) then
    out(@2_c4[!_49], @1_X_3776[@i_181])
  orfind @i_180 <= NS suchthat defined(@1_X_3906[@i_180], Y[@i_180], @2_r2_173[@i_180]) && otheruses(@1_X_3906[@i_180] -> @2_r2_173[@i_180]) && ((@2_m = @2_r2_173[@i_180]) && (@2_kd = pw)) then
    out(@2_c4[!_49], @1_X_3906[@i_180])
  else
    new @1_X_3668: G;
    let @2_r4_164: G = cst_G in
    out(@2_c4[!_49], @1_X_3668)
) | (
  ! !_50 <= qH0
  in(c10[!_50], (x1: host, x2: host, x3: G, x4: G, x5: G));
  find [unique] @i_416 <= qH0 suchthat defined(x1[@i_416], x2[@i_416], x3[@i_416], x4[@i_416], x5[@i_416], r_326[@i_416]) && ((x1 = x1[@i_416]) && ((x2 = x2[@i_416]) && ((x3 = x3[@i_416]) && ((x4 = x4[@i_416]) && (x5 = x5[@i_416]))))) then
    out(c20[!_50], r_326[@i_416])
  else
    new r_326: hash0;
    out(c20[!_50], r_326)
) | (
  ! !_51 <= qH1
  in(c11[!_51], (x11: host, x12: host, x13: G, x14: G, x15: G));
  find [unique] @i_91 <= qH1 suchthat defined(x11[@i_91], x12[@i_91], x13[@i_91], x14[@i_91], x15[@i_91], r1_70[@i_91]) && ((x11 = x11[@i_91]) && ((x12 = x12[@i_91]) && ((x13 = x13[@i_91]) && ((x14 = x14[@i_91]) && (x15 = x15[@i_91]))))) then
    out(c21[!_51], r1_70[@i_91])
  else
    new r1_70: hash1;
    out(c21[!_51], r1_70)
)



proof {
set uniqueBranch = false;
set maxIterSimplif = 3;
show_game occ;
insert 172 "find j <= NU suchthat defined(X[j]) && X[j] = X_s then";
crypto h1;
show_game occ;
insert 429 "let Y' = dec(Ystar, pw) in";
show_game occ;
replace 381 Y';
show_game occ;
insert 430 "find nj <= qH1 suchthat defined(x11[nj], x12[nj], x13[nj], x14[nj], r1_66[nj]) && (U = x11[nj]) && (S = x12[nj]) && (X_s = x13[nj]) && (Y' = x14[nj]) && (auth_s = r1_66[nj]) then";
show_game occ;
insert_event Auth 537;
crypto enc;
show_game occ;
insert_event Encrypt 1472;
auto;
show_game occ;
insert 370 "find i1 <= qD, i2 <= qH1 suchthat defined(@2_m[i1], @2_kd[i1], @1_X_3743[i1], x11[i2], x12[i2], x13[i2], x14[i2], r1_66[i2]) && (@2_r2_169 = @2_m[i1]) && (U = x11[i2]) && (S = x12[i2]) && (X_s = x13[i2]) && (@1_X_3743[i1] = x14[i2]) && (auth_s = r1_66[i2]) && (pw = @2_kd[i1]) then";
show_game occ;
insert_event Auth2 445;
move binder r1_4246;
simplify;
simplify coll_elim pw;
success
}
*)
 set interactiveMode = true. 

param NU, NS, NP.

type exponent [large, fixed].
type G [large, fixed].
type passwd [password, fixed].
     (* I want to eliminate collisions with the password in 
     some cases but not others. I want to eliminate them in the protocol
     itself, but not in enc_dec_oracle (because if I eliminate them in
     enc_dec_oracle, the probability of attack will depend on qE/|passwd| 
     and/or qD/|passwd| so it may become too large). *)


type hashinput.
type hash0 [fixed].
type hash1 [fixed,large].
type host [bounded].

(* Computational Diffie-Hellman *)

proba pCDH.

expand CDH(G, exponent, g, exp, mult, pCDH).

(* Ideal cipher model *)

expand ICM_cipher(passwd, G, enc, dec, enc_dec_oracle, qE, qD).

(* Hash functions in the random oracle model *)
(*
Problem: if I use hash(concat(...)), after game transformations I get
equality tests x = concat(y1,y2,y3,y4,y5) that I would like to transform into
x = concat(x1,x2,x3,x4,x5) && x1 = y1 && ... for some x1...x5 but
CryptoVerif cannot do that. As a temporary solution, I consider only
hash functions with 5 arguments.

expand ROM_hash(hashinput, hash0, h0, hashoracle0, qH0).
expand ROM_hash(hashinput, hash1, h1, hashoracle1, qH1).
fun concat(host, host, G, G, G):hashinput [compos].
*)

param N, qH0, qH1, Neq.

fun h0(host, host, G, G, G):hash0.

equiv (x1: host, x2: host, x3: G, x4: G, x5: G) N -> h0(x1, x2, x3, x4, x5) [all]
      <=(0)=>
      (x1: host, x2: host, x3: G, x4: G, x5: G) N -> 
      	   find[unique] j <= N suchthat defined(x1[j],x2[j],x3[j],x4[j],x5[j],r[j]) && x1 = x1[j] && x2 = x2[j] && x3 = x3[j] && x4 = x4[j] && x5 = x5[j] then r[j] else
			 new r:hash0; r.

channel c10, c20.

let hashoracle0 = ! qH0 in(c10, (x1: host, x2: host, x3: G, x4: G, x5: G)); out(c20, h0(x1,x2,x3,x4,x5)). 

fun h1(host, host, G, G, G):hash1.

equiv (x1: host, x2: host, x3: G, x4: G, x5: G) N -> h1(x1, x2, x3, x4, x5) [all],
      (x1': host, x2': host, x3': G, x4': G, x5': G, r: hash1) Neq -> r = h1(x1', x2', x3', x4', x5') [all]
      <=(Neq/|hash1|)=>
      (x1: host, x2: host, x3: G, x4: G, x5: G) N -> 
      	   find[unique] j <= N suchthat defined(x1[j],x2[j],x3[j],x4[j],x5[j],r1[j]) && x1 = x1[j] && x2 = x2[j] && x3 = x3[j] && x4 = x4[j] && x5 = x5[j] then r1[j] else
			 new r1:hash1; r1,
      (x1': host, x2': host, x3': G, x4': G, x5': G, r: hash1) Neq -> 
      	   find[unique] j <= N suchthat defined(x1[j],x2[j],x3[j],x4[j],x5[j],r1[j]) && x1' = x1[j] && x2' = x2[j] && x3' = x3[j] && x4' = x4[j] && x5' = x5[j] && r = r1[j] then true else false.

channel c11, c21.

let hashoracle1 = ! qH1 in(c11, (x11: host, x12: host, x13: G, x14: G, x15: G)); out(c21, h1(x11,x12,x13,x14,x15)). 

(* Queries *)

query secret sk_u.
query secret sk_s.
query secret sk_p.

channel c1, c2, c3, c4, c5, c6, c7, c8, c9, cp,
	start, finish.

const U : host.
const S : host.

event termS(host, G, host, G, hash1, hash0).
event termU(host, G, host, G, hash1, hash0).

query x:host, X:G, y:host, Y:G, a: hash1, k:hash0;
	event inj:termS(x,X,y,Y,a,k) ==> inj:termU(x,X,y,Y,a,k).
query x:host, X:G, y:host, Y:G, a: hash1, k:hash0, k':hash0;
	event termS(x,X,y,Y,a,k) && termU(x,X,y,Y,a,k') ==> k = k'.

(* Client *)

let processU =
	in(c1, ());
	new x: exponent;
	let X = exp(g,x) in
	out(c2, (U, X));
        in(c5, (=S, Ystar_u: G));
	let Y_u = dec(Ystar_u, pw) in
	let K_u = exp(Y_u, x) in
	let auth_u = h1(U,S,X,Y_u,K_u) in
	let sk_u: hash0 = h0(U,S,X,Y_u,K_u) in
	event termU(U, X, S, Ystar_u, auth_u, sk_u);
	out(c6, auth_u).

(* Server *)

let processS =
	in(c3, (=U, X_s: G));
	new y: exponent;
	let Y = exp(g,y) in
	let Ystar = enc(Y, pw) in
	out(c4, (S, Ystar));
	in(c7, auth_s: hash1);
	let K_s = exp(X_s, y) in
	if auth_s = h1(U,S,X_s,Y,K_s) then
	let sk_s: hash0 = h0(U,S,X_s,Y,K_s) in
	event termS(U, X_s, S, Ystar, auth_s, sk_s).

(* Sessions that are subject only to a passive attack.
   We send a transcript of the session *)

let processPassive =
        in(cp, ());
        new xp: exponent;
	let Xp = exp(g, xp) in
	new yp: exponent;
	let Yp = exp(g, yp) in
	let Kp = exp(g, mult(xp,yp)) in
	let Ystarp = enc(Yp, pw) in
	let authp = h1(U, S, Xp, Yp, Kp) in
	let sk_p: hash0 = h0(U, S, Xp, Yp, Kp) in
	out(cp, (U, Xp, S, Ystarp, authp)).

process 
	in(start, ());
	new pw: passwd;
	out(c8, ());
	((! NU processU) |
	 (! NS processS) | 
	 (! NP processPassive) | enc_dec_oracle | hashoracle0 | hashoracle1)

