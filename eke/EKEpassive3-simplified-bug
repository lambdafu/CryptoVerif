(* 
Bug related to simplify/otheruses: the definition of sk_s is finally
removed
*)


proof {
set uniqueBranch = false;
set maxIterSimplif = 3;
crypto h1;
crypto enc;
show_game occ;
insert_event Encrypt 1105;
auto
}

(* set interactiveMode = true. *)

param NU, NS, NP.

type exponent [large, fixed].
type G [large, fixed].
type passwd [password, fixed].
     (* I want to eliminate collisions with the password in 
     some cases but not others. I want to eliminate them in the protocol
     itself, but not in enc_dec_oracle (because if I eliminate them in
     enc_dec_oracle, the probability of attack will depend on qE/|passwd| 
     and/or qD/|passwd| so it may become too large). *)


type hashinput.
type hash0 [fixed].
type hash1 [fixed,large].
type host [bounded].

(* Computational Diffie-Hellman *)

proba pCDH.

expand CDH(G, exponent, g, exp, mult, pCDH).

(* Ideal cipher model *)

expand ICM_cipher(passwd, G, enc, dec, enc_dec_oracle, qE, qD).

(* Hash functions in the random oracle model *)

param N, qH0, qH1.

fun h0(host, host, G, G, G):hash0.

equiv (x1: host, x2: host, x3: G, x4: G, x5: G) N -> h0(x1, x2, x3, x4, x5) [all]
      <=(0)=>
      (x1: host, x2: host, x3: G, x4: G, x5: G) N -> find[unique] j <= N suchthat defined(x1[j],x2[j],x3[j],x4[j],x5[j],r[j]) && otheruses(r[j]) && x1 = x1[j] && x2 = x2[j] && x3 = x3[j] && x4 = x4[j] && x5 = x5[j] then r[j] else
			 new r:hash0; r.

channel c10, c20.

let hashoracle0 = ! qH0 in(c10, (x1: host, x2: host, x3: G, x4: G, x5: G)); out(c20, h0(x1,x2,x3,x4,x5)). 

fun h1(host, host, G, G, G):hash1.

equiv (x1: host, x2: host, x3: G, x4: G, x5: G) N -> h1(x1, x2, x3, x4, x5) [all]
      <=(0)=>
      (x1: host, x2: host, x3: G, x4: G, x5: G) N -> find[unique] j <= N suchthat defined(x1[j],x2[j],x3[j],x4[j],x5[j],r1[j]) && otheruses(r1[j]) && x1 = x1[j] && x2 = x2[j] && x3 = x3[j] && x4 = x4[j] && x5 = x5[j] then r1[j] else
			 new r1:hash1; r1.

channel c11, c21.

let hashoracle1 = ! qH1 in(c11, (x11: host, x12: host, x13: G, x14: G, x15: G)); out(c21, h1(x11,x12,x13,x14,x15)). 


(* Queries *)

query secret sk_u.
query secret sk_s.

channel c1, c2, c3, c4, c5, c6, c7, c8, c9, cp,
	start, finish.

const U : host.
const S : host.

event termS(host, G, host, G, hash1, hash0).
event termU(host, G, host, G, hash1, hash0).

query x:host, X:G, y:host, Y:G, a: hash1, k:hash0;
	event inj:termS(x,X,y,Y,a,k) ==> inj:termU(x,X,y,Y,a,k).
query x:host, X:G, y:host, Y:G, a: hash1, k:hash0, k':hash0;
	event termS(x,X,y,Y,a,k) && termU(x,X,y,Y,a,k') ==> k = k'.

(* Client *)

let processU =
	in(c1, ());
	new x: exponent;
	let X:G = exp(g,x) in
	out(c2, (U, X));
        in(c5, (=S, Ystar_u: G));
	let Y_u = dec(Ystar_u, pw) in
	let K_u = exp(Y_u, x) in
	let auth_u = h1(U,S,X,Y_u,K_u) in
	let sk_u: hash0 = h0(U,S,X,Y_u,K_u) in
	event termU(U, X, S, Ystar_u, auth_u, sk_u);
	out(c6, auth_u).

(* Server *)

let processS =
	in(c3, (=U, X_s: G));
	new y: exponent;
	let Y = exp(g,y) in
	let Ystar = enc(Y, pw) in
	out(c4, (S, Ystar));
	in(c7, auth_s: hash1);
	find j <= NU suchthat defined(X[j]) && X[j] = X_s then
	let K_s = exp(X_s, y) in
	if auth_s = h1(U,S,X_s,Y,K_s) then
	let sk_s: hash0 = h0(U,S,X_s,Y,K_s) in
	event termS(U, X_s, S, Ystar, auth_s, sk_s).


process 
	in(start, ());
	new pw: passwd;
	out(c8, ());
	((! NU processU) |
	 (! NS processS) | 
	 enc_dec_oracle | hashoracle0 | hashoracle1)

